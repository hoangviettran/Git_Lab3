
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002b08  08002b08  00012b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b28  08002b28  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  08002b28  08002b28  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b28  08002b28  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b28  08002b28  00012b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b2c  08002b2c  00012b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08002b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000050  08002b80  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002b80  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009026  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019f3  00000000  00000000  0002909f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  0002aa98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002b4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a87  00000000  00000000  0002bdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b170  00000000  00000000  0004284f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008214a  00000000  00000000  0004d9bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cfb09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027ec  00000000  00000000  000cfb5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000050 	.word	0x20000050
 8000128:	00000000 	.word	0x00000000
 800012c:	08002af0 	.word	0x08002af0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000054 	.word	0x20000054
 8000148:	08002af0 	.word	0x08002af0

0800014c <isButton1Pressed>:

int KeyReg3[3] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int TimerForKeyPress[3] = {300, 300, 300};

//button1 = MODE, button2 = INC, button3 = SET
int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	2000006c 	.word	0x2000006c

08000170 <isButton2Pressed>:

int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000070 	.word	0x20000070

08000194 <isButton3Pressed>:

int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000074 	.word	0x20000074

080001b8 <subKeyProcess>:

void subKeyProcess(int i){
 80001b8:	b480      	push	{r7}
 80001ba:	b083      	sub	sp, #12
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
	switch(i){
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	2b02      	cmp	r3, #2
 80001c4:	d011      	beq.n	80001ea <subKeyProcess+0x32>
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2b02      	cmp	r3, #2
 80001ca:	dc12      	bgt.n	80001f2 <subKeyProcess+0x3a>
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d003      	beq.n	80001da <subKeyProcess+0x22>
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	2b01      	cmp	r3, #1
 80001d6:	d004      	beq.n	80001e2 <subKeyProcess+0x2a>
		break;
	case 2:
		button3_flag = 1;
		break;
	default:
		break;
 80001d8:	e00b      	b.n	80001f2 <subKeyProcess+0x3a>
		button1_flag = 1;
 80001da:	4b09      	ldr	r3, [pc, #36]	; (8000200 <subKeyProcess+0x48>)
 80001dc:	2201      	movs	r2, #1
 80001de:	601a      	str	r2, [r3, #0]
		break;
 80001e0:	e008      	b.n	80001f4 <subKeyProcess+0x3c>
		button2_flag = 1;
 80001e2:	4b08      	ldr	r3, [pc, #32]	; (8000204 <subKeyProcess+0x4c>)
 80001e4:	2201      	movs	r2, #1
 80001e6:	601a      	str	r2, [r3, #0]
		break;
 80001e8:	e004      	b.n	80001f4 <subKeyProcess+0x3c>
		button3_flag = 1;
 80001ea:	4b07      	ldr	r3, [pc, #28]	; (8000208 <subKeyProcess+0x50>)
 80001ec:	2201      	movs	r2, #1
 80001ee:	601a      	str	r2, [r3, #0]
		break;
 80001f0:	e000      	b.n	80001f4 <subKeyProcess+0x3c>
		break;
 80001f2:	bf00      	nop
	}
}
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	2000006c 	.word	0x2000006c
 8000204:	20000070 	.word	0x20000070
 8000208:	20000074 	.word	0x20000074

0800020c <getKeyInput>:


void getKeyInput(){
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
	for(int i = 0; i < 3; i++){
 8000212:	2300      	movs	r3, #0
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	e088      	b.n	800032a <getKeyInput+0x11e>
		KeyReg0[i] = KeyReg1[i];
 8000218:	4a48      	ldr	r2, [pc, #288]	; (800033c <getKeyInput+0x130>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	4947      	ldr	r1, [pc, #284]	; (8000340 <getKeyInput+0x134>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000228:	4a46      	ldr	r2, [pc, #280]	; (8000344 <getKeyInput+0x138>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000230:	4942      	ldr	r1, [pc, #264]	; (800033c <getKeyInput+0x130>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(i == 0){
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d10b      	bne.n	8000256 <getKeyInput+0x4a>
			KeyReg2[i] = HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin);
 800023e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000242:	4841      	ldr	r0, [pc, #260]	; (8000348 <getKeyInput+0x13c>)
 8000244:	f001 fc2c 	bl	8001aa0 <HAL_GPIO_ReadPin>
 8000248:	4603      	mov	r3, r0
 800024a:	4619      	mov	r1, r3
 800024c:	4a3d      	ldr	r2, [pc, #244]	; (8000344 <getKeyInput+0x138>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000254:	e01c      	b.n	8000290 <getKeyInput+0x84>
		}
		else if(i == 1){
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2b01      	cmp	r3, #1
 800025a:	d10b      	bne.n	8000274 <getKeyInput+0x68>
			KeyReg2[i] = HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin);
 800025c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000260:	4839      	ldr	r0, [pc, #228]	; (8000348 <getKeyInput+0x13c>)
 8000262:	f001 fc1d 	bl	8001aa0 <HAL_GPIO_ReadPin>
 8000266:	4603      	mov	r3, r0
 8000268:	4619      	mov	r1, r3
 800026a:	4a36      	ldr	r2, [pc, #216]	; (8000344 <getKeyInput+0x138>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000272:	e00d      	b.n	8000290 <getKeyInput+0x84>
		}
		else if(i == 2){
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2b02      	cmp	r3, #2
 8000278:	d10a      	bne.n	8000290 <getKeyInput+0x84>
			KeyReg2[i] = HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin);
 800027a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800027e:	4832      	ldr	r0, [pc, #200]	; (8000348 <getKeyInput+0x13c>)
 8000280:	f001 fc0e 	bl	8001aa0 <HAL_GPIO_ReadPin>
 8000284:	4603      	mov	r3, r0
 8000286:	4619      	mov	r1, r3
 8000288:	4a2e      	ldr	r2, [pc, #184]	; (8000344 <getKeyInput+0x138>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		if((KeyReg0[i] == KeyReg1[i]) && ( KeyReg1[i] == KeyReg2[i])){
 8000290:	4a2b      	ldr	r2, [pc, #172]	; (8000340 <getKeyInput+0x134>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000298:	4928      	ldr	r1, [pc, #160]	; (800033c <getKeyInput+0x130>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002a0:	429a      	cmp	r2, r3
 80002a2:	d13f      	bne.n	8000324 <getKeyInput+0x118>
 80002a4:	4a25      	ldr	r2, [pc, #148]	; (800033c <getKeyInput+0x130>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ac:	4925      	ldr	r1, [pc, #148]	; (8000344 <getKeyInput+0x138>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002b4:	429a      	cmp	r2, r3
 80002b6:	d135      	bne.n	8000324 <getKeyInput+0x118>
			if(KeyReg3[i] != KeyReg2[i]){
 80002b8:	4a24      	ldr	r2, [pc, #144]	; (800034c <getKeyInput+0x140>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002c0:	4920      	ldr	r1, [pc, #128]	; (8000344 <getKeyInput+0x138>)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	d017      	beq.n	80002fc <getKeyInput+0xf0>
				//button debouncing
				KeyReg3[i] = KeyReg2[i];
 80002cc:	4a1d      	ldr	r2, [pc, #116]	; (8000344 <getKeyInput+0x138>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002d4:	491d      	ldr	r1, [pc, #116]	; (800034c <getKeyInput+0x140>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(KeyReg2[i] == PRESSED_STATE){
 80002dc:	4a19      	ldr	r2, [pc, #100]	; (8000344 <getKeyInput+0x138>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d11d      	bne.n	8000324 <getKeyInput+0x118>
					subKeyProcess(i);
 80002e8:	6878      	ldr	r0, [r7, #4]
 80002ea:	f7ff ff65 	bl	80001b8 <subKeyProcess>
					TimerForKeyPress[i] = 300;
 80002ee:	4a18      	ldr	r2, [pc, #96]	; (8000350 <getKeyInput+0x144>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80002f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002fa:	e013      	b.n	8000324 <getKeyInput+0x118>
				}
			}
			else{
				//handle the long press behavior
				TimerForKeyPress[i]--;
 80002fc:	4a14      	ldr	r2, [pc, #80]	; (8000350 <getKeyInput+0x144>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000304:	1e5a      	subs	r2, r3, #1
 8000306:	4912      	ldr	r1, [pc, #72]	; (8000350 <getKeyInput+0x144>)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimerForKeyPress[i] == 0){
 800030e:	4a10      	ldr	r2, [pc, #64]	; (8000350 <getKeyInput+0x144>)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d104      	bne.n	8000324 <getKeyInput+0x118>
					KeyReg3[i] = NORMAL_STATE;
 800031a:	4a0c      	ldr	r2, [pc, #48]	; (800034c <getKeyInput+0x140>)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2101      	movs	r1, #1
 8000320:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < 3; i++){
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	3301      	adds	r3, #1
 8000328:	607b      	str	r3, [r7, #4]
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	2b02      	cmp	r3, #2
 800032e:	f77f af73 	ble.w	8000218 <getKeyInput+0xc>
				}
			}
		}
	}

}
 8000332:	bf00      	nop
 8000334:	bf00      	nop
 8000336:	3708      	adds	r7, #8
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	2000000c 	.word	0x2000000c
 8000340:	20000000 	.word	0x20000000
 8000344:	20000018 	.word	0x20000018
 8000348:	40010c00 	.word	0x40010c00
 800034c:	20000024 	.word	0x20000024
 8000350:	20000030 	.word	0x20000030

08000354 <updateClockBuffer>:

const int MAX_LED = 7;
int index_led = 0;
int led_buffer[7] = {0,0,0,0,0,0,0};
//ex5
void updateClockBuffer(){
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
    led_buffer[0] = Horizontal_TrafficLight%10;
 8000358:	4b4f      	ldr	r3, [pc, #316]	; (8000498 <updateClockBuffer+0x144>)
 800035a:	6819      	ldr	r1, [r3, #0]
 800035c:	4b4f      	ldr	r3, [pc, #316]	; (800049c <updateClockBuffer+0x148>)
 800035e:	fb83 2301 	smull	r2, r3, r3, r1
 8000362:	109a      	asrs	r2, r3, #2
 8000364:	17cb      	asrs	r3, r1, #31
 8000366:	1ad2      	subs	r2, r2, r3
 8000368:	4613      	mov	r3, r2
 800036a:	009b      	lsls	r3, r3, #2
 800036c:	4413      	add	r3, r2
 800036e:	005b      	lsls	r3, r3, #1
 8000370:	1aca      	subs	r2, r1, r3
 8000372:	4b4b      	ldr	r3, [pc, #300]	; (80004a0 <updateClockBuffer+0x14c>)
 8000374:	601a      	str	r2, [r3, #0]
    led_buffer[1] = Horizontal_TrafficLight/10;
 8000376:	4b48      	ldr	r3, [pc, #288]	; (8000498 <updateClockBuffer+0x144>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a48      	ldr	r2, [pc, #288]	; (800049c <updateClockBuffer+0x148>)
 800037c:	fb82 1203 	smull	r1, r2, r2, r3
 8000380:	1092      	asrs	r2, r2, #2
 8000382:	17db      	asrs	r3, r3, #31
 8000384:	1ad3      	subs	r3, r2, r3
 8000386:	4a46      	ldr	r2, [pc, #280]	; (80004a0 <updateClockBuffer+0x14c>)
 8000388:	6053      	str	r3, [r2, #4]
    led_buffer[2] = Vertial_TrafficLight%10;
 800038a:	4b46      	ldr	r3, [pc, #280]	; (80004a4 <updateClockBuffer+0x150>)
 800038c:	6819      	ldr	r1, [r3, #0]
 800038e:	4b43      	ldr	r3, [pc, #268]	; (800049c <updateClockBuffer+0x148>)
 8000390:	fb83 2301 	smull	r2, r3, r3, r1
 8000394:	109a      	asrs	r2, r3, #2
 8000396:	17cb      	asrs	r3, r1, #31
 8000398:	1ad2      	subs	r2, r2, r3
 800039a:	4613      	mov	r3, r2
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	4413      	add	r3, r2
 80003a0:	005b      	lsls	r3, r3, #1
 80003a2:	1aca      	subs	r2, r1, r3
 80003a4:	4b3e      	ldr	r3, [pc, #248]	; (80004a0 <updateClockBuffer+0x14c>)
 80003a6:	609a      	str	r2, [r3, #8]
    led_buffer[3] = Vertial_TrafficLight/10;
 80003a8:	4b3e      	ldr	r3, [pc, #248]	; (80004a4 <updateClockBuffer+0x150>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a3b      	ldr	r2, [pc, #236]	; (800049c <updateClockBuffer+0x148>)
 80003ae:	fb82 1203 	smull	r1, r2, r2, r3
 80003b2:	1092      	asrs	r2, r2, #2
 80003b4:	17db      	asrs	r3, r3, #31
 80003b6:	1ad3      	subs	r3, r2, r3
 80003b8:	4a39      	ldr	r2, [pc, #228]	; (80004a0 <updateClockBuffer+0x14c>)
 80003ba:	60d3      	str	r3, [r2, #12]
    led_buffer[4] = ModeValue;
 80003bc:	4b3a      	ldr	r3, [pc, #232]	; (80004a8 <updateClockBuffer+0x154>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a37      	ldr	r2, [pc, #220]	; (80004a0 <updateClockBuffer+0x14c>)
 80003c2:	6113      	str	r3, [r2, #16]
    switch(ModeValue){
 80003c4:	4b38      	ldr	r3, [pc, #224]	; (80004a8 <updateClockBuffer+0x154>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	3b01      	subs	r3, #1
 80003ca:	2b03      	cmp	r3, #3
 80003cc:	d85f      	bhi.n	800048e <updateClockBuffer+0x13a>
 80003ce:	a201      	add	r2, pc, #4	; (adr r2, 80003d4 <updateClockBuffer+0x80>)
 80003d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003d4:	080003e5 	.word	0x080003e5
 80003d8:	080003f3 	.word	0x080003f3
 80003dc:	08000427 	.word	0x08000427
 80003e0:	0800045b 	.word	0x0800045b
    case 1:
    	led_buffer[5] = 0;
 80003e4:	4b2e      	ldr	r3, [pc, #184]	; (80004a0 <updateClockBuffer+0x14c>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	615a      	str	r2, [r3, #20]
    	led_buffer[6] = 0;
 80003ea:	4b2d      	ldr	r3, [pc, #180]	; (80004a0 <updateClockBuffer+0x14c>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
    	break;
 80003f0:	e04d      	b.n	800048e <updateClockBuffer+0x13a>
    case 2:
    	led_buffer[5] = RED_Time_value/10;
 80003f2:	4b2e      	ldr	r3, [pc, #184]	; (80004ac <updateClockBuffer+0x158>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a29      	ldr	r2, [pc, #164]	; (800049c <updateClockBuffer+0x148>)
 80003f8:	fb82 1203 	smull	r1, r2, r2, r3
 80003fc:	1092      	asrs	r2, r2, #2
 80003fe:	17db      	asrs	r3, r3, #31
 8000400:	1ad3      	subs	r3, r2, r3
 8000402:	4a27      	ldr	r2, [pc, #156]	; (80004a0 <updateClockBuffer+0x14c>)
 8000404:	6153      	str	r3, [r2, #20]
        led_buffer[6] = RED_Time_value%10;
 8000406:	4b29      	ldr	r3, [pc, #164]	; (80004ac <updateClockBuffer+0x158>)
 8000408:	6819      	ldr	r1, [r3, #0]
 800040a:	4b24      	ldr	r3, [pc, #144]	; (800049c <updateClockBuffer+0x148>)
 800040c:	fb83 2301 	smull	r2, r3, r3, r1
 8000410:	109a      	asrs	r2, r3, #2
 8000412:	17cb      	asrs	r3, r1, #31
 8000414:	1ad2      	subs	r2, r2, r3
 8000416:	4613      	mov	r3, r2
 8000418:	009b      	lsls	r3, r3, #2
 800041a:	4413      	add	r3, r2
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	1aca      	subs	r2, r1, r3
 8000420:	4b1f      	ldr	r3, [pc, #124]	; (80004a0 <updateClockBuffer+0x14c>)
 8000422:	619a      	str	r2, [r3, #24]
       	break;
 8000424:	e033      	b.n	800048e <updateClockBuffer+0x13a>
    case 3:
    	led_buffer[5] = YELLOW_Time_value/10;
 8000426:	4b22      	ldr	r3, [pc, #136]	; (80004b0 <updateClockBuffer+0x15c>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4a1c      	ldr	r2, [pc, #112]	; (800049c <updateClockBuffer+0x148>)
 800042c:	fb82 1203 	smull	r1, r2, r2, r3
 8000430:	1092      	asrs	r2, r2, #2
 8000432:	17db      	asrs	r3, r3, #31
 8000434:	1ad3      	subs	r3, r2, r3
 8000436:	4a1a      	ldr	r2, [pc, #104]	; (80004a0 <updateClockBuffer+0x14c>)
 8000438:	6153      	str	r3, [r2, #20]
        led_buffer[6] = YELLOW_Time_value%10;
 800043a:	4b1d      	ldr	r3, [pc, #116]	; (80004b0 <updateClockBuffer+0x15c>)
 800043c:	6819      	ldr	r1, [r3, #0]
 800043e:	4b17      	ldr	r3, [pc, #92]	; (800049c <updateClockBuffer+0x148>)
 8000440:	fb83 2301 	smull	r2, r3, r3, r1
 8000444:	109a      	asrs	r2, r3, #2
 8000446:	17cb      	asrs	r3, r1, #31
 8000448:	1ad2      	subs	r2, r2, r3
 800044a:	4613      	mov	r3, r2
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	4413      	add	r3, r2
 8000450:	005b      	lsls	r3, r3, #1
 8000452:	1aca      	subs	r2, r1, r3
 8000454:	4b12      	ldr	r3, [pc, #72]	; (80004a0 <updateClockBuffer+0x14c>)
 8000456:	619a      	str	r2, [r3, #24]
       	break;
 8000458:	e019      	b.n	800048e <updateClockBuffer+0x13a>
    case 4:
    	led_buffer[5] = GREEN_Time_value/10;
 800045a:	4b16      	ldr	r3, [pc, #88]	; (80004b4 <updateClockBuffer+0x160>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a0f      	ldr	r2, [pc, #60]	; (800049c <updateClockBuffer+0x148>)
 8000460:	fb82 1203 	smull	r1, r2, r2, r3
 8000464:	1092      	asrs	r2, r2, #2
 8000466:	17db      	asrs	r3, r3, #31
 8000468:	1ad3      	subs	r3, r2, r3
 800046a:	4a0d      	ldr	r2, [pc, #52]	; (80004a0 <updateClockBuffer+0x14c>)
 800046c:	6153      	str	r3, [r2, #20]
        led_buffer[6] = GREEN_Time_value%10;
 800046e:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <updateClockBuffer+0x160>)
 8000470:	6819      	ldr	r1, [r3, #0]
 8000472:	4b0a      	ldr	r3, [pc, #40]	; (800049c <updateClockBuffer+0x148>)
 8000474:	fb83 2301 	smull	r2, r3, r3, r1
 8000478:	109a      	asrs	r2, r3, #2
 800047a:	17cb      	asrs	r3, r1, #31
 800047c:	1ad2      	subs	r2, r2, r3
 800047e:	4613      	mov	r3, r2
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	4413      	add	r3, r2
 8000484:	005b      	lsls	r3, r3, #1
 8000486:	1aca      	subs	r2, r1, r3
 8000488:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <updateClockBuffer+0x14c>)
 800048a:	619a      	str	r2, [r3, #24]
       	break;
 800048c:	bf00      	nop
    }
}
 800048e:	bf00      	nop
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	200000a0 	.word	0x200000a0
 800049c:	66666667 	.word	0x66666667
 80004a0:	20000078 	.word	0x20000078
 80004a4:	200000a4 	.word	0x200000a4
 80004a8:	200000a8 	.word	0x200000a8
 80004ac:	2000003c 	.word	0x2000003c
 80004b0:	200000b0 	.word	0x200000b0
 80004b4:	200000ac 	.word	0x200000ac

080004b8 <update7SEG>:

void update7SEG(int index){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2b06      	cmp	r3, #6
 80004c4:	f200 814d 	bhi.w	8000762 <update7SEG+0x2aa>
 80004c8:	a201      	add	r2, pc, #4	; (adr r2, 80004d0 <update7SEG+0x18>)
 80004ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ce:	bf00      	nop
 80004d0:	080004ed 	.word	0x080004ed
 80004d4:	08000547 	.word	0x08000547
 80004d8:	080005a1 	.word	0x080005a1
 80004dc:	080005fb 	.word	0x080005fb
 80004e0:	08000655 	.word	0x08000655
 80004e4:	080006af 	.word	0x080006af
 80004e8:	08000709 	.word	0x08000709
	switch(index){
	case 0:
		HAL_GPIO_WritePin ( EN1_GPIO_Port , EN1_Pin , GPIO_PIN_RESET ) ;
 80004ec:	2200      	movs	r2, #0
 80004ee:	2120      	movs	r1, #32
 80004f0:	489e      	ldr	r0, [pc, #632]	; (800076c <update7SEG+0x2b4>)
 80004f2:	f001 faec 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN2_GPIO_Port , EN2_Pin , GPIO_PIN_SET ) ;
 80004f6:	2201      	movs	r2, #1
 80004f8:	2140      	movs	r1, #64	; 0x40
 80004fa:	489c      	ldr	r0, [pc, #624]	; (800076c <update7SEG+0x2b4>)
 80004fc:	f001 fae7 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN3_GPIO_Port , EN3_Pin , GPIO_PIN_SET ) ;
 8000500:	2201      	movs	r2, #1
 8000502:	2180      	movs	r1, #128	; 0x80
 8000504:	4899      	ldr	r0, [pc, #612]	; (800076c <update7SEG+0x2b4>)
 8000506:	f001 fae2 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN4_GPIO_Port , EN4_Pin , GPIO_PIN_SET ) ;
 800050a:	2201      	movs	r2, #1
 800050c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000510:	4896      	ldr	r0, [pc, #600]	; (800076c <update7SEG+0x2b4>)
 8000512:	f001 fadc 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN5_GPIO_Port , EN5_Pin , GPIO_PIN_SET ) ;
 8000516:	2201      	movs	r2, #1
 8000518:	f44f 7100 	mov.w	r1, #512	; 0x200
 800051c:	4893      	ldr	r0, [pc, #588]	; (800076c <update7SEG+0x2b4>)
 800051e:	f001 fad6 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN6_GPIO_Port , EN6_Pin , GPIO_PIN_SET ) ;
 8000522:	2201      	movs	r2, #1
 8000524:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000528:	4891      	ldr	r0, [pc, #580]	; (8000770 <update7SEG+0x2b8>)
 800052a:	f001 fad0 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN7_GPIO_Port , EN7_Pin , GPIO_PIN_SET ) ;
 800052e:	2201      	movs	r2, #1
 8000530:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000534:	488e      	ldr	r0, [pc, #568]	; (8000770 <update7SEG+0x2b8>)
 8000536:	f001 faca 	bl	8001ace <HAL_GPIO_WritePin>
		display7Seg(led_buffer[0]);
 800053a:	4b8e      	ldr	r3, [pc, #568]	; (8000774 <update7SEG+0x2bc>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4618      	mov	r0, r3
 8000540:	f000 f91a 	bl	8000778 <display7Seg>
		break;
 8000544:	e10e      	b.n	8000764 <update7SEG+0x2ac>
	case 1:
		HAL_GPIO_WritePin ( EN1_GPIO_Port , EN1_Pin , GPIO_PIN_SET ) ;
 8000546:	2201      	movs	r2, #1
 8000548:	2120      	movs	r1, #32
 800054a:	4888      	ldr	r0, [pc, #544]	; (800076c <update7SEG+0x2b4>)
 800054c:	f001 fabf 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN2_GPIO_Port , EN2_Pin , GPIO_PIN_RESET ) ;
 8000550:	2200      	movs	r2, #0
 8000552:	2140      	movs	r1, #64	; 0x40
 8000554:	4885      	ldr	r0, [pc, #532]	; (800076c <update7SEG+0x2b4>)
 8000556:	f001 faba 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN3_GPIO_Port , EN3_Pin , GPIO_PIN_SET ) ;
 800055a:	2201      	movs	r2, #1
 800055c:	2180      	movs	r1, #128	; 0x80
 800055e:	4883      	ldr	r0, [pc, #524]	; (800076c <update7SEG+0x2b4>)
 8000560:	f001 fab5 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN4_GPIO_Port , EN4_Pin , GPIO_PIN_SET ) ;
 8000564:	2201      	movs	r2, #1
 8000566:	f44f 7180 	mov.w	r1, #256	; 0x100
 800056a:	4880      	ldr	r0, [pc, #512]	; (800076c <update7SEG+0x2b4>)
 800056c:	f001 faaf 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN5_GPIO_Port , EN5_Pin , GPIO_PIN_SET ) ;
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000576:	487d      	ldr	r0, [pc, #500]	; (800076c <update7SEG+0x2b4>)
 8000578:	f001 faa9 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN6_GPIO_Port , EN6_Pin , GPIO_PIN_SET ) ;
 800057c:	2201      	movs	r2, #1
 800057e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000582:	487b      	ldr	r0, [pc, #492]	; (8000770 <update7SEG+0x2b8>)
 8000584:	f001 faa3 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN7_GPIO_Port , EN7_Pin , GPIO_PIN_SET ) ;
 8000588:	2201      	movs	r2, #1
 800058a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800058e:	4878      	ldr	r0, [pc, #480]	; (8000770 <update7SEG+0x2b8>)
 8000590:	f001 fa9d 	bl	8001ace <HAL_GPIO_WritePin>
		display7Seg(led_buffer[1]);
 8000594:	4b77      	ldr	r3, [pc, #476]	; (8000774 <update7SEG+0x2bc>)
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	4618      	mov	r0, r3
 800059a:	f000 f8ed 	bl	8000778 <display7Seg>
		break;
 800059e:	e0e1      	b.n	8000764 <update7SEG+0x2ac>
	case 2:
		HAL_GPIO_WritePin ( EN1_GPIO_Port , EN1_Pin , GPIO_PIN_SET ) ;
 80005a0:	2201      	movs	r2, #1
 80005a2:	2120      	movs	r1, #32
 80005a4:	4871      	ldr	r0, [pc, #452]	; (800076c <update7SEG+0x2b4>)
 80005a6:	f001 fa92 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN2_GPIO_Port , EN2_Pin , GPIO_PIN_SET ) ;
 80005aa:	2201      	movs	r2, #1
 80005ac:	2140      	movs	r1, #64	; 0x40
 80005ae:	486f      	ldr	r0, [pc, #444]	; (800076c <update7SEG+0x2b4>)
 80005b0:	f001 fa8d 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN3_GPIO_Port , EN3_Pin , GPIO_PIN_RESET ) ;
 80005b4:	2200      	movs	r2, #0
 80005b6:	2180      	movs	r1, #128	; 0x80
 80005b8:	486c      	ldr	r0, [pc, #432]	; (800076c <update7SEG+0x2b4>)
 80005ba:	f001 fa88 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN4_GPIO_Port , EN4_Pin , GPIO_PIN_SET ) ;
 80005be:	2201      	movs	r2, #1
 80005c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c4:	4869      	ldr	r0, [pc, #420]	; (800076c <update7SEG+0x2b4>)
 80005c6:	f001 fa82 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN5_GPIO_Port , EN5_Pin , GPIO_PIN_SET ) ;
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005d0:	4866      	ldr	r0, [pc, #408]	; (800076c <update7SEG+0x2b4>)
 80005d2:	f001 fa7c 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN6_GPIO_Port , EN6_Pin , GPIO_PIN_SET ) ;
 80005d6:	2201      	movs	r2, #1
 80005d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005dc:	4864      	ldr	r0, [pc, #400]	; (8000770 <update7SEG+0x2b8>)
 80005de:	f001 fa76 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN7_GPIO_Port , EN7_Pin , GPIO_PIN_SET ) ;
 80005e2:	2201      	movs	r2, #1
 80005e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e8:	4861      	ldr	r0, [pc, #388]	; (8000770 <update7SEG+0x2b8>)
 80005ea:	f001 fa70 	bl	8001ace <HAL_GPIO_WritePin>
		display7Seg(led_buffer[2]);
 80005ee:	4b61      	ldr	r3, [pc, #388]	; (8000774 <update7SEG+0x2bc>)
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 f8c0 	bl	8000778 <display7Seg>
		break;
 80005f8:	e0b4      	b.n	8000764 <update7SEG+0x2ac>
	case 3:
		HAL_GPIO_WritePin ( EN1_GPIO_Port , EN1_Pin , GPIO_PIN_SET ) ;
 80005fa:	2201      	movs	r2, #1
 80005fc:	2120      	movs	r1, #32
 80005fe:	485b      	ldr	r0, [pc, #364]	; (800076c <update7SEG+0x2b4>)
 8000600:	f001 fa65 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN2_GPIO_Port , EN2_Pin , GPIO_PIN_SET ) ;
 8000604:	2201      	movs	r2, #1
 8000606:	2140      	movs	r1, #64	; 0x40
 8000608:	4858      	ldr	r0, [pc, #352]	; (800076c <update7SEG+0x2b4>)
 800060a:	f001 fa60 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN3_GPIO_Port , EN3_Pin , GPIO_PIN_SET ) ;
 800060e:	2201      	movs	r2, #1
 8000610:	2180      	movs	r1, #128	; 0x80
 8000612:	4856      	ldr	r0, [pc, #344]	; (800076c <update7SEG+0x2b4>)
 8000614:	f001 fa5b 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN4_GPIO_Port , EN4_Pin , GPIO_PIN_RESET ) ;
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061e:	4853      	ldr	r0, [pc, #332]	; (800076c <update7SEG+0x2b4>)
 8000620:	f001 fa55 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN5_GPIO_Port , EN5_Pin , GPIO_PIN_SET ) ;
 8000624:	2201      	movs	r2, #1
 8000626:	f44f 7100 	mov.w	r1, #512	; 0x200
 800062a:	4850      	ldr	r0, [pc, #320]	; (800076c <update7SEG+0x2b4>)
 800062c:	f001 fa4f 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN6_GPIO_Port , EN6_Pin , GPIO_PIN_SET ) ;
 8000630:	2201      	movs	r2, #1
 8000632:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000636:	484e      	ldr	r0, [pc, #312]	; (8000770 <update7SEG+0x2b8>)
 8000638:	f001 fa49 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN7_GPIO_Port , EN7_Pin , GPIO_PIN_SET ) ;
 800063c:	2201      	movs	r2, #1
 800063e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000642:	484b      	ldr	r0, [pc, #300]	; (8000770 <update7SEG+0x2b8>)
 8000644:	f001 fa43 	bl	8001ace <HAL_GPIO_WritePin>
		display7Seg(led_buffer[3]);
 8000648:	4b4a      	ldr	r3, [pc, #296]	; (8000774 <update7SEG+0x2bc>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	4618      	mov	r0, r3
 800064e:	f000 f893 	bl	8000778 <display7Seg>
		break;
 8000652:	e087      	b.n	8000764 <update7SEG+0x2ac>
	case 4:
		HAL_GPIO_WritePin ( EN1_GPIO_Port , EN1_Pin , GPIO_PIN_SET ) ;
 8000654:	2201      	movs	r2, #1
 8000656:	2120      	movs	r1, #32
 8000658:	4844      	ldr	r0, [pc, #272]	; (800076c <update7SEG+0x2b4>)
 800065a:	f001 fa38 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN2_GPIO_Port , EN2_Pin , GPIO_PIN_SET ) ;
 800065e:	2201      	movs	r2, #1
 8000660:	2140      	movs	r1, #64	; 0x40
 8000662:	4842      	ldr	r0, [pc, #264]	; (800076c <update7SEG+0x2b4>)
 8000664:	f001 fa33 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN3_GPIO_Port , EN3_Pin , GPIO_PIN_SET ) ;
 8000668:	2201      	movs	r2, #1
 800066a:	2180      	movs	r1, #128	; 0x80
 800066c:	483f      	ldr	r0, [pc, #252]	; (800076c <update7SEG+0x2b4>)
 800066e:	f001 fa2e 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN4_GPIO_Port , EN4_Pin , GPIO_PIN_SET ) ;
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000678:	483c      	ldr	r0, [pc, #240]	; (800076c <update7SEG+0x2b4>)
 800067a:	f001 fa28 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN5_GPIO_Port , EN5_Pin , GPIO_PIN_RESET ) ;
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000684:	4839      	ldr	r0, [pc, #228]	; (800076c <update7SEG+0x2b4>)
 8000686:	f001 fa22 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN6_GPIO_Port , EN6_Pin , GPIO_PIN_SET ) ;
 800068a:	2201      	movs	r2, #1
 800068c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000690:	4837      	ldr	r0, [pc, #220]	; (8000770 <update7SEG+0x2b8>)
 8000692:	f001 fa1c 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN7_GPIO_Port , EN7_Pin , GPIO_PIN_SET ) ;
 8000696:	2201      	movs	r2, #1
 8000698:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800069c:	4834      	ldr	r0, [pc, #208]	; (8000770 <update7SEG+0x2b8>)
 800069e:	f001 fa16 	bl	8001ace <HAL_GPIO_WritePin>
		display7Seg(led_buffer[4]);
 80006a2:	4b34      	ldr	r3, [pc, #208]	; (8000774 <update7SEG+0x2bc>)
 80006a4:	691b      	ldr	r3, [r3, #16]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 f866 	bl	8000778 <display7Seg>
		break;
 80006ac:	e05a      	b.n	8000764 <update7SEG+0x2ac>
	case 5:
		HAL_GPIO_WritePin ( EN1_GPIO_Port , EN1_Pin , GPIO_PIN_SET ) ;
 80006ae:	2201      	movs	r2, #1
 80006b0:	2120      	movs	r1, #32
 80006b2:	482e      	ldr	r0, [pc, #184]	; (800076c <update7SEG+0x2b4>)
 80006b4:	f001 fa0b 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN2_GPIO_Port , EN2_Pin , GPIO_PIN_SET ) ;
 80006b8:	2201      	movs	r2, #1
 80006ba:	2140      	movs	r1, #64	; 0x40
 80006bc:	482b      	ldr	r0, [pc, #172]	; (800076c <update7SEG+0x2b4>)
 80006be:	f001 fa06 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN3_GPIO_Port , EN3_Pin , GPIO_PIN_SET ) ;
 80006c2:	2201      	movs	r2, #1
 80006c4:	2180      	movs	r1, #128	; 0x80
 80006c6:	4829      	ldr	r0, [pc, #164]	; (800076c <update7SEG+0x2b4>)
 80006c8:	f001 fa01 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN4_GPIO_Port , EN4_Pin , GPIO_PIN_SET ) ;
 80006cc:	2201      	movs	r2, #1
 80006ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d2:	4826      	ldr	r0, [pc, #152]	; (800076c <update7SEG+0x2b4>)
 80006d4:	f001 f9fb 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN5_GPIO_Port , EN5_Pin , GPIO_PIN_SET ) ;
 80006d8:	2201      	movs	r2, #1
 80006da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006de:	4823      	ldr	r0, [pc, #140]	; (800076c <update7SEG+0x2b4>)
 80006e0:	f001 f9f5 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN6_GPIO_Port , EN6_Pin , GPIO_PIN_RESET ) ;
 80006e4:	2200      	movs	r2, #0
 80006e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ea:	4821      	ldr	r0, [pc, #132]	; (8000770 <update7SEG+0x2b8>)
 80006ec:	f001 f9ef 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN7_GPIO_Port , EN7_Pin , GPIO_PIN_SET ) ;
 80006f0:	2201      	movs	r2, #1
 80006f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006f6:	481e      	ldr	r0, [pc, #120]	; (8000770 <update7SEG+0x2b8>)
 80006f8:	f001 f9e9 	bl	8001ace <HAL_GPIO_WritePin>
		display7Seg(led_buffer[5]);
 80006fc:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <update7SEG+0x2bc>)
 80006fe:	695b      	ldr	r3, [r3, #20]
 8000700:	4618      	mov	r0, r3
 8000702:	f000 f839 	bl	8000778 <display7Seg>
		break;
 8000706:	e02d      	b.n	8000764 <update7SEG+0x2ac>
	case 6:
		HAL_GPIO_WritePin ( EN1_GPIO_Port , EN1_Pin , GPIO_PIN_SET ) ;
 8000708:	2201      	movs	r2, #1
 800070a:	2120      	movs	r1, #32
 800070c:	4817      	ldr	r0, [pc, #92]	; (800076c <update7SEG+0x2b4>)
 800070e:	f001 f9de 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN2_GPIO_Port , EN2_Pin , GPIO_PIN_SET ) ;
 8000712:	2201      	movs	r2, #1
 8000714:	2140      	movs	r1, #64	; 0x40
 8000716:	4815      	ldr	r0, [pc, #84]	; (800076c <update7SEG+0x2b4>)
 8000718:	f001 f9d9 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN3_GPIO_Port , EN3_Pin , GPIO_PIN_SET ) ;
 800071c:	2201      	movs	r2, #1
 800071e:	2180      	movs	r1, #128	; 0x80
 8000720:	4812      	ldr	r0, [pc, #72]	; (800076c <update7SEG+0x2b4>)
 8000722:	f001 f9d4 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN4_GPIO_Port , EN4_Pin , GPIO_PIN_SET ) ;
 8000726:	2201      	movs	r2, #1
 8000728:	f44f 7180 	mov.w	r1, #256	; 0x100
 800072c:	480f      	ldr	r0, [pc, #60]	; (800076c <update7SEG+0x2b4>)
 800072e:	f001 f9ce 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN5_GPIO_Port , EN5_Pin , GPIO_PIN_SET ) ;
 8000732:	2201      	movs	r2, #1
 8000734:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <update7SEG+0x2b4>)
 800073a:	f001 f9c8 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN6_GPIO_Port , EN6_Pin , GPIO_PIN_SET ) ;
 800073e:	2201      	movs	r2, #1
 8000740:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000744:	480a      	ldr	r0, [pc, #40]	; (8000770 <update7SEG+0x2b8>)
 8000746:	f001 f9c2 	bl	8001ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN7_GPIO_Port , EN7_Pin , GPIO_PIN_RESET ) ;
 800074a:	2200      	movs	r2, #0
 800074c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000750:	4807      	ldr	r0, [pc, #28]	; (8000770 <update7SEG+0x2b8>)
 8000752:	f001 f9bc 	bl	8001ace <HAL_GPIO_WritePin>
		display7Seg(led_buffer[6]);
 8000756:	4b07      	ldr	r3, [pc, #28]	; (8000774 <update7SEG+0x2bc>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	4618      	mov	r0, r3
 800075c:	f000 f80c 	bl	8000778 <display7Seg>
		break;
 8000760:	e000      	b.n	8000764 <update7SEG+0x2ac>
	default:
		break;
 8000762:	bf00      	nop
	}
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40010800 	.word	0x40010800
 8000770:	40010c00 	.word	0x40010c00
 8000774:	20000078 	.word	0x20000078

08000778 <display7Seg>:


void display7Seg(int num){
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b09      	cmp	r3, #9
 8000784:	f200 8180 	bhi.w	8000a88 <display7Seg+0x310>
 8000788:	a201      	add	r2, pc, #4	; (adr r2, 8000790 <display7Seg+0x18>)
 800078a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078e:	bf00      	nop
 8000790:	080007b9 	.word	0x080007b9
 8000794:	08000801 	.word	0x08000801
 8000798:	08000849 	.word	0x08000849
 800079c:	08000891 	.word	0x08000891
 80007a0:	080008d9 	.word	0x080008d9
 80007a4:	08000921 	.word	0x08000921
 80007a8:	08000969 	.word	0x08000969
 80007ac:	080009b1 	.word	0x080009b1
 80007b0:	080009f9 	.word	0x080009f9
 80007b4:	08000a41 	.word	0x08000a41
	switch(num){
	case 0:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 80007b8:	2200      	movs	r2, #0
 80007ba:	2101      	movs	r1, #1
 80007bc:	48c6      	ldr	r0, [pc, #792]	; (8000ad8 <display7Seg+0x360>)
 80007be:	f001 f986 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 80007c2:	2200      	movs	r2, #0
 80007c4:	2102      	movs	r1, #2
 80007c6:	48c4      	ldr	r0, [pc, #784]	; (8000ad8 <display7Seg+0x360>)
 80007c8:	f001 f981 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 80007cc:	2200      	movs	r2, #0
 80007ce:	2104      	movs	r1, #4
 80007d0:	48c1      	ldr	r0, [pc, #772]	; (8000ad8 <display7Seg+0x360>)
 80007d2:	f001 f97c 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 80007d6:	2200      	movs	r2, #0
 80007d8:	2108      	movs	r1, #8
 80007da:	48bf      	ldr	r0, [pc, #764]	; (8000ad8 <display7Seg+0x360>)
 80007dc:	f001 f977 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 80007e0:	2200      	movs	r2, #0
 80007e2:	2110      	movs	r1, #16
 80007e4:	48bc      	ldr	r0, [pc, #752]	; (8000ad8 <display7Seg+0x360>)
 80007e6:	f001 f972 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 80007ea:	2200      	movs	r2, #0
 80007ec:	2120      	movs	r1, #32
 80007ee:	48ba      	ldr	r0, [pc, #744]	; (8000ad8 <display7Seg+0x360>)
 80007f0:	f001 f96d 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_SET ) ;
 80007f4:	2201      	movs	r2, #1
 80007f6:	2140      	movs	r1, #64	; 0x40
 80007f8:	48b7      	ldr	r0, [pc, #732]	; (8000ad8 <display7Seg+0x360>)
 80007fa:	f001 f968 	bl	8001ace <HAL_GPIO_WritePin>
		break;
 80007fe:	e167      	b.n	8000ad0 <display7Seg+0x358>
	case 1:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_SET ) ;
 8000800:	2201      	movs	r2, #1
 8000802:	2101      	movs	r1, #1
 8000804:	48b4      	ldr	r0, [pc, #720]	; (8000ad8 <display7Seg+0x360>)
 8000806:	f001 f962 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 800080a:	2200      	movs	r2, #0
 800080c:	2102      	movs	r1, #2
 800080e:	48b2      	ldr	r0, [pc, #712]	; (8000ad8 <display7Seg+0x360>)
 8000810:	f001 f95d 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000814:	2200      	movs	r2, #0
 8000816:	2104      	movs	r1, #4
 8000818:	48af      	ldr	r0, [pc, #700]	; (8000ad8 <display7Seg+0x360>)
 800081a:	f001 f958 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_SET ) ;
 800081e:	2201      	movs	r2, #1
 8000820:	2108      	movs	r1, #8
 8000822:	48ad      	ldr	r0, [pc, #692]	; (8000ad8 <display7Seg+0x360>)
 8000824:	f001 f953 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000828:	2201      	movs	r2, #1
 800082a:	2110      	movs	r1, #16
 800082c:	48aa      	ldr	r0, [pc, #680]	; (8000ad8 <display7Seg+0x360>)
 800082e:	f001 f94e 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 8000832:	2201      	movs	r2, #1
 8000834:	2120      	movs	r1, #32
 8000836:	48a8      	ldr	r0, [pc, #672]	; (8000ad8 <display7Seg+0x360>)
 8000838:	f001 f949 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_SET ) ;
 800083c:	2201      	movs	r2, #1
 800083e:	2140      	movs	r1, #64	; 0x40
 8000840:	48a5      	ldr	r0, [pc, #660]	; (8000ad8 <display7Seg+0x360>)
 8000842:	f001 f944 	bl	8001ace <HAL_GPIO_WritePin>
		break;
 8000846:	e143      	b.n	8000ad0 <display7Seg+0x358>
	case 2:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000848:	2200      	movs	r2, #0
 800084a:	2101      	movs	r1, #1
 800084c:	48a2      	ldr	r0, [pc, #648]	; (8000ad8 <display7Seg+0x360>)
 800084e:	f001 f93e 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000852:	2200      	movs	r2, #0
 8000854:	2102      	movs	r1, #2
 8000856:	48a0      	ldr	r0, [pc, #640]	; (8000ad8 <display7Seg+0x360>)
 8000858:	f001 f939 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_SET ) ;
 800085c:	2201      	movs	r2, #1
 800085e:	2104      	movs	r1, #4
 8000860:	489d      	ldr	r0, [pc, #628]	; (8000ad8 <display7Seg+0x360>)
 8000862:	f001 f934 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000866:	2200      	movs	r2, #0
 8000868:	2108      	movs	r1, #8
 800086a:	489b      	ldr	r0, [pc, #620]	; (8000ad8 <display7Seg+0x360>)
 800086c:	f001 f92f 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8000870:	2200      	movs	r2, #0
 8000872:	2110      	movs	r1, #16
 8000874:	4898      	ldr	r0, [pc, #608]	; (8000ad8 <display7Seg+0x360>)
 8000876:	f001 f92a 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 800087a:	2201      	movs	r2, #1
 800087c:	2120      	movs	r1, #32
 800087e:	4896      	ldr	r0, [pc, #600]	; (8000ad8 <display7Seg+0x360>)
 8000880:	f001 f925 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000884:	2200      	movs	r2, #0
 8000886:	2140      	movs	r1, #64	; 0x40
 8000888:	4893      	ldr	r0, [pc, #588]	; (8000ad8 <display7Seg+0x360>)
 800088a:	f001 f920 	bl	8001ace <HAL_GPIO_WritePin>
		break;
 800088e:	e11f      	b.n	8000ad0 <display7Seg+0x358>
	case 3:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000890:	2200      	movs	r2, #0
 8000892:	2101      	movs	r1, #1
 8000894:	4890      	ldr	r0, [pc, #576]	; (8000ad8 <display7Seg+0x360>)
 8000896:	f001 f91a 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 800089a:	2200      	movs	r2, #0
 800089c:	2102      	movs	r1, #2
 800089e:	488e      	ldr	r0, [pc, #568]	; (8000ad8 <display7Seg+0x360>)
 80008a0:	f001 f915 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 80008a4:	2200      	movs	r2, #0
 80008a6:	2104      	movs	r1, #4
 80008a8:	488b      	ldr	r0, [pc, #556]	; (8000ad8 <display7Seg+0x360>)
 80008aa:	f001 f910 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 80008ae:	2200      	movs	r2, #0
 80008b0:	2108      	movs	r1, #8
 80008b2:	4889      	ldr	r0, [pc, #548]	; (8000ad8 <display7Seg+0x360>)
 80008b4:	f001 f90b 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 80008b8:	2201      	movs	r2, #1
 80008ba:	2110      	movs	r1, #16
 80008bc:	4886      	ldr	r0, [pc, #536]	; (8000ad8 <display7Seg+0x360>)
 80008be:	f001 f906 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 80008c2:	2201      	movs	r2, #1
 80008c4:	2120      	movs	r1, #32
 80008c6:	4884      	ldr	r0, [pc, #528]	; (8000ad8 <display7Seg+0x360>)
 80008c8:	f001 f901 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 80008cc:	2200      	movs	r2, #0
 80008ce:	2140      	movs	r1, #64	; 0x40
 80008d0:	4881      	ldr	r0, [pc, #516]	; (8000ad8 <display7Seg+0x360>)
 80008d2:	f001 f8fc 	bl	8001ace <HAL_GPIO_WritePin>
		break;
 80008d6:	e0fb      	b.n	8000ad0 <display7Seg+0x358>
	case 4:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_SET ) ;
 80008d8:	2201      	movs	r2, #1
 80008da:	2101      	movs	r1, #1
 80008dc:	487e      	ldr	r0, [pc, #504]	; (8000ad8 <display7Seg+0x360>)
 80008de:	f001 f8f6 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 80008e2:	2200      	movs	r2, #0
 80008e4:	2102      	movs	r1, #2
 80008e6:	487c      	ldr	r0, [pc, #496]	; (8000ad8 <display7Seg+0x360>)
 80008e8:	f001 f8f1 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 80008ec:	2200      	movs	r2, #0
 80008ee:	2104      	movs	r1, #4
 80008f0:	4879      	ldr	r0, [pc, #484]	; (8000ad8 <display7Seg+0x360>)
 80008f2:	f001 f8ec 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_SET ) ;
 80008f6:	2201      	movs	r2, #1
 80008f8:	2108      	movs	r1, #8
 80008fa:	4877      	ldr	r0, [pc, #476]	; (8000ad8 <display7Seg+0x360>)
 80008fc:	f001 f8e7 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000900:	2201      	movs	r2, #1
 8000902:	2110      	movs	r1, #16
 8000904:	4874      	ldr	r0, [pc, #464]	; (8000ad8 <display7Seg+0x360>)
 8000906:	f001 f8e2 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 800090a:	2200      	movs	r2, #0
 800090c:	2120      	movs	r1, #32
 800090e:	4872      	ldr	r0, [pc, #456]	; (8000ad8 <display7Seg+0x360>)
 8000910:	f001 f8dd 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000914:	2200      	movs	r2, #0
 8000916:	2140      	movs	r1, #64	; 0x40
 8000918:	486f      	ldr	r0, [pc, #444]	; (8000ad8 <display7Seg+0x360>)
 800091a:	f001 f8d8 	bl	8001ace <HAL_GPIO_WritePin>
		break;
 800091e:	e0d7      	b.n	8000ad0 <display7Seg+0x358>
	case 5:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000920:	2200      	movs	r2, #0
 8000922:	2101      	movs	r1, #1
 8000924:	486c      	ldr	r0, [pc, #432]	; (8000ad8 <display7Seg+0x360>)
 8000926:	f001 f8d2 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_SET ) ;
 800092a:	2201      	movs	r2, #1
 800092c:	2102      	movs	r1, #2
 800092e:	486a      	ldr	r0, [pc, #424]	; (8000ad8 <display7Seg+0x360>)
 8000930:	f001 f8cd 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000934:	2200      	movs	r2, #0
 8000936:	2104      	movs	r1, #4
 8000938:	4867      	ldr	r0, [pc, #412]	; (8000ad8 <display7Seg+0x360>)
 800093a:	f001 f8c8 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 800093e:	2200      	movs	r2, #0
 8000940:	2108      	movs	r1, #8
 8000942:	4865      	ldr	r0, [pc, #404]	; (8000ad8 <display7Seg+0x360>)
 8000944:	f001 f8c3 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000948:	2201      	movs	r2, #1
 800094a:	2110      	movs	r1, #16
 800094c:	4862      	ldr	r0, [pc, #392]	; (8000ad8 <display7Seg+0x360>)
 800094e:	f001 f8be 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000952:	2200      	movs	r2, #0
 8000954:	2120      	movs	r1, #32
 8000956:	4860      	ldr	r0, [pc, #384]	; (8000ad8 <display7Seg+0x360>)
 8000958:	f001 f8b9 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 800095c:	2200      	movs	r2, #0
 800095e:	2140      	movs	r1, #64	; 0x40
 8000960:	485d      	ldr	r0, [pc, #372]	; (8000ad8 <display7Seg+0x360>)
 8000962:	f001 f8b4 	bl	8001ace <HAL_GPIO_WritePin>
		break;
 8000966:	e0b3      	b.n	8000ad0 <display7Seg+0x358>
	case 6:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000968:	2200      	movs	r2, #0
 800096a:	2101      	movs	r1, #1
 800096c:	485a      	ldr	r0, [pc, #360]	; (8000ad8 <display7Seg+0x360>)
 800096e:	f001 f8ae 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_SET ) ;
 8000972:	2201      	movs	r2, #1
 8000974:	2102      	movs	r1, #2
 8000976:	4858      	ldr	r0, [pc, #352]	; (8000ad8 <display7Seg+0x360>)
 8000978:	f001 f8a9 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 800097c:	2200      	movs	r2, #0
 800097e:	2104      	movs	r1, #4
 8000980:	4855      	ldr	r0, [pc, #340]	; (8000ad8 <display7Seg+0x360>)
 8000982:	f001 f8a4 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000986:	2200      	movs	r2, #0
 8000988:	2108      	movs	r1, #8
 800098a:	4853      	ldr	r0, [pc, #332]	; (8000ad8 <display7Seg+0x360>)
 800098c:	f001 f89f 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8000990:	2200      	movs	r2, #0
 8000992:	2110      	movs	r1, #16
 8000994:	4850      	ldr	r0, [pc, #320]	; (8000ad8 <display7Seg+0x360>)
 8000996:	f001 f89a 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 800099a:	2200      	movs	r2, #0
 800099c:	2120      	movs	r1, #32
 800099e:	484e      	ldr	r0, [pc, #312]	; (8000ad8 <display7Seg+0x360>)
 80009a0:	f001 f895 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 80009a4:	2200      	movs	r2, #0
 80009a6:	2140      	movs	r1, #64	; 0x40
 80009a8:	484b      	ldr	r0, [pc, #300]	; (8000ad8 <display7Seg+0x360>)
 80009aa:	f001 f890 	bl	8001ace <HAL_GPIO_WritePin>
		break;
 80009ae:	e08f      	b.n	8000ad0 <display7Seg+0x358>
	case 7:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 80009b0:	2200      	movs	r2, #0
 80009b2:	2101      	movs	r1, #1
 80009b4:	4848      	ldr	r0, [pc, #288]	; (8000ad8 <display7Seg+0x360>)
 80009b6:	f001 f88a 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 80009ba:	2200      	movs	r2, #0
 80009bc:	2102      	movs	r1, #2
 80009be:	4846      	ldr	r0, [pc, #280]	; (8000ad8 <display7Seg+0x360>)
 80009c0:	f001 f885 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 80009c4:	2200      	movs	r2, #0
 80009c6:	2104      	movs	r1, #4
 80009c8:	4843      	ldr	r0, [pc, #268]	; (8000ad8 <display7Seg+0x360>)
 80009ca:	f001 f880 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_SET ) ;
 80009ce:	2201      	movs	r2, #1
 80009d0:	2108      	movs	r1, #8
 80009d2:	4841      	ldr	r0, [pc, #260]	; (8000ad8 <display7Seg+0x360>)
 80009d4:	f001 f87b 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 80009d8:	2201      	movs	r2, #1
 80009da:	2110      	movs	r1, #16
 80009dc:	483e      	ldr	r0, [pc, #248]	; (8000ad8 <display7Seg+0x360>)
 80009de:	f001 f876 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 80009e2:	2201      	movs	r2, #1
 80009e4:	2120      	movs	r1, #32
 80009e6:	483c      	ldr	r0, [pc, #240]	; (8000ad8 <display7Seg+0x360>)
 80009e8:	f001 f871 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_SET ) ;
 80009ec:	2201      	movs	r2, #1
 80009ee:	2140      	movs	r1, #64	; 0x40
 80009f0:	4839      	ldr	r0, [pc, #228]	; (8000ad8 <display7Seg+0x360>)
 80009f2:	f001 f86c 	bl	8001ace <HAL_GPIO_WritePin>
		break;
 80009f6:	e06b      	b.n	8000ad0 <display7Seg+0x358>
	case 8:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 80009f8:	2200      	movs	r2, #0
 80009fa:	2101      	movs	r1, #1
 80009fc:	4836      	ldr	r0, [pc, #216]	; (8000ad8 <display7Seg+0x360>)
 80009fe:	f001 f866 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000a02:	2200      	movs	r2, #0
 8000a04:	2102      	movs	r1, #2
 8000a06:	4834      	ldr	r0, [pc, #208]	; (8000ad8 <display7Seg+0x360>)
 8000a08:	f001 f861 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2104      	movs	r1, #4
 8000a10:	4831      	ldr	r0, [pc, #196]	; (8000ad8 <display7Seg+0x360>)
 8000a12:	f001 f85c 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000a16:	2200      	movs	r2, #0
 8000a18:	2108      	movs	r1, #8
 8000a1a:	482f      	ldr	r0, [pc, #188]	; (8000ad8 <display7Seg+0x360>)
 8000a1c:	f001 f857 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8000a20:	2200      	movs	r2, #0
 8000a22:	2110      	movs	r1, #16
 8000a24:	482c      	ldr	r0, [pc, #176]	; (8000ad8 <display7Seg+0x360>)
 8000a26:	f001 f852 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2120      	movs	r1, #32
 8000a2e:	482a      	ldr	r0, [pc, #168]	; (8000ad8 <display7Seg+0x360>)
 8000a30:	f001 f84d 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000a34:	2200      	movs	r2, #0
 8000a36:	2140      	movs	r1, #64	; 0x40
 8000a38:	4827      	ldr	r0, [pc, #156]	; (8000ad8 <display7Seg+0x360>)
 8000a3a:	f001 f848 	bl	8001ace <HAL_GPIO_WritePin>
		break;
 8000a3e:	e047      	b.n	8000ad0 <display7Seg+0x358>
	case 9:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000a40:	2200      	movs	r2, #0
 8000a42:	2101      	movs	r1, #1
 8000a44:	4824      	ldr	r0, [pc, #144]	; (8000ad8 <display7Seg+0x360>)
 8000a46:	f001 f842 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2102      	movs	r1, #2
 8000a4e:	4822      	ldr	r0, [pc, #136]	; (8000ad8 <display7Seg+0x360>)
 8000a50:	f001 f83d 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000a54:	2200      	movs	r2, #0
 8000a56:	2104      	movs	r1, #4
 8000a58:	481f      	ldr	r0, [pc, #124]	; (8000ad8 <display7Seg+0x360>)
 8000a5a:	f001 f838 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2108      	movs	r1, #8
 8000a62:	481d      	ldr	r0, [pc, #116]	; (8000ad8 <display7Seg+0x360>)
 8000a64:	f001 f833 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2110      	movs	r1, #16
 8000a6c:	481a      	ldr	r0, [pc, #104]	; (8000ad8 <display7Seg+0x360>)
 8000a6e:	f001 f82e 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000a72:	2200      	movs	r2, #0
 8000a74:	2120      	movs	r1, #32
 8000a76:	4818      	ldr	r0, [pc, #96]	; (8000ad8 <display7Seg+0x360>)
 8000a78:	f001 f829 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2140      	movs	r1, #64	; 0x40
 8000a80:	4815      	ldr	r0, [pc, #84]	; (8000ad8 <display7Seg+0x360>)
 8000a82:	f001 f824 	bl	8001ace <HAL_GPIO_WritePin>
		break;
 8000a86:	e023      	b.n	8000ad0 <display7Seg+0x358>
	default:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	4812      	ldr	r0, [pc, #72]	; (8000ad8 <display7Seg+0x360>)
 8000a8e:	f001 f81e 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000a92:	2200      	movs	r2, #0
 8000a94:	2102      	movs	r1, #2
 8000a96:	4810      	ldr	r0, [pc, #64]	; (8000ad8 <display7Seg+0x360>)
 8000a98:	f001 f819 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2104      	movs	r1, #4
 8000aa0:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <display7Seg+0x360>)
 8000aa2:	f001 f814 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2108      	movs	r1, #8
 8000aaa:	480b      	ldr	r0, [pc, #44]	; (8000ad8 <display7Seg+0x360>)
 8000aac:	f001 f80f 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2110      	movs	r1, #16
 8000ab4:	4808      	ldr	r0, [pc, #32]	; (8000ad8 <display7Seg+0x360>)
 8000ab6:	f001 f80a 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000aba:	2200      	movs	r2, #0
 8000abc:	2120      	movs	r1, #32
 8000abe:	4806      	ldr	r0, [pc, #24]	; (8000ad8 <display7Seg+0x360>)
 8000ac0:	f001 f805 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2140      	movs	r1, #64	; 0x40
 8000ac8:	4803      	ldr	r0, [pc, #12]	; (8000ad8 <display7Seg+0x360>)
 8000aca:	f001 f800 	bl	8001ace <HAL_GPIO_WritePin>

	}
}
 8000ace:	bf00      	nop
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40010c00 	.word	0x40010c00

08000adc <Seg7Scan>:


#include "fsm.h"

int numOfLed = 0;
void Seg7Scan(){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	if(timer1_flag == 1){
 8000ae0:	4b31      	ldr	r3, [pc, #196]	; (8000ba8 <Seg7Scan+0xcc>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d15c      	bne.n	8000ba2 <Seg7Scan+0xc6>
			  if(numOfLed == 0){
 8000ae8:	4b30      	ldr	r3, [pc, #192]	; (8000bac <Seg7Scan+0xd0>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d109      	bne.n	8000b04 <Seg7Scan+0x28>
					setTimer1 (140);
 8000af0:	208c      	movs	r0, #140	; 0x8c
 8000af2:	f000 fbef 	bl	80012d4 <setTimer1>
					update7SEG(1);
 8000af6:	2001      	movs	r0, #1
 8000af8:	f7ff fcde 	bl	80004b8 <update7SEG>
					numOfLed = 1;
 8000afc:	4b2b      	ldr	r3, [pc, #172]	; (8000bac <Seg7Scan+0xd0>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	601a      	str	r2, [r3, #0]
					setTimer1 (140);
					update7SEG(0);
					numOfLed = 0;
			  }
	}
}
 8000b02:	e04e      	b.n	8000ba2 <Seg7Scan+0xc6>
			  else if(numOfLed == 1){
 8000b04:	4b29      	ldr	r3, [pc, #164]	; (8000bac <Seg7Scan+0xd0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d109      	bne.n	8000b20 <Seg7Scan+0x44>
					setTimer1 (140);
 8000b0c:	208c      	movs	r0, #140	; 0x8c
 8000b0e:	f000 fbe1 	bl	80012d4 <setTimer1>
					update7SEG(2);
 8000b12:	2002      	movs	r0, #2
 8000b14:	f7ff fcd0 	bl	80004b8 <update7SEG>
					numOfLed = 2;
 8000b18:	4b24      	ldr	r3, [pc, #144]	; (8000bac <Seg7Scan+0xd0>)
 8000b1a:	2202      	movs	r2, #2
 8000b1c:	601a      	str	r2, [r3, #0]
}
 8000b1e:	e040      	b.n	8000ba2 <Seg7Scan+0xc6>
			  else if(numOfLed == 2){
 8000b20:	4b22      	ldr	r3, [pc, #136]	; (8000bac <Seg7Scan+0xd0>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	d109      	bne.n	8000b3c <Seg7Scan+0x60>
					setTimer1 (140);
 8000b28:	208c      	movs	r0, #140	; 0x8c
 8000b2a:	f000 fbd3 	bl	80012d4 <setTimer1>
					update7SEG(3);
 8000b2e:	2003      	movs	r0, #3
 8000b30:	f7ff fcc2 	bl	80004b8 <update7SEG>
					numOfLed = 3;
 8000b34:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <Seg7Scan+0xd0>)
 8000b36:	2203      	movs	r2, #3
 8000b38:	601a      	str	r2, [r3, #0]
}
 8000b3a:	e032      	b.n	8000ba2 <Seg7Scan+0xc6>
			  else if(numOfLed == 3){
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <Seg7Scan+0xd0>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b03      	cmp	r3, #3
 8000b42:	d109      	bne.n	8000b58 <Seg7Scan+0x7c>
					setTimer1 (140);
 8000b44:	208c      	movs	r0, #140	; 0x8c
 8000b46:	f000 fbc5 	bl	80012d4 <setTimer1>
					update7SEG(4);
 8000b4a:	2004      	movs	r0, #4
 8000b4c:	f7ff fcb4 	bl	80004b8 <update7SEG>
					numOfLed = 4;
 8000b50:	4b16      	ldr	r3, [pc, #88]	; (8000bac <Seg7Scan+0xd0>)
 8000b52:	2204      	movs	r2, #4
 8000b54:	601a      	str	r2, [r3, #0]
}
 8000b56:	e024      	b.n	8000ba2 <Seg7Scan+0xc6>
			  else if(numOfLed == 4){
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <Seg7Scan+0xd0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b04      	cmp	r3, #4
 8000b5e:	d109      	bne.n	8000b74 <Seg7Scan+0x98>
					setTimer1 (140);
 8000b60:	208c      	movs	r0, #140	; 0x8c
 8000b62:	f000 fbb7 	bl	80012d4 <setTimer1>
					update7SEG(5);
 8000b66:	2005      	movs	r0, #5
 8000b68:	f7ff fca6 	bl	80004b8 <update7SEG>
					numOfLed = 5;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <Seg7Scan+0xd0>)
 8000b6e:	2205      	movs	r2, #5
 8000b70:	601a      	str	r2, [r3, #0]
}
 8000b72:	e016      	b.n	8000ba2 <Seg7Scan+0xc6>
			  else if(numOfLed == 5){
 8000b74:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <Seg7Scan+0xd0>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b05      	cmp	r3, #5
 8000b7a:	d109      	bne.n	8000b90 <Seg7Scan+0xb4>
					setTimer1 (140);
 8000b7c:	208c      	movs	r0, #140	; 0x8c
 8000b7e:	f000 fba9 	bl	80012d4 <setTimer1>
					update7SEG(6);
 8000b82:	2006      	movs	r0, #6
 8000b84:	f7ff fc98 	bl	80004b8 <update7SEG>
					numOfLed = 6;
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <Seg7Scan+0xd0>)
 8000b8a:	2206      	movs	r2, #6
 8000b8c:	601a      	str	r2, [r3, #0]
}
 8000b8e:	e008      	b.n	8000ba2 <Seg7Scan+0xc6>
					setTimer1 (140);
 8000b90:	208c      	movs	r0, #140	; 0x8c
 8000b92:	f000 fb9f 	bl	80012d4 <setTimer1>
					update7SEG(0);
 8000b96:	2000      	movs	r0, #0
 8000b98:	f7ff fc8e 	bl	80004b8 <update7SEG>
					numOfLed = 0;
 8000b9c:	4b03      	ldr	r3, [pc, #12]	; (8000bac <Seg7Scan+0xd0>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200000c4 	.word	0x200000c4
 8000bac:	20000094 	.word	0x20000094

08000bb0 <fsm_automatic_run>:



//automatic mode
void fsm_automatic_run(){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	switch(state){
 8000bb4:	4b6f      	ldr	r3, [pc, #444]	; (8000d74 <fsm_automatic_run+0x1c4>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	f040 80d6 	bne.w	8000d6a <fsm_automatic_run+0x1ba>
	case NOR:
		ModeValue = 1;
 8000bbe:	4b6e      	ldr	r3, [pc, #440]	; (8000d78 <fsm_automatic_run+0x1c8>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	601a      	str	r2, [r3, #0]
		updateClockBuffer();
 8000bc4:	f7ff fbc6 	bl	8000354 <updateClockBuffer>
		if(timer0_flag == 1){
 8000bc8:	4b6c      	ldr	r3, [pc, #432]	; (8000d7c <fsm_automatic_run+0x1cc>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	f040 80b9 	bne.w	8000d44 <fsm_automatic_run+0x194>
			counter++;
 8000bd2:	4b6b      	ldr	r3, [pc, #428]	; (8000d80 <fsm_automatic_run+0x1d0>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	4a69      	ldr	r2, [pc, #420]	; (8000d80 <fsm_automatic_run+0x1d0>)
 8000bda:	6013      	str	r3, [r2, #0]
		    if(counter <= 5){
 8000bdc:	4b68      	ldr	r3, [pc, #416]	; (8000d80 <fsm_automatic_run+0x1d0>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b05      	cmp	r3, #5
 8000be2:	dc4d      	bgt.n	8000c80 <fsm_automatic_run+0xd0>
		    	Horizontal_TrafficLight = 5-counter;
 8000be4:	4b66      	ldr	r3, [pc, #408]	; (8000d80 <fsm_automatic_run+0x1d0>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f1c3 0305 	rsb	r3, r3, #5
 8000bec:	4a65      	ldr	r2, [pc, #404]	; (8000d84 <fsm_automatic_run+0x1d4>)
 8000bee:	6013      	str	r3, [r2, #0]
	   		    //display7SEG(5-counter);
			    HAL_GPIO_WritePin ( RED_GPIO_Port , RED_Pin , GPIO_PIN_SET ) ;
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bf6:	4864      	ldr	r0, [pc, #400]	; (8000d88 <fsm_automatic_run+0x1d8>)
 8000bf8:	f000 ff69 	bl	8001ace <HAL_GPIO_WritePin>
	    	    HAL_GPIO_WritePin ( YELLOW_GPIO_Port , YELLOW_Pin , GPIO_PIN_RESET ) ;
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c02:	4861      	ldr	r0, [pc, #388]	; (8000d88 <fsm_automatic_run+0x1d8>)
 8000c04:	f000 ff63 	bl	8001ace <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin ( GREEN_GPIO_Port , GREEN_Pin , GPIO_PIN_RESET ) ;
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c0e:	485e      	ldr	r0, [pc, #376]	; (8000d88 <fsm_automatic_run+0x1d8>)
 8000c10:	f000 ff5d 	bl	8001ace <HAL_GPIO_WritePin>
			    if(counter <= 2){
 8000c14:	4b5a      	ldr	r3, [pc, #360]	; (8000d80 <fsm_automatic_run+0x1d0>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	dc18      	bgt.n	8000c4e <fsm_automatic_run+0x9e>
			    	Vertial_TrafficLight = 2 - counter;
 8000c1c:	4b58      	ldr	r3, [pc, #352]	; (8000d80 <fsm_automatic_run+0x1d0>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f1c3 0302 	rsb	r3, r3, #2
 8000c24:	4a59      	ldr	r2, [pc, #356]	; (8000d8c <fsm_automatic_run+0x1dc>)
 8000c26:	6013      	str	r3, [r2, #0]
    			    //display7SEG_1(2-counter);
				    HAL_GPIO_WritePin ( RED_1_GPIO_Port , RED_1_Pin , GPIO_PIN_RESET ) ;
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c2e:	4856      	ldr	r0, [pc, #344]	; (8000d88 <fsm_automatic_run+0x1d8>)
 8000c30:	f000 ff4d 	bl	8001ace <HAL_GPIO_WritePin>
				    HAL_GPIO_WritePin ( YELLOW_1_GPIO_Port , YELLOW_1_Pin , GPIO_PIN_SET ) ;
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c3a:	4853      	ldr	r0, [pc, #332]	; (8000d88 <fsm_automatic_run+0x1d8>)
 8000c3c:	f000 ff47 	bl	8001ace <HAL_GPIO_WritePin>
				    HAL_GPIO_WritePin ( GREEN_1_GPIO_Port , GREEN_1_Pin , GPIO_PIN_RESET ) ;
 8000c40:	2200      	movs	r2, #0
 8000c42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c46:	4850      	ldr	r0, [pc, #320]	; (8000d88 <fsm_automatic_run+0x1d8>)
 8000c48:	f000 ff41 	bl	8001ace <HAL_GPIO_WritePin>
 8000c4c:	e06f      	b.n	8000d2e <fsm_automatic_run+0x17e>
				}
				else{
					Vertial_TrafficLight = 5 - counter;
 8000c4e:	4b4c      	ldr	r3, [pc, #304]	; (8000d80 <fsm_automatic_run+0x1d0>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f1c3 0305 	rsb	r3, r3, #5
 8000c56:	4a4d      	ldr	r2, [pc, #308]	; (8000d8c <fsm_automatic_run+0x1dc>)
 8000c58:	6013      	str	r3, [r2, #0]
					//display7SEG_1(5-counter);
					HAL_GPIO_WritePin ( RED_1_GPIO_Port , RED_1_Pin , GPIO_PIN_RESET ) ;
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c60:	4849      	ldr	r0, [pc, #292]	; (8000d88 <fsm_automatic_run+0x1d8>)
 8000c62:	f000 ff34 	bl	8001ace <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin ( YELLOW_1_GPIO_Port , YELLOW_1_Pin , GPIO_PIN_RESET ) ;
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c6c:	4846      	ldr	r0, [pc, #280]	; (8000d88 <fsm_automatic_run+0x1d8>)
 8000c6e:	f000 ff2e 	bl	8001ace <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin ( GREEN_1_GPIO_Port , GREEN_1_Pin , GPIO_PIN_SET ) ;
 8000c72:	2201      	movs	r2, #1
 8000c74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c78:	4843      	ldr	r0, [pc, #268]	; (8000d88 <fsm_automatic_run+0x1d8>)
 8000c7a:	f000 ff28 	bl	8001ace <HAL_GPIO_WritePin>
 8000c7e:	e056      	b.n	8000d2e <fsm_automatic_run+0x17e>
				}
		    }
		    else if(counter <= 7){
 8000c80:	4b3f      	ldr	r3, [pc, #252]	; (8000d80 <fsm_automatic_run+0x1d0>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b07      	cmp	r3, #7
 8000c86:	dc30      	bgt.n	8000cea <fsm_automatic_run+0x13a>
				Horizontal_TrafficLight = 7 - counter;
 8000c88:	4b3d      	ldr	r3, [pc, #244]	; (8000d80 <fsm_automatic_run+0x1d0>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f1c3 0307 	rsb	r3, r3, #7
 8000c90:	4a3c      	ldr	r2, [pc, #240]	; (8000d84 <fsm_automatic_run+0x1d4>)
 8000c92:	6013      	str	r3, [r2, #0]
		    	//display7SEG(7-counter);
				HAL_GPIO_WritePin ( RED_GPIO_Port , RED_Pin , GPIO_PIN_RESET ) ;
 8000c94:	2200      	movs	r2, #0
 8000c96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c9a:	483b      	ldr	r0, [pc, #236]	; (8000d88 <fsm_automatic_run+0x1d8>)
 8000c9c:	f000 ff17 	bl	8001ace <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( YELLOW_GPIO_Port , YELLOW_Pin , GPIO_PIN_SET ) ;
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ca6:	4838      	ldr	r0, [pc, #224]	; (8000d88 <fsm_automatic_run+0x1d8>)
 8000ca8:	f000 ff11 	bl	8001ace <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( GREEN_GPIO_Port , GREEN_Pin , GPIO_PIN_RESET ) ;
 8000cac:	2200      	movs	r2, #0
 8000cae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cb2:	4835      	ldr	r0, [pc, #212]	; (8000d88 <fsm_automatic_run+0x1d8>)
 8000cb4:	f000 ff0b 	bl	8001ace <HAL_GPIO_WritePin>

				Vertial_TrafficLight = 10 - counter;
 8000cb8:	4b31      	ldr	r3, [pc, #196]	; (8000d80 <fsm_automatic_run+0x1d0>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f1c3 030a 	rsb	r3, r3, #10
 8000cc0:	4a32      	ldr	r2, [pc, #200]	; (8000d8c <fsm_automatic_run+0x1dc>)
 8000cc2:	6013      	str	r3, [r2, #0]
				//display7SEG_1(10-counter);
				HAL_GPIO_WritePin ( RED_1_GPIO_Port , RED_1_Pin , GPIO_PIN_SET ) ;
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cca:	482f      	ldr	r0, [pc, #188]	; (8000d88 <fsm_automatic_run+0x1d8>)
 8000ccc:	f000 feff 	bl	8001ace <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( YELLOW_1_GPIO_Port , YELLOW_1_Pin , GPIO_PIN_RESET ) ;
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cd6:	482c      	ldr	r0, [pc, #176]	; (8000d88 <fsm_automatic_run+0x1d8>)
 8000cd8:	f000 fef9 	bl	8001ace <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin ( GREEN_1_GPIO_Port , GREEN_1_Pin , GPIO_PIN_RESET ) ;
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ce2:	4829      	ldr	r0, [pc, #164]	; (8000d88 <fsm_automatic_run+0x1d8>)
 8000ce4:	f000 fef3 	bl	8001ace <HAL_GPIO_WritePin>
 8000ce8:	e021      	b.n	8000d2e <fsm_automatic_run+0x17e>
		    }
		    else if(counter <= 10){
 8000cea:	4b25      	ldr	r3, [pc, #148]	; (8000d80 <fsm_automatic_run+0x1d0>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b0a      	cmp	r3, #10
 8000cf0:	dc1d      	bgt.n	8000d2e <fsm_automatic_run+0x17e>
				Horizontal_TrafficLight = 10 - counter;
 8000cf2:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <fsm_automatic_run+0x1d0>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f1c3 030a 	rsb	r3, r3, #10
 8000cfa:	4a22      	ldr	r2, [pc, #136]	; (8000d84 <fsm_automatic_run+0x1d4>)
 8000cfc:	6013      	str	r3, [r2, #0]
		    	//display7SEG(10-counter);
			    HAL_GPIO_WritePin ( RED_GPIO_Port , RED_Pin , GPIO_PIN_RESET ) ;
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d04:	4820      	ldr	r0, [pc, #128]	; (8000d88 <fsm_automatic_run+0x1d8>)
 8000d06:	f000 fee2 	bl	8001ace <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin ( YELLOW_GPIO_Port , YELLOW_Pin , GPIO_PIN_RESET ) ;
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d10:	481d      	ldr	r0, [pc, #116]	; (8000d88 <fsm_automatic_run+0x1d8>)
 8000d12:	f000 fedc 	bl	8001ace <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( GREEN_GPIO_Port , GREEN_Pin , GPIO_PIN_SET ) ;
 8000d16:	2201      	movs	r2, #1
 8000d18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d1c:	481a      	ldr	r0, [pc, #104]	; (8000d88 <fsm_automatic_run+0x1d8>)
 8000d1e:	f000 fed6 	bl	8001ace <HAL_GPIO_WritePin>
				Vertial_TrafficLight = 10 - counter;
 8000d22:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <fsm_automatic_run+0x1d0>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f1c3 030a 	rsb	r3, r3, #10
 8000d2a:	4a18      	ldr	r2, [pc, #96]	; (8000d8c <fsm_automatic_run+0x1dc>)
 8000d2c:	6013      	str	r3, [r2, #0]
				//display7SEG_1(10-count);
			}
			if(counter >= 10) counter = 0;
 8000d2e:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <fsm_automatic_run+0x1d0>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2b09      	cmp	r3, #9
 8000d34:	dd02      	ble.n	8000d3c <fsm_automatic_run+0x18c>
 8000d36:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <fsm_automatic_run+0x1d0>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
			setTimer0(1000);
 8000d3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d40:	f000 faae 	bl	80012a0 <setTimer0>
		}
		if(isButton1Pressed() == 1){
 8000d44:	f7ff fa02 	bl	800014c <isButton1Pressed>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d10f      	bne.n	8000d6e <fsm_automatic_run+0x1be>
			setTimer0(1000);
 8000d4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d52:	f000 faa5 	bl	80012a0 <setTimer0>
			counter = 0;
 8000d56:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <fsm_automatic_run+0x1d0>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
			Set_time = 5;
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <fsm_automatic_run+0x1e0>)
 8000d5e:	2205      	movs	r2, #5
 8000d60:	601a      	str	r2, [r3, #0]
		    state = RED_M;
 8000d62:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <fsm_automatic_run+0x1c4>)
 8000d64:	2202      	movs	r2, #2
 8000d66:	601a      	str	r2, [r3, #0]
		}
		break;
 8000d68:	e001      	b.n	8000d6e <fsm_automatic_run+0x1be>
	default:
		break;
 8000d6a:	bf00      	nop
 8000d6c:	e000      	b.n	8000d70 <fsm_automatic_run+0x1c0>
		break;
 8000d6e:	bf00      	nop
	}
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	2000009c 	.word	0x2000009c
 8000d78:	200000a8 	.word	0x200000a8
 8000d7c:	200000bc 	.word	0x200000bc
 8000d80:	20000098 	.word	0x20000098
 8000d84:	200000a0 	.word	0x200000a0
 8000d88:	40010800 	.word	0x40010800
 8000d8c:	200000a4 	.word	0x200000a4
 8000d90:	200000b4 	.word	0x200000b4

08000d94 <fsm_simple_buttons_run>:
// manual mode

void fsm_simple_buttons_run(){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	switch(state){
 8000d98:	4ba9      	ldr	r3, [pc, #676]	; (8001040 <fsm_simple_buttons_run+0x2ac>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b04      	cmp	r3, #4
 8000d9e:	f200 8145 	bhi.w	800102c <fsm_simple_buttons_run+0x298>
 8000da2:	a201      	add	r2, pc, #4	; (adr r2, 8000da8 <fsm_simple_buttons_run+0x14>)
 8000da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da8:	08000dbd 	.word	0x08000dbd
 8000dac:	0800102d 	.word	0x0800102d
 8000db0:	08000dcb 	.word	0x08000dcb
 8000db4:	08000ff5 	.word	0x08000ff5
 8000db8:	08001011 	.word	0x08001011
	case INIT:
		counter = 0;
 8000dbc:	4ba1      	ldr	r3, [pc, #644]	; (8001044 <fsm_simple_buttons_run+0x2b0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
		state = NOR;
 8000dc2:	4b9f      	ldr	r3, [pc, #636]	; (8001040 <fsm_simple_buttons_run+0x2ac>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	601a      	str	r2, [r3, #0]
		break;
 8000dc8:	e137      	b.n	800103a <fsm_simple_buttons_run+0x2a6>
	case RED_M:
		ModeValue = 2;
 8000dca:	4b9f      	ldr	r3, [pc, #636]	; (8001048 <fsm_simple_buttons_run+0x2b4>)
 8000dcc:	2202      	movs	r2, #2
 8000dce:	601a      	str	r2, [r3, #0]
		updateClockBuffer();
 8000dd0:	f7ff fac0 	bl	8000354 <updateClockBuffer>
		if(isButton2Pressed() == 1){
 8000dd4:	f7ff f9cc 	bl	8000170 <isButton2Pressed>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d10b      	bne.n	8000df6 <fsm_simple_buttons_run+0x62>
			RED_Time_value++;
 8000dde:	4b9b      	ldr	r3, [pc, #620]	; (800104c <fsm_simple_buttons_run+0x2b8>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	3301      	adds	r3, #1
 8000de4:	4a99      	ldr	r2, [pc, #612]	; (800104c <fsm_simple_buttons_run+0x2b8>)
 8000de6:	6013      	str	r3, [r2, #0]
			if(RED_Time_value >= 100) RED_Time_value = 0;
 8000de8:	4b98      	ldr	r3, [pc, #608]	; (800104c <fsm_simple_buttons_run+0x2b8>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b63      	cmp	r3, #99	; 0x63
 8000dee:	dd02      	ble.n	8000df6 <fsm_simple_buttons_run+0x62>
 8000df0:	4b96      	ldr	r3, [pc, #600]	; (800104c <fsm_simple_buttons_run+0x2b8>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
		}
		if(isButton3Pressed() == 1){
 8000df6:	f7ff f9cd 	bl	8000194 <isButton3Pressed>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d106      	bne.n	8000e0e <fsm_simple_buttons_run+0x7a>
			Set_time = RED_Time_value;
 8000e00:	4b92      	ldr	r3, [pc, #584]	; (800104c <fsm_simple_buttons_run+0x2b8>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a92      	ldr	r2, [pc, #584]	; (8001050 <fsm_simple_buttons_run+0x2bc>)
 8000e06:	6013      	str	r3, [r2, #0]
			counter = 0;
 8000e08:	4b8e      	ldr	r3, [pc, #568]	; (8001044 <fsm_simple_buttons_run+0x2b0>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
		}
		if(timer0_flag == 1){
 8000e0e:	4b91      	ldr	r3, [pc, #580]	; (8001054 <fsm_simple_buttons_run+0x2c0>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	f040 80e5 	bne.w	8000fe2 <fsm_simple_buttons_run+0x24e>
			counter++;
 8000e18:	4b8a      	ldr	r3, [pc, #552]	; (8001044 <fsm_simple_buttons_run+0x2b0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	4a89      	ldr	r2, [pc, #548]	; (8001044 <fsm_simple_buttons_run+0x2b0>)
 8000e20:	6013      	str	r3, [r2, #0]
		    if(counter <= Set_time){
 8000e22:	4b88      	ldr	r3, [pc, #544]	; (8001044 <fsm_simple_buttons_run+0x2b0>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	4b8a      	ldr	r3, [pc, #552]	; (8001050 <fsm_simple_buttons_run+0x2bc>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	dc5c      	bgt.n	8000ee8 <fsm_simple_buttons_run+0x154>
		    	Horizontal_TrafficLight = Set_time-counter;
 8000e2e:	4b88      	ldr	r3, [pc, #544]	; (8001050 <fsm_simple_buttons_run+0x2bc>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	4b84      	ldr	r3, [pc, #528]	; (8001044 <fsm_simple_buttons_run+0x2b0>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	4a87      	ldr	r2, [pc, #540]	; (8001058 <fsm_simple_buttons_run+0x2c4>)
 8000e3a:	6013      	str	r3, [r2, #0]
	   		    //display7SEG(5-counter);
			    HAL_GPIO_WritePin ( RED_GPIO_Port , RED_Pin , GPIO_PIN_SET ) ;
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e42:	4886      	ldr	r0, [pc, #536]	; (800105c <fsm_simple_buttons_run+0x2c8>)
 8000e44:	f000 fe43 	bl	8001ace <HAL_GPIO_WritePin>
	    	    HAL_GPIO_WritePin ( YELLOW_GPIO_Port , YELLOW_Pin , GPIO_PIN_RESET ) ;
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e4e:	4883      	ldr	r0, [pc, #524]	; (800105c <fsm_simple_buttons_run+0x2c8>)
 8000e50:	f000 fe3d 	bl	8001ace <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin ( GREEN_GPIO_Port , GREEN_Pin , GPIO_PIN_RESET ) ;
 8000e54:	2200      	movs	r2, #0
 8000e56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e5a:	4880      	ldr	r0, [pc, #512]	; (800105c <fsm_simple_buttons_run+0x2c8>)
 8000e5c:	f000 fe37 	bl	8001ace <HAL_GPIO_WritePin>
			    if(counter <= Set_time/3){
 8000e60:	4b7b      	ldr	r3, [pc, #492]	; (8001050 <fsm_simple_buttons_run+0x2bc>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a7e      	ldr	r2, [pc, #504]	; (8001060 <fsm_simple_buttons_run+0x2cc>)
 8000e66:	fb82 1203 	smull	r1, r2, r2, r3
 8000e6a:	17db      	asrs	r3, r3, #31
 8000e6c:	1ad2      	subs	r2, r2, r3
 8000e6e:	4b75      	ldr	r3, [pc, #468]	; (8001044 <fsm_simple_buttons_run+0x2b0>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	db1e      	blt.n	8000eb4 <fsm_simple_buttons_run+0x120>
			    	Vertial_TrafficLight = Set_time/3 - counter;
 8000e76:	4b76      	ldr	r3, [pc, #472]	; (8001050 <fsm_simple_buttons_run+0x2bc>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a79      	ldr	r2, [pc, #484]	; (8001060 <fsm_simple_buttons_run+0x2cc>)
 8000e7c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e80:	17db      	asrs	r3, r3, #31
 8000e82:	1ad2      	subs	r2, r2, r3
 8000e84:	4b6f      	ldr	r3, [pc, #444]	; (8001044 <fsm_simple_buttons_run+0x2b0>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	4a76      	ldr	r2, [pc, #472]	; (8001064 <fsm_simple_buttons_run+0x2d0>)
 8000e8c:	6013      	str	r3, [r2, #0]
    			    //display7SEG_1(2-counter);
				    HAL_GPIO_WritePin ( RED_1_GPIO_Port , RED_1_Pin , GPIO_PIN_RESET ) ;
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e94:	4871      	ldr	r0, [pc, #452]	; (800105c <fsm_simple_buttons_run+0x2c8>)
 8000e96:	f000 fe1a 	bl	8001ace <HAL_GPIO_WritePin>
				    HAL_GPIO_WritePin ( YELLOW_1_GPIO_Port , YELLOW_1_Pin , GPIO_PIN_SET ) ;
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ea0:	486e      	ldr	r0, [pc, #440]	; (800105c <fsm_simple_buttons_run+0x2c8>)
 8000ea2:	f000 fe14 	bl	8001ace <HAL_GPIO_WritePin>
				    HAL_GPIO_WritePin ( GREEN_1_GPIO_Port , GREEN_1_Pin , GPIO_PIN_RESET ) ;
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eac:	486b      	ldr	r0, [pc, #428]	; (800105c <fsm_simple_buttons_run+0x2c8>)
 8000eae:	f000 fe0e 	bl	8001ace <HAL_GPIO_WritePin>
 8000eb2:	e088      	b.n	8000fc6 <fsm_simple_buttons_run+0x232>
				}
				else{
					Vertial_TrafficLight = Set_time - counter;
 8000eb4:	4b66      	ldr	r3, [pc, #408]	; (8001050 <fsm_simple_buttons_run+0x2bc>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b62      	ldr	r3, [pc, #392]	; (8001044 <fsm_simple_buttons_run+0x2b0>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	4a69      	ldr	r2, [pc, #420]	; (8001064 <fsm_simple_buttons_run+0x2d0>)
 8000ec0:	6013      	str	r3, [r2, #0]
					//display7SEG_1(5-counter);
					HAL_GPIO_WritePin ( RED_1_GPIO_Port , RED_1_Pin , GPIO_PIN_RESET ) ;
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ec8:	4864      	ldr	r0, [pc, #400]	; (800105c <fsm_simple_buttons_run+0x2c8>)
 8000eca:	f000 fe00 	bl	8001ace <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin ( YELLOW_1_GPIO_Port , YELLOW_1_Pin , GPIO_PIN_RESET ) ;
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ed4:	4861      	ldr	r0, [pc, #388]	; (800105c <fsm_simple_buttons_run+0x2c8>)
 8000ed6:	f000 fdfa 	bl	8001ace <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin ( GREEN_1_GPIO_Port , GREEN_1_Pin , GPIO_PIN_SET ) ;
 8000eda:	2201      	movs	r2, #1
 8000edc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ee0:	485e      	ldr	r0, [pc, #376]	; (800105c <fsm_simple_buttons_run+0x2c8>)
 8000ee2:	f000 fdf4 	bl	8001ace <HAL_GPIO_WritePin>
 8000ee6:	e06e      	b.n	8000fc6 <fsm_simple_buttons_run+0x232>
				}
		    }
		    else if(counter <= Set_time*4/3){
 8000ee8:	4b59      	ldr	r3, [pc, #356]	; (8001050 <fsm_simple_buttons_run+0x2bc>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	4a5c      	ldr	r2, [pc, #368]	; (8001060 <fsm_simple_buttons_run+0x2cc>)
 8000ef0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ef4:	17db      	asrs	r3, r3, #31
 8000ef6:	1ad2      	subs	r2, r2, r3
 8000ef8:	4b52      	ldr	r3, [pc, #328]	; (8001044 <fsm_simple_buttons_run+0x2b0>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	db39      	blt.n	8000f74 <fsm_simple_buttons_run+0x1e0>
				Horizontal_TrafficLight = Set_time*4/3 - counter;
 8000f00:	4b53      	ldr	r3, [pc, #332]	; (8001050 <fsm_simple_buttons_run+0x2bc>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	4a56      	ldr	r2, [pc, #344]	; (8001060 <fsm_simple_buttons_run+0x2cc>)
 8000f08:	fb82 1203 	smull	r1, r2, r2, r3
 8000f0c:	17db      	asrs	r3, r3, #31
 8000f0e:	1ad2      	subs	r2, r2, r3
 8000f10:	4b4c      	ldr	r3, [pc, #304]	; (8001044 <fsm_simple_buttons_run+0x2b0>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	4a50      	ldr	r2, [pc, #320]	; (8001058 <fsm_simple_buttons_run+0x2c4>)
 8000f18:	6013      	str	r3, [r2, #0]
		    	//display7SEG(7-counter);
				HAL_GPIO_WritePin ( RED_GPIO_Port , RED_Pin , GPIO_PIN_RESET ) ;
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f20:	484e      	ldr	r0, [pc, #312]	; (800105c <fsm_simple_buttons_run+0x2c8>)
 8000f22:	f000 fdd4 	bl	8001ace <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( YELLOW_GPIO_Port , YELLOW_Pin , GPIO_PIN_SET ) ;
 8000f26:	2201      	movs	r2, #1
 8000f28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f2c:	484b      	ldr	r0, [pc, #300]	; (800105c <fsm_simple_buttons_run+0x2c8>)
 8000f2e:	f000 fdce 	bl	8001ace <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( GREEN_GPIO_Port , GREEN_Pin , GPIO_PIN_RESET ) ;
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f38:	4848      	ldr	r0, [pc, #288]	; (800105c <fsm_simple_buttons_run+0x2c8>)
 8000f3a:	f000 fdc8 	bl	8001ace <HAL_GPIO_WritePin>

				Vertial_TrafficLight = Set_time*2 - counter;
 8000f3e:	4b44      	ldr	r3, [pc, #272]	; (8001050 <fsm_simple_buttons_run+0x2bc>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	005a      	lsls	r2, r3, #1
 8000f44:	4b3f      	ldr	r3, [pc, #252]	; (8001044 <fsm_simple_buttons_run+0x2b0>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	4a46      	ldr	r2, [pc, #280]	; (8001064 <fsm_simple_buttons_run+0x2d0>)
 8000f4c:	6013      	str	r3, [r2, #0]
				//display7SEG_1(10-counter);
				HAL_GPIO_WritePin ( RED_1_GPIO_Port , RED_1_Pin , GPIO_PIN_SET ) ;
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f54:	4841      	ldr	r0, [pc, #260]	; (800105c <fsm_simple_buttons_run+0x2c8>)
 8000f56:	f000 fdba 	bl	8001ace <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( YELLOW_1_GPIO_Port , YELLOW_1_Pin , GPIO_PIN_RESET ) ;
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f60:	483e      	ldr	r0, [pc, #248]	; (800105c <fsm_simple_buttons_run+0x2c8>)
 8000f62:	f000 fdb4 	bl	8001ace <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin ( GREEN_1_GPIO_Port , GREEN_1_Pin , GPIO_PIN_RESET ) ;
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f6c:	483b      	ldr	r0, [pc, #236]	; (800105c <fsm_simple_buttons_run+0x2c8>)
 8000f6e:	f000 fdae 	bl	8001ace <HAL_GPIO_WritePin>
 8000f72:	e028      	b.n	8000fc6 <fsm_simple_buttons_run+0x232>
		    }
		    else if(counter <= Set_time*2){
 8000f74:	4b36      	ldr	r3, [pc, #216]	; (8001050 <fsm_simple_buttons_run+0x2bc>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	005a      	lsls	r2, r3, #1
 8000f7a:	4b32      	ldr	r3, [pc, #200]	; (8001044 <fsm_simple_buttons_run+0x2b0>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	db21      	blt.n	8000fc6 <fsm_simple_buttons_run+0x232>
				Horizontal_TrafficLight = Set_time*2 - counter;
 8000f82:	4b33      	ldr	r3, [pc, #204]	; (8001050 <fsm_simple_buttons_run+0x2bc>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	005a      	lsls	r2, r3, #1
 8000f88:	4b2e      	ldr	r3, [pc, #184]	; (8001044 <fsm_simple_buttons_run+0x2b0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	4a32      	ldr	r2, [pc, #200]	; (8001058 <fsm_simple_buttons_run+0x2c4>)
 8000f90:	6013      	str	r3, [r2, #0]
		    	//display7SEG(10-counter);
			    HAL_GPIO_WritePin ( RED_GPIO_Port , RED_Pin , GPIO_PIN_RESET ) ;
 8000f92:	2200      	movs	r2, #0
 8000f94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f98:	4830      	ldr	r0, [pc, #192]	; (800105c <fsm_simple_buttons_run+0x2c8>)
 8000f9a:	f000 fd98 	bl	8001ace <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin ( YELLOW_GPIO_Port , YELLOW_Pin , GPIO_PIN_RESET ) ;
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa4:	482d      	ldr	r0, [pc, #180]	; (800105c <fsm_simple_buttons_run+0x2c8>)
 8000fa6:	f000 fd92 	bl	8001ace <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( GREEN_GPIO_Port , GREEN_Pin , GPIO_PIN_SET ) ;
 8000faa:	2201      	movs	r2, #1
 8000fac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fb0:	482a      	ldr	r0, [pc, #168]	; (800105c <fsm_simple_buttons_run+0x2c8>)
 8000fb2:	f000 fd8c 	bl	8001ace <HAL_GPIO_WritePin>
				Vertial_TrafficLight = Set_time*2 - counter;
 8000fb6:	4b26      	ldr	r3, [pc, #152]	; (8001050 <fsm_simple_buttons_run+0x2bc>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	005a      	lsls	r2, r3, #1
 8000fbc:	4b21      	ldr	r3, [pc, #132]	; (8001044 <fsm_simple_buttons_run+0x2b0>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	4a28      	ldr	r2, [pc, #160]	; (8001064 <fsm_simple_buttons_run+0x2d0>)
 8000fc4:	6013      	str	r3, [r2, #0]
				//display7SEG_1(10-count);
			}
			if(counter >= Set_time*2) counter = 0;
 8000fc6:	4b22      	ldr	r3, [pc, #136]	; (8001050 <fsm_simple_buttons_run+0x2bc>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	005a      	lsls	r2, r3, #1
 8000fcc:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <fsm_simple_buttons_run+0x2b0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	dc02      	bgt.n	8000fda <fsm_simple_buttons_run+0x246>
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <fsm_simple_buttons_run+0x2b0>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
			setTimer0(1000);
 8000fda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fde:	f000 f95f 	bl	80012a0 <setTimer0>
		}
		if(isButton1Pressed() == 1){
 8000fe2:	f7ff f8b3 	bl	800014c <isButton1Pressed>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d121      	bne.n	8001030 <fsm_simple_buttons_run+0x29c>
			state = YELLOW_M;
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <fsm_simple_buttons_run+0x2ac>)
 8000fee:	2203      	movs	r2, #3
 8000ff0:	601a      	str	r2, [r3, #0]
		}
		break;
 8000ff2:	e01d      	b.n	8001030 <fsm_simple_buttons_run+0x29c>
	case YELLOW_M:
		ModeValue = 3;
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <fsm_simple_buttons_run+0x2b4>)
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	601a      	str	r2, [r3, #0]
		updateClockBuffer();
 8000ffa:	f7ff f9ab 	bl	8000354 <updateClockBuffer>
		if(isButton1Pressed() == 1){
 8000ffe:	f7ff f8a5 	bl	800014c <isButton1Pressed>
 8001002:	4603      	mov	r3, r0
 8001004:	2b01      	cmp	r3, #1
 8001006:	d115      	bne.n	8001034 <fsm_simple_buttons_run+0x2a0>
			state = GREEN_M;
 8001008:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <fsm_simple_buttons_run+0x2ac>)
 800100a:	2204      	movs	r2, #4
 800100c:	601a      	str	r2, [r3, #0]
		}
		break;
 800100e:	e011      	b.n	8001034 <fsm_simple_buttons_run+0x2a0>
	case GREEN_M:
		ModeValue = 4;
 8001010:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <fsm_simple_buttons_run+0x2b4>)
 8001012:	2204      	movs	r2, #4
 8001014:	601a      	str	r2, [r3, #0]
		updateClockBuffer();
 8001016:	f7ff f99d 	bl	8000354 <updateClockBuffer>
		if(isButton1Pressed() == 1){
 800101a:	f7ff f897 	bl	800014c <isButton1Pressed>
 800101e:	4603      	mov	r3, r0
 8001020:	2b01      	cmp	r3, #1
 8001022:	d109      	bne.n	8001038 <fsm_simple_buttons_run+0x2a4>
			state = NOR;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <fsm_simple_buttons_run+0x2ac>)
 8001026:	2201      	movs	r2, #1
 8001028:	601a      	str	r2, [r3, #0]
		}
		break;
 800102a:	e005      	b.n	8001038 <fsm_simple_buttons_run+0x2a4>
	default:
		break;
 800102c:	bf00      	nop
 800102e:	e004      	b.n	800103a <fsm_simple_buttons_run+0x2a6>
		break;
 8001030:	bf00      	nop
 8001032:	e002      	b.n	800103a <fsm_simple_buttons_run+0x2a6>
		break;
 8001034:	bf00      	nop
 8001036:	e000      	b.n	800103a <fsm_simple_buttons_run+0x2a6>
		break;
 8001038:	bf00      	nop
	}
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2000009c 	.word	0x2000009c
 8001044:	20000098 	.word	0x20000098
 8001048:	200000a8 	.word	0x200000a8
 800104c:	2000003c 	.word	0x2000003c
 8001050:	200000b4 	.word	0x200000b4
 8001054:	200000bc 	.word	0x200000bc
 8001058:	200000a0 	.word	0x200000a0
 800105c:	40010800 	.word	0x40010800
 8001060:	55555556 	.word	0x55555556
 8001064:	200000a4 	.word	0x200000a4

08001068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106c:	f000 fa2e 	bl	80014cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001070:	f000 f816 	bl	80010a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001074:	f000 f89c 	bl	80011b0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001078:	f000 f84e 	bl	8001118 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 800107c:	4807      	ldr	r0, [pc, #28]	; (800109c <main+0x34>)
 800107e:	f001 f977 	bl	8002370 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(250);
 8001082:	20fa      	movs	r0, #250	; 0xfa
 8001084:	f000 f926 	bl	80012d4 <setTimer1>
  setTimer0(1000);
 8001088:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800108c:	f000 f908 	bl	80012a0 <setTimer0>
  while (1)
  {
	  fsm_automatic_run();
 8001090:	f7ff fd8e 	bl	8000bb0 <fsm_automatic_run>

	  fsm_simple_buttons_run();
 8001094:	f7ff fe7e 	bl	8000d94 <fsm_simple_buttons_run>
	  fsm_automatic_run();
 8001098:	e7fa      	b.n	8001090 <main+0x28>
 800109a:	bf00      	nop
 800109c:	200000c8 	.word	0x200000c8

080010a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b090      	sub	sp, #64	; 0x40
 80010a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a6:	f107 0318 	add.w	r3, r7, #24
 80010aa:	2228      	movs	r2, #40	; 0x28
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f001 fd16 	bl	8002ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010c2:	2302      	movs	r3, #2
 80010c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c6:	2301      	movs	r3, #1
 80010c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ca:	2310      	movs	r3, #16
 80010cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d2:	f107 0318 	add.w	r3, r7, #24
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 fd12 	bl	8001b00 <HAL_RCC_OscConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80010e2:	f000 f8d7 	bl	8001294 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e6:	230f      	movs	r3, #15
 80010e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 ff7e 	bl	8002000 <HAL_RCC_ClockConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800110a:	f000 f8c3 	bl	8001294 <Error_Handler>
  }
}
 800110e:	bf00      	nop
 8001110:	3740      	adds	r7, #64	; 0x40
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800111e:	f107 0308 	add.w	r3, r7, #8
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800112c:	463b      	mov	r3, r7
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001134:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <MX_TIM2_Init+0x94>)
 8001136:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800113a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800113c:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <MX_TIM2_Init+0x94>)
 800113e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001142:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001144:	4b19      	ldr	r3, [pc, #100]	; (80011ac <MX_TIM2_Init+0x94>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <MX_TIM2_Init+0x94>)
 800114c:	2209      	movs	r2, #9
 800114e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001150:	4b16      	ldr	r3, [pc, #88]	; (80011ac <MX_TIM2_Init+0x94>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <MX_TIM2_Init+0x94>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800115c:	4813      	ldr	r0, [pc, #76]	; (80011ac <MX_TIM2_Init+0x94>)
 800115e:	f001 f8b7 	bl	80022d0 <HAL_TIM_Base_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001168:	f000 f894 	bl	8001294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800116c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001170:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001172:	f107 0308 	add.w	r3, r7, #8
 8001176:	4619      	mov	r1, r3
 8001178:	480c      	ldr	r0, [pc, #48]	; (80011ac <MX_TIM2_Init+0x94>)
 800117a:	f001 fa4d 	bl	8002618 <HAL_TIM_ConfigClockSource>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001184:	f000 f886 	bl	8001294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001188:	2300      	movs	r3, #0
 800118a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001190:	463b      	mov	r3, r7
 8001192:	4619      	mov	r1, r3
 8001194:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_TIM2_Init+0x94>)
 8001196:	f001 fc15 	bl	80029c4 <HAL_TIMEx_MasterConfigSynchronization>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011a0:	f000 f878 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011a4:	bf00      	nop
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200000c8 	.word	0x200000c8

080011b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c4:	4b29      	ldr	r3, [pc, #164]	; (800126c <MX_GPIO_Init+0xbc>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	4a28      	ldr	r2, [pc, #160]	; (800126c <MX_GPIO_Init+0xbc>)
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	6193      	str	r3, [r2, #24]
 80011d0:	4b26      	ldr	r3, [pc, #152]	; (800126c <MX_GPIO_Init+0xbc>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011dc:	4b23      	ldr	r3, [pc, #140]	; (800126c <MX_GPIO_Init+0xbc>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	4a22      	ldr	r2, [pc, #136]	; (800126c <MX_GPIO_Init+0xbc>)
 80011e2:	f043 0308 	orr.w	r3, r3, #8
 80011e6:	6193      	str	r3, [r2, #24]
 80011e8:	4b20      	ldr	r3, [pc, #128]	; (800126c <MX_GPIO_Init+0xbc>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	f003 0308 	and.w	r3, r3, #8
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 80011f4:	2200      	movs	r2, #0
 80011f6:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 80011fa:	481d      	ldr	r0, [pc, #116]	; (8001270 <MX_GPIO_Init+0xc0>)
 80011fc:	f000 fc67 	bl	8001ace <HAL_GPIO_WritePin>
                          |EN4_Pin|EN5_Pin|RED_Pin|YELLOW_Pin
                          |GREEN_Pin|RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_Pin|B_Pin|C_Pin|EN6_Pin
 8001200:	2200      	movs	r2, #0
 8001202:	f24c 017f 	movw	r1, #49279	; 0xc07f
 8001206:	481b      	ldr	r0, [pc, #108]	; (8001274 <MX_GPIO_Init+0xc4>)
 8001208:	f000 fc61 	bl	8001ace <HAL_GPIO_WritePin>
                          |G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED_Pin EN1_Pin EN2_Pin EN3_Pin
                           EN4_Pin EN5_Pin RED_Pin YELLOW_Pin
                           GREEN_Pin RED_1_Pin YELLOW_1_Pin GREEN_1_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 800120c:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001210:	60bb      	str	r3, [r7, #8]
                          |EN4_Pin|EN5_Pin|RED_Pin|YELLOW_Pin
                          |GREEN_Pin|RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001212:	2301      	movs	r3, #1
 8001214:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2302      	movs	r3, #2
 800121c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121e:	f107 0308 	add.w	r3, r7, #8
 8001222:	4619      	mov	r1, r3
 8001224:	4812      	ldr	r0, [pc, #72]	; (8001270 <MX_GPIO_Init+0xc0>)
 8001226:	f000 fac1 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin EN6_Pin
                           EN7_Pin D_Pin E_Pin F_Pin
                           G_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|EN6_Pin
 800122a:	f24c 037f 	movw	r3, #49279	; 0xc07f
 800122e:	60bb      	str	r3, [r7, #8]
                          |EN7_Pin|D_Pin|E_Pin|F_Pin
                          |G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001230:	2301      	movs	r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2302      	movs	r3, #2
 800123a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123c:	f107 0308 	add.w	r3, r7, #8
 8001240:	4619      	mov	r1, r3
 8001242:	480c      	ldr	r0, [pc, #48]	; (8001274 <MX_GPIO_Init+0xc4>)
 8001244:	f000 fab2 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pins : INC_Pin SET_Pin MODE_Pin */
  GPIO_InitStruct.Pin = INC_Pin|SET_Pin|MODE_Pin;
 8001248:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800124c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001252:	2301      	movs	r3, #1
 8001254:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001256:	f107 0308 	add.w	r3, r7, #8
 800125a:	4619      	mov	r1, r3
 800125c:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_GPIO_Init+0xc4>)
 800125e:	f000 faa5 	bl	80017ac <HAL_GPIO_Init>

}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40021000 	.word	0x40021000
 8001270:	40010800 	.word	0x40010800
 8001274:	40010c00 	.word	0x40010c00

08001278 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	timer_run();
 8001280:	f000 f842 	bl	8001308 <timer_run>
	getKeyInput();
 8001284:	f7fe ffc2 	bl	800020c <getKeyInput>
	Seg7Scan();
 8001288:	f7ff fc28 	bl	8000adc <Seg7Scan>
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001298:	b672      	cpsid	i
}
 800129a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800129c:	e7fe      	b.n	800129c <Error_Handler+0x8>
	...

080012a0 <setTimer0>:
int timer0_counter = 0;
int timer0_flag = 0;
int timer1_counter = 0;
int timer1_flag = 0;
int TIMER_CYCLE = 10;
void setTimer0(int duration){
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	timer0_counter = duration/ TIMER_CYCLE;
 80012a8:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <setTimer0+0x28>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80012b2:	4a06      	ldr	r2, [pc, #24]	; (80012cc <setTimer0+0x2c>)
 80012b4:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <setTimer0+0x30>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000040 	.word	0x20000040
 80012cc:	200000b8 	.word	0x200000b8
 80012d0:	200000bc 	.word	0x200000bc

080012d4 <setTimer1>:
void setTimer1(int duration){
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/ TIMER_CYCLE;
 80012dc:	4b07      	ldr	r3, [pc, #28]	; (80012fc <setTimer1+0x28>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80012e6:	4a06      	ldr	r2, [pc, #24]	; (8001300 <setTimer1+0x2c>)
 80012e8:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <setTimer1+0x30>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000040 	.word	0x20000040
 8001300:	200000c0 	.word	0x200000c0
 8001304:	200000c4 	.word	0x200000c4

08001308 <timer_run>:

void timer_run(){
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
	if(timer0_counter > 0){
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <timer_run+0x4c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	dd0b      	ble.n	800132c <timer_run+0x24>
		timer0_counter--;
 8001314:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <timer_run+0x4c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	3b01      	subs	r3, #1
 800131a:	4a0e      	ldr	r2, [pc, #56]	; (8001354 <timer_run+0x4c>)
 800131c:	6013      	str	r3, [r2, #0]
		if(timer0_counter == 0) timer0_flag = 1;
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <timer_run+0x4c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d102      	bne.n	800132c <timer_run+0x24>
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <timer_run+0x50>)
 8001328:	2201      	movs	r2, #1
 800132a:	601a      	str	r2, [r3, #0]
	}
	if(timer1_counter > 0){
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <timer_run+0x54>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	dd0b      	ble.n	800134c <timer_run+0x44>
		timer1_counter--;
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <timer_run+0x54>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	3b01      	subs	r3, #1
 800133a:	4a08      	ldr	r2, [pc, #32]	; (800135c <timer_run+0x54>)
 800133c:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) timer1_flag = 1;
 800133e:	4b07      	ldr	r3, [pc, #28]	; (800135c <timer_run+0x54>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d102      	bne.n	800134c <timer_run+0x44>
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <timer_run+0x58>)
 8001348:	2201      	movs	r2, #1
 800134a:	601a      	str	r2, [r3, #0]
	}
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr
 8001354:	200000b8 	.word	0x200000b8
 8001358:	200000bc 	.word	0x200000bc
 800135c:	200000c0 	.word	0x200000c0
 8001360:	200000c4 	.word	0x200000c4

08001364 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <HAL_MspInit+0x5c>)
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	4a14      	ldr	r2, [pc, #80]	; (80013c0 <HAL_MspInit+0x5c>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6193      	str	r3, [r2, #24]
 8001376:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_MspInit+0x5c>)
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <HAL_MspInit+0x5c>)
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	4a0e      	ldr	r2, [pc, #56]	; (80013c0 <HAL_MspInit+0x5c>)
 8001388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138c:	61d3      	str	r3, [r2, #28]
 800138e:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <HAL_MspInit+0x5c>)
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <HAL_MspInit+0x60>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	4a04      	ldr	r2, [pc, #16]	; (80013c4 <HAL_MspInit+0x60>)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b6:	bf00      	nop
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40010000 	.word	0x40010000

080013c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013d8:	d113      	bne.n	8001402 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013da:	4b0c      	ldr	r3, [pc, #48]	; (800140c <HAL_TIM_Base_MspInit+0x44>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	4a0b      	ldr	r2, [pc, #44]	; (800140c <HAL_TIM_Base_MspInit+0x44>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	61d3      	str	r3, [r2, #28]
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <HAL_TIM_Base_MspInit+0x44>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2100      	movs	r1, #0
 80013f6:	201c      	movs	r0, #28
 80013f8:	f000 f9a1 	bl	800173e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013fc:	201c      	movs	r0, #28
 80013fe:	f000 f9ba 	bl	8001776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001402:	bf00      	nop
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40021000 	.word	0x40021000

08001410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <NMI_Handler+0x4>

08001416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141a:	e7fe      	b.n	800141a <HardFault_Handler+0x4>

0800141c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <MemManage_Handler+0x4>

08001422 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <BusFault_Handler+0x4>

08001428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <UsageFault_Handler+0x4>

0800142e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr

0800143a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr

08001446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr

08001452 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001456:	f000 f87f 	bl	8001558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <TIM2_IRQHandler+0x10>)
 8001466:	f000 ffcf 	bl	8002408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	200000c8 	.word	0x200000c8

08001474 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr

08001480 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001480:	480c      	ldr	r0, [pc, #48]	; (80014b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001482:	490d      	ldr	r1, [pc, #52]	; (80014b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001484:	4a0d      	ldr	r2, [pc, #52]	; (80014bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001488:	e002      	b.n	8001490 <LoopCopyDataInit>

0800148a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800148c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148e:	3304      	adds	r3, #4

08001490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001494:	d3f9      	bcc.n	800148a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001496:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001498:	4c0a      	ldr	r4, [pc, #40]	; (80014c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800149c:	e001      	b.n	80014a2 <LoopFillZerobss>

0800149e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a0:	3204      	adds	r2, #4

080014a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a4:	d3fb      	bcc.n	800149e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014a6:	f7ff ffe5 	bl	8001474 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014aa:	f001 faf5 	bl	8002a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014ae:	f7ff fddb 	bl	8001068 <main>
  bx lr
 80014b2:	4770      	bx	lr
  ldr r0, =_sdata
 80014b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b8:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80014bc:	08002b30 	.word	0x08002b30
  ldr r2, =_sbss
 80014c0:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80014c4:	20000114 	.word	0x20000114

080014c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014c8:	e7fe      	b.n	80014c8 <ADC1_2_IRQHandler>
	...

080014cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d0:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <HAL_Init+0x28>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a07      	ldr	r2, [pc, #28]	; (80014f4 <HAL_Init+0x28>)
 80014d6:	f043 0310 	orr.w	r3, r3, #16
 80014da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014dc:	2003      	movs	r0, #3
 80014de:	f000 f923 	bl	8001728 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014e2:	200f      	movs	r0, #15
 80014e4:	f000 f808 	bl	80014f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e8:	f7ff ff3c 	bl	8001364 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40022000 	.word	0x40022000

080014f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_InitTick+0x54>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_InitTick+0x58>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4619      	mov	r1, r3
 800150a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001512:	fbb2 f3f3 	udiv	r3, r2, r3
 8001516:	4618      	mov	r0, r3
 8001518:	f000 f93b 	bl	8001792 <HAL_SYSTICK_Config>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e00e      	b.n	8001544 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b0f      	cmp	r3, #15
 800152a:	d80a      	bhi.n	8001542 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800152c:	2200      	movs	r2, #0
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	f04f 30ff 	mov.w	r0, #4294967295
 8001534:	f000 f903 	bl	800173e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001538:	4a06      	ldr	r2, [pc, #24]	; (8001554 <HAL_InitTick+0x5c>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800153e:	2300      	movs	r3, #0
 8001540:	e000      	b.n	8001544 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000044 	.word	0x20000044
 8001550:	2000004c 	.word	0x2000004c
 8001554:	20000048 	.word	0x20000048

08001558 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <HAL_IncTick+0x1c>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	461a      	mov	r2, r3
 8001562:	4b05      	ldr	r3, [pc, #20]	; (8001578 <HAL_IncTick+0x20>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4413      	add	r3, r2
 8001568:	4a03      	ldr	r2, [pc, #12]	; (8001578 <HAL_IncTick+0x20>)
 800156a:	6013      	str	r3, [r2, #0]
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	2000004c 	.word	0x2000004c
 8001578:	20000110 	.word	0x20000110

0800157c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return uwTick;
 8001580:	4b02      	ldr	r3, [pc, #8]	; (800158c <HAL_GetTick+0x10>)
 8001582:	681b      	ldr	r3, [r3, #0]
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	20000110 	.word	0x20000110

08001590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015ac:	4013      	ands	r3, r2
 80015ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c2:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	60d3      	str	r3, [r2, #12]
}
 80015c8:	bf00      	nop
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015dc:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <__NVIC_GetPriorityGrouping+0x18>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	0a1b      	lsrs	r3, r3, #8
 80015e2:	f003 0307 	and.w	r3, r3, #7
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	2b00      	cmp	r3, #0
 8001604:	db0b      	blt.n	800161e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	f003 021f 	and.w	r2, r3, #31
 800160c:	4906      	ldr	r1, [pc, #24]	; (8001628 <__NVIC_EnableIRQ+0x34>)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	095b      	lsrs	r3, r3, #5
 8001614:	2001      	movs	r0, #1
 8001616:	fa00 f202 	lsl.w	r2, r0, r2
 800161a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	e000e100 	.word	0xe000e100

0800162c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	6039      	str	r1, [r7, #0]
 8001636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163c:	2b00      	cmp	r3, #0
 800163e:	db0a      	blt.n	8001656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	b2da      	uxtb	r2, r3
 8001644:	490c      	ldr	r1, [pc, #48]	; (8001678 <__NVIC_SetPriority+0x4c>)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	0112      	lsls	r2, r2, #4
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	440b      	add	r3, r1
 8001650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001654:	e00a      	b.n	800166c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4908      	ldr	r1, [pc, #32]	; (800167c <__NVIC_SetPriority+0x50>)
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	3b04      	subs	r3, #4
 8001664:	0112      	lsls	r2, r2, #4
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	440b      	add	r3, r1
 800166a:	761a      	strb	r2, [r3, #24]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000e100 	.word	0xe000e100
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001680:	b480      	push	{r7}
 8001682:	b089      	sub	sp, #36	; 0x24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f1c3 0307 	rsb	r3, r3, #7
 800169a:	2b04      	cmp	r3, #4
 800169c:	bf28      	it	cs
 800169e:	2304      	movcs	r3, #4
 80016a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3304      	adds	r3, #4
 80016a6:	2b06      	cmp	r3, #6
 80016a8:	d902      	bls.n	80016b0 <NVIC_EncodePriority+0x30>
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3b03      	subs	r3, #3
 80016ae:	e000      	b.n	80016b2 <NVIC_EncodePriority+0x32>
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b4:	f04f 32ff 	mov.w	r2, #4294967295
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43da      	mvns	r2, r3
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	401a      	ands	r2, r3
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c8:	f04f 31ff 	mov.w	r1, #4294967295
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
 80016d2:	43d9      	mvns	r1, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d8:	4313      	orrs	r3, r2
         );
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3724      	adds	r7, #36	; 0x24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f4:	d301      	bcc.n	80016fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f6:	2301      	movs	r3, #1
 80016f8:	e00f      	b.n	800171a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016fa:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <SysTick_Config+0x40>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3b01      	subs	r3, #1
 8001700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001702:	210f      	movs	r1, #15
 8001704:	f04f 30ff 	mov.w	r0, #4294967295
 8001708:	f7ff ff90 	bl	800162c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <SysTick_Config+0x40>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001712:	4b04      	ldr	r3, [pc, #16]	; (8001724 <SysTick_Config+0x40>)
 8001714:	2207      	movs	r2, #7
 8001716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	e000e010 	.word	0xe000e010

08001728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff ff2d 	bl	8001590 <__NVIC_SetPriorityGrouping>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800173e:	b580      	push	{r7, lr}
 8001740:	b086      	sub	sp, #24
 8001742:	af00      	add	r7, sp, #0
 8001744:	4603      	mov	r3, r0
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
 800174a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001750:	f7ff ff42 	bl	80015d8 <__NVIC_GetPriorityGrouping>
 8001754:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	6978      	ldr	r0, [r7, #20]
 800175c:	f7ff ff90 	bl	8001680 <NVIC_EncodePriority>
 8001760:	4602      	mov	r2, r0
 8001762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff5f 	bl	800162c <__NVIC_SetPriority>
}
 800176e:	bf00      	nop
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	4603      	mov	r3, r0
 800177e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff35 	bl	80015f4 <__NVIC_EnableIRQ>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff ffa2 	bl	80016e4 <SysTick_Config>
 80017a0:	4603      	mov	r3, r0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b08b      	sub	sp, #44	; 0x2c
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017ba:	2300      	movs	r3, #0
 80017bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017be:	e148      	b.n	8001a52 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017c0:	2201      	movs	r2, #1
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	429a      	cmp	r2, r3
 80017da:	f040 8137 	bne.w	8001a4c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	4aa3      	ldr	r2, [pc, #652]	; (8001a70 <HAL_GPIO_Init+0x2c4>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d05e      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
 80017e8:	4aa1      	ldr	r2, [pc, #644]	; (8001a70 <HAL_GPIO_Init+0x2c4>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d875      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 80017ee:	4aa1      	ldr	r2, [pc, #644]	; (8001a74 <HAL_GPIO_Init+0x2c8>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d058      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
 80017f4:	4a9f      	ldr	r2, [pc, #636]	; (8001a74 <HAL_GPIO_Init+0x2c8>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d86f      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 80017fa:	4a9f      	ldr	r2, [pc, #636]	; (8001a78 <HAL_GPIO_Init+0x2cc>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d052      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
 8001800:	4a9d      	ldr	r2, [pc, #628]	; (8001a78 <HAL_GPIO_Init+0x2cc>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d869      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 8001806:	4a9d      	ldr	r2, [pc, #628]	; (8001a7c <HAL_GPIO_Init+0x2d0>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d04c      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
 800180c:	4a9b      	ldr	r2, [pc, #620]	; (8001a7c <HAL_GPIO_Init+0x2d0>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d863      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 8001812:	4a9b      	ldr	r2, [pc, #620]	; (8001a80 <HAL_GPIO_Init+0x2d4>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d046      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
 8001818:	4a99      	ldr	r2, [pc, #612]	; (8001a80 <HAL_GPIO_Init+0x2d4>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d85d      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 800181e:	2b12      	cmp	r3, #18
 8001820:	d82a      	bhi.n	8001878 <HAL_GPIO_Init+0xcc>
 8001822:	2b12      	cmp	r3, #18
 8001824:	d859      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 8001826:	a201      	add	r2, pc, #4	; (adr r2, 800182c <HAL_GPIO_Init+0x80>)
 8001828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182c:	080018a7 	.word	0x080018a7
 8001830:	08001881 	.word	0x08001881
 8001834:	08001893 	.word	0x08001893
 8001838:	080018d5 	.word	0x080018d5
 800183c:	080018db 	.word	0x080018db
 8001840:	080018db 	.word	0x080018db
 8001844:	080018db 	.word	0x080018db
 8001848:	080018db 	.word	0x080018db
 800184c:	080018db 	.word	0x080018db
 8001850:	080018db 	.word	0x080018db
 8001854:	080018db 	.word	0x080018db
 8001858:	080018db 	.word	0x080018db
 800185c:	080018db 	.word	0x080018db
 8001860:	080018db 	.word	0x080018db
 8001864:	080018db 	.word	0x080018db
 8001868:	080018db 	.word	0x080018db
 800186c:	080018db 	.word	0x080018db
 8001870:	08001889 	.word	0x08001889
 8001874:	0800189d 	.word	0x0800189d
 8001878:	4a82      	ldr	r2, [pc, #520]	; (8001a84 <HAL_GPIO_Init+0x2d8>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d013      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800187e:	e02c      	b.n	80018da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	623b      	str	r3, [r7, #32]
          break;
 8001886:	e029      	b.n	80018dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	3304      	adds	r3, #4
 800188e:	623b      	str	r3, [r7, #32]
          break;
 8001890:	e024      	b.n	80018dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	3308      	adds	r3, #8
 8001898:	623b      	str	r3, [r7, #32]
          break;
 800189a:	e01f      	b.n	80018dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	330c      	adds	r3, #12
 80018a2:	623b      	str	r3, [r7, #32]
          break;
 80018a4:	e01a      	b.n	80018dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d102      	bne.n	80018b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018ae:	2304      	movs	r3, #4
 80018b0:	623b      	str	r3, [r7, #32]
          break;
 80018b2:	e013      	b.n	80018dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d105      	bne.n	80018c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018bc:	2308      	movs	r3, #8
 80018be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69fa      	ldr	r2, [r7, #28]
 80018c4:	611a      	str	r2, [r3, #16]
          break;
 80018c6:	e009      	b.n	80018dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c8:	2308      	movs	r3, #8
 80018ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69fa      	ldr	r2, [r7, #28]
 80018d0:	615a      	str	r2, [r3, #20]
          break;
 80018d2:	e003      	b.n	80018dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018d4:	2300      	movs	r3, #0
 80018d6:	623b      	str	r3, [r7, #32]
          break;
 80018d8:	e000      	b.n	80018dc <HAL_GPIO_Init+0x130>
          break;
 80018da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	2bff      	cmp	r3, #255	; 0xff
 80018e0:	d801      	bhi.n	80018e6 <HAL_GPIO_Init+0x13a>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	e001      	b.n	80018ea <HAL_GPIO_Init+0x13e>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3304      	adds	r3, #4
 80018ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	2bff      	cmp	r3, #255	; 0xff
 80018f0:	d802      	bhi.n	80018f8 <HAL_GPIO_Init+0x14c>
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	e002      	b.n	80018fe <HAL_GPIO_Init+0x152>
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	3b08      	subs	r3, #8
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	210f      	movs	r1, #15
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	fa01 f303 	lsl.w	r3, r1, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	401a      	ands	r2, r3
 8001910:	6a39      	ldr	r1, [r7, #32]
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	fa01 f303 	lsl.w	r3, r1, r3
 8001918:	431a      	orrs	r2, r3
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 8090 	beq.w	8001a4c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800192c:	4b56      	ldr	r3, [pc, #344]	; (8001a88 <HAL_GPIO_Init+0x2dc>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	4a55      	ldr	r2, [pc, #340]	; (8001a88 <HAL_GPIO_Init+0x2dc>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6193      	str	r3, [r2, #24]
 8001938:	4b53      	ldr	r3, [pc, #332]	; (8001a88 <HAL_GPIO_Init+0x2dc>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001944:	4a51      	ldr	r2, [pc, #324]	; (8001a8c <HAL_GPIO_Init+0x2e0>)
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	089b      	lsrs	r3, r3, #2
 800194a:	3302      	adds	r3, #2
 800194c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001950:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	220f      	movs	r2, #15
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	4013      	ands	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a49      	ldr	r2, [pc, #292]	; (8001a90 <HAL_GPIO_Init+0x2e4>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d00d      	beq.n	800198c <HAL_GPIO_Init+0x1e0>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a48      	ldr	r2, [pc, #288]	; (8001a94 <HAL_GPIO_Init+0x2e8>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d007      	beq.n	8001988 <HAL_GPIO_Init+0x1dc>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a47      	ldr	r2, [pc, #284]	; (8001a98 <HAL_GPIO_Init+0x2ec>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d101      	bne.n	8001984 <HAL_GPIO_Init+0x1d8>
 8001980:	2302      	movs	r3, #2
 8001982:	e004      	b.n	800198e <HAL_GPIO_Init+0x1e2>
 8001984:	2303      	movs	r3, #3
 8001986:	e002      	b.n	800198e <HAL_GPIO_Init+0x1e2>
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <HAL_GPIO_Init+0x1e2>
 800198c:	2300      	movs	r3, #0
 800198e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001990:	f002 0203 	and.w	r2, r2, #3
 8001994:	0092      	lsls	r2, r2, #2
 8001996:	4093      	lsls	r3, r2
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	4313      	orrs	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800199e:	493b      	ldr	r1, [pc, #236]	; (8001a8c <HAL_GPIO_Init+0x2e0>)
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	089b      	lsrs	r3, r3, #2
 80019a4:	3302      	adds	r3, #2
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d006      	beq.n	80019c6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019b8:	4b38      	ldr	r3, [pc, #224]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4937      	ldr	r1, [pc, #220]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	600b      	str	r3, [r1, #0]
 80019c4:	e006      	b.n	80019d4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019c6:	4b35      	ldr	r3, [pc, #212]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	4933      	ldr	r1, [pc, #204]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d006      	beq.n	80019ee <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019e0:	4b2e      	ldr	r3, [pc, #184]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	492d      	ldr	r1, [pc, #180]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]
 80019ec:	e006      	b.n	80019fc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019ee:	4b2b      	ldr	r3, [pc, #172]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	4929      	ldr	r1, [pc, #164]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 80019f8:	4013      	ands	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d006      	beq.n	8001a16 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a08:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	4923      	ldr	r1, [pc, #140]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	608b      	str	r3, [r1, #8]
 8001a14:	e006      	b.n	8001a24 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a16:	4b21      	ldr	r3, [pc, #132]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	491f      	ldr	r1, [pc, #124]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d006      	beq.n	8001a3e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a30:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 8001a32:	68da      	ldr	r2, [r3, #12]
 8001a34:	4919      	ldr	r1, [pc, #100]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	60cb      	str	r3, [r1, #12]
 8001a3c:	e006      	b.n	8001a4c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a3e:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 8001a40:	68da      	ldr	r2, [r3, #12]
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	4915      	ldr	r1, [pc, #84]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	3301      	adds	r3, #1
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f47f aeaf 	bne.w	80017c0 <HAL_GPIO_Init+0x14>
  }
}
 8001a62:	bf00      	nop
 8001a64:	bf00      	nop
 8001a66:	372c      	adds	r7, #44	; 0x2c
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	10320000 	.word	0x10320000
 8001a74:	10310000 	.word	0x10310000
 8001a78:	10220000 	.word	0x10220000
 8001a7c:	10210000 	.word	0x10210000
 8001a80:	10120000 	.word	0x10120000
 8001a84:	10110000 	.word	0x10110000
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40010000 	.word	0x40010000
 8001a90:	40010800 	.word	0x40010800
 8001a94:	40010c00 	.word	0x40010c00
 8001a98:	40011000 	.word	0x40011000
 8001a9c:	40010400 	.word	0x40010400

08001aa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	887b      	ldrh	r3, [r7, #2]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d002      	beq.n	8001abe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	73fb      	strb	r3, [r7, #15]
 8001abc:	e001      	b.n	8001ac2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr

08001ace <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	807b      	strh	r3, [r7, #2]
 8001ada:	4613      	mov	r3, r2
 8001adc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ade:	787b      	ldrb	r3, [r7, #1]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ae4:	887a      	ldrh	r2, [r7, #2]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001aea:	e003      	b.n	8001af4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001aec:	887b      	ldrh	r3, [r7, #2]
 8001aee:	041a      	lsls	r2, r3, #16
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	611a      	str	r2, [r3, #16]
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr
	...

08001b00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e26c      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 8087 	beq.w	8001c2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b20:	4b92      	ldr	r3, [pc, #584]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 030c 	and.w	r3, r3, #12
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d00c      	beq.n	8001b46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b2c:	4b8f      	ldr	r3, [pc, #572]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 030c 	and.w	r3, r3, #12
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d112      	bne.n	8001b5e <HAL_RCC_OscConfig+0x5e>
 8001b38:	4b8c      	ldr	r3, [pc, #560]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b44:	d10b      	bne.n	8001b5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b46:	4b89      	ldr	r3, [pc, #548]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d06c      	beq.n	8001c2c <HAL_RCC_OscConfig+0x12c>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d168      	bne.n	8001c2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e246      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b66:	d106      	bne.n	8001b76 <HAL_RCC_OscConfig+0x76>
 8001b68:	4b80      	ldr	r3, [pc, #512]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a7f      	ldr	r2, [pc, #508]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	e02e      	b.n	8001bd4 <HAL_RCC_OscConfig+0xd4>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10c      	bne.n	8001b98 <HAL_RCC_OscConfig+0x98>
 8001b7e:	4b7b      	ldr	r3, [pc, #492]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a7a      	ldr	r2, [pc, #488]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	4b78      	ldr	r3, [pc, #480]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a77      	ldr	r2, [pc, #476]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	e01d      	b.n	8001bd4 <HAL_RCC_OscConfig+0xd4>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ba0:	d10c      	bne.n	8001bbc <HAL_RCC_OscConfig+0xbc>
 8001ba2:	4b72      	ldr	r3, [pc, #456]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a71      	ldr	r2, [pc, #452]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	4b6f      	ldr	r3, [pc, #444]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a6e      	ldr	r2, [pc, #440]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	e00b      	b.n	8001bd4 <HAL_RCC_OscConfig+0xd4>
 8001bbc:	4b6b      	ldr	r3, [pc, #428]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a6a      	ldr	r2, [pc, #424]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	4b68      	ldr	r3, [pc, #416]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a67      	ldr	r2, [pc, #412]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d013      	beq.n	8001c04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bdc:	f7ff fcce 	bl	800157c <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be4:	f7ff fcca 	bl	800157c <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b64      	cmp	r3, #100	; 0x64
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e1fa      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf6:	4b5d      	ldr	r3, [pc, #372]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0xe4>
 8001c02:	e014      	b.n	8001c2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c04:	f7ff fcba 	bl	800157c <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c0c:	f7ff fcb6 	bl	800157c <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b64      	cmp	r3, #100	; 0x64
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e1e6      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c1e:	4b53      	ldr	r3, [pc, #332]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0x10c>
 8001c2a:	e000      	b.n	8001c2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d063      	beq.n	8001d02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c3a:	4b4c      	ldr	r3, [pc, #304]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00b      	beq.n	8001c5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c46:	4b49      	ldr	r3, [pc, #292]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
 8001c4e:	2b08      	cmp	r3, #8
 8001c50:	d11c      	bne.n	8001c8c <HAL_RCC_OscConfig+0x18c>
 8001c52:	4b46      	ldr	r3, [pc, #280]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d116      	bne.n	8001c8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5e:	4b43      	ldr	r3, [pc, #268]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d005      	beq.n	8001c76 <HAL_RCC_OscConfig+0x176>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d001      	beq.n	8001c76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e1ba      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c76:	4b3d      	ldr	r3, [pc, #244]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4939      	ldr	r1, [pc, #228]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8a:	e03a      	b.n	8001d02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d020      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c94:	4b36      	ldr	r3, [pc, #216]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9a:	f7ff fc6f 	bl	800157c <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca2:	f7ff fc6b 	bl	800157c <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e19b      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb4:	4b2d      	ldr	r3, [pc, #180]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0f0      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc0:	4b2a      	ldr	r3, [pc, #168]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	4927      	ldr	r1, [pc, #156]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	600b      	str	r3, [r1, #0]
 8001cd4:	e015      	b.n	8001d02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cd6:	4b26      	ldr	r3, [pc, #152]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7ff fc4e 	bl	800157c <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce4:	f7ff fc4a 	bl	800157c <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e17a      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf6:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d03a      	beq.n	8001d84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d019      	beq.n	8001d4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d16:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1c:	f7ff fc2e 	bl	800157c <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d24:	f7ff fc2a 	bl	800157c <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e15a      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d36:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d42:	2001      	movs	r0, #1
 8001d44:	f000 faa6 	bl	8002294 <RCC_Delay>
 8001d48:	e01c      	b.n	8001d84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d50:	f7ff fc14 	bl	800157c <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d56:	e00f      	b.n	8001d78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d58:	f7ff fc10 	bl	800157c <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d908      	bls.n	8001d78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e140      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	42420000 	.word	0x42420000
 8001d74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d78:	4b9e      	ldr	r3, [pc, #632]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1e9      	bne.n	8001d58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 80a6 	beq.w	8001ede <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d92:	2300      	movs	r3, #0
 8001d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d96:	4b97      	ldr	r3, [pc, #604]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10d      	bne.n	8001dbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da2:	4b94      	ldr	r3, [pc, #592]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	4a93      	ldr	r2, [pc, #588]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dac:	61d3      	str	r3, [r2, #28]
 8001dae:	4b91      	ldr	r3, [pc, #580]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dbe:	4b8e      	ldr	r3, [pc, #568]	; (8001ff8 <HAL_RCC_OscConfig+0x4f8>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d118      	bne.n	8001dfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dca:	4b8b      	ldr	r3, [pc, #556]	; (8001ff8 <HAL_RCC_OscConfig+0x4f8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a8a      	ldr	r2, [pc, #552]	; (8001ff8 <HAL_RCC_OscConfig+0x4f8>)
 8001dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dd6:	f7ff fbd1 	bl	800157c <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dde:	f7ff fbcd 	bl	800157c <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b64      	cmp	r3, #100	; 0x64
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e0fd      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df0:	4b81      	ldr	r3, [pc, #516]	; (8001ff8 <HAL_RCC_OscConfig+0x4f8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d106      	bne.n	8001e12 <HAL_RCC_OscConfig+0x312>
 8001e04:	4b7b      	ldr	r3, [pc, #492]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	4a7a      	ldr	r2, [pc, #488]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	6213      	str	r3, [r2, #32]
 8001e10:	e02d      	b.n	8001e6e <HAL_RCC_OscConfig+0x36e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10c      	bne.n	8001e34 <HAL_RCC_OscConfig+0x334>
 8001e1a:	4b76      	ldr	r3, [pc, #472]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	4a75      	ldr	r2, [pc, #468]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001e20:	f023 0301 	bic.w	r3, r3, #1
 8001e24:	6213      	str	r3, [r2, #32]
 8001e26:	4b73      	ldr	r3, [pc, #460]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	4a72      	ldr	r2, [pc, #456]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	f023 0304 	bic.w	r3, r3, #4
 8001e30:	6213      	str	r3, [r2, #32]
 8001e32:	e01c      	b.n	8001e6e <HAL_RCC_OscConfig+0x36e>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b05      	cmp	r3, #5
 8001e3a:	d10c      	bne.n	8001e56 <HAL_RCC_OscConfig+0x356>
 8001e3c:	4b6d      	ldr	r3, [pc, #436]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	4a6c      	ldr	r2, [pc, #432]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001e42:	f043 0304 	orr.w	r3, r3, #4
 8001e46:	6213      	str	r3, [r2, #32]
 8001e48:	4b6a      	ldr	r3, [pc, #424]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	4a69      	ldr	r2, [pc, #420]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	6213      	str	r3, [r2, #32]
 8001e54:	e00b      	b.n	8001e6e <HAL_RCC_OscConfig+0x36e>
 8001e56:	4b67      	ldr	r3, [pc, #412]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	4a66      	ldr	r2, [pc, #408]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	f023 0301 	bic.w	r3, r3, #1
 8001e60:	6213      	str	r3, [r2, #32]
 8001e62:	4b64      	ldr	r3, [pc, #400]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	4a63      	ldr	r2, [pc, #396]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	f023 0304 	bic.w	r3, r3, #4
 8001e6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d015      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e76:	f7ff fb81 	bl	800157c <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7c:	e00a      	b.n	8001e94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7e:	f7ff fb7d 	bl	800157c <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e0ab      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e94:	4b57      	ldr	r3, [pc, #348]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0ee      	beq.n	8001e7e <HAL_RCC_OscConfig+0x37e>
 8001ea0:	e014      	b.n	8001ecc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea2:	f7ff fb6b 	bl	800157c <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea8:	e00a      	b.n	8001ec0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eaa:	f7ff fb67 	bl	800157c <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e095      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec0:	4b4c      	ldr	r3, [pc, #304]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1ee      	bne.n	8001eaa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ecc:	7dfb      	ldrb	r3, [r7, #23]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d105      	bne.n	8001ede <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed2:	4b48      	ldr	r3, [pc, #288]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	4a47      	ldr	r2, [pc, #284]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001edc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 8081 	beq.w	8001fea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ee8:	4b42      	ldr	r3, [pc, #264]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 030c 	and.w	r3, r3, #12
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d061      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d146      	bne.n	8001f8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001efc:	4b3f      	ldr	r3, [pc, #252]	; (8001ffc <HAL_RCC_OscConfig+0x4fc>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f02:	f7ff fb3b 	bl	800157c <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f0a:	f7ff fb37 	bl	800157c <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e067      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f1c:	4b35      	ldr	r3, [pc, #212]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1f0      	bne.n	8001f0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f30:	d108      	bne.n	8001f44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f32:	4b30      	ldr	r3, [pc, #192]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	492d      	ldr	r1, [pc, #180]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f44:	4b2b      	ldr	r3, [pc, #172]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a19      	ldr	r1, [r3, #32]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	430b      	orrs	r3, r1
 8001f56:	4927      	ldr	r1, [pc, #156]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f5c:	4b27      	ldr	r3, [pc, #156]	; (8001ffc <HAL_RCC_OscConfig+0x4fc>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f62:	f7ff fb0b 	bl	800157c <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6a:	f7ff fb07 	bl	800157c <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e037      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0f0      	beq.n	8001f6a <HAL_RCC_OscConfig+0x46a>
 8001f88:	e02f      	b.n	8001fea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8a:	4b1c      	ldr	r3, [pc, #112]	; (8001ffc <HAL_RCC_OscConfig+0x4fc>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f90:	f7ff faf4 	bl	800157c <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f98:	f7ff faf0 	bl	800157c <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e020      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001faa:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x498>
 8001fb6:	e018      	b.n	8001fea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d101      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e013      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d106      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d001      	beq.n	8001fea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40007000 	.word	0x40007000
 8001ffc:	42420060 	.word	0x42420060

08002000 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e0d0      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002014:	4b6a      	ldr	r3, [pc, #424]	; (80021c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	d910      	bls.n	8002044 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002022:	4b67      	ldr	r3, [pc, #412]	; (80021c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f023 0207 	bic.w	r2, r3, #7
 800202a:	4965      	ldr	r1, [pc, #404]	; (80021c0 <HAL_RCC_ClockConfig+0x1c0>)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	4313      	orrs	r3, r2
 8002030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002032:	4b63      	ldr	r3, [pc, #396]	; (80021c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	d001      	beq.n	8002044 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0b8      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d020      	beq.n	8002092 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800205c:	4b59      	ldr	r3, [pc, #356]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	4a58      	ldr	r2, [pc, #352]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002066:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0308 	and.w	r3, r3, #8
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002074:	4b53      	ldr	r3, [pc, #332]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	4a52      	ldr	r2, [pc, #328]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800207e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002080:	4b50      	ldr	r3, [pc, #320]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	494d      	ldr	r1, [pc, #308]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	4313      	orrs	r3, r2
 8002090:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d040      	beq.n	8002120 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d107      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a6:	4b47      	ldr	r3, [pc, #284]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d115      	bne.n	80020de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e07f      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d107      	bne.n	80020ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020be:	4b41      	ldr	r3, [pc, #260]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d109      	bne.n	80020de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e073      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ce:	4b3d      	ldr	r3, [pc, #244]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e06b      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020de:	4b39      	ldr	r3, [pc, #228]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f023 0203 	bic.w	r2, r3, #3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	4936      	ldr	r1, [pc, #216]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f0:	f7ff fa44 	bl	800157c <HAL_GetTick>
 80020f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f6:	e00a      	b.n	800210e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f8:	f7ff fa40 	bl	800157c <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	f241 3288 	movw	r2, #5000	; 0x1388
 8002106:	4293      	cmp	r3, r2
 8002108:	d901      	bls.n	800210e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e053      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210e:	4b2d      	ldr	r3, [pc, #180]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 020c 	and.w	r2, r3, #12
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	429a      	cmp	r2, r3
 800211e:	d1eb      	bne.n	80020f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002120:	4b27      	ldr	r3, [pc, #156]	; (80021c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d210      	bcs.n	8002150 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212e:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 0207 	bic.w	r2, r3, #7
 8002136:	4922      	ldr	r1, [pc, #136]	; (80021c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	4313      	orrs	r3, r2
 800213c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800213e:	4b20      	ldr	r3, [pc, #128]	; (80021c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d001      	beq.n	8002150 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e032      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b00      	cmp	r3, #0
 800215a:	d008      	beq.n	800216e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800215c:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	4916      	ldr	r1, [pc, #88]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	4313      	orrs	r3, r2
 800216c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d009      	beq.n	800218e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800217a:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	490e      	ldr	r1, [pc, #56]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	4313      	orrs	r3, r2
 800218c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800218e:	f000 f821 	bl	80021d4 <HAL_RCC_GetSysClockFreq>
 8002192:	4602      	mov	r2, r0
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	091b      	lsrs	r3, r3, #4
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	490a      	ldr	r1, [pc, #40]	; (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 80021a0:	5ccb      	ldrb	r3, [r1, r3]
 80021a2:	fa22 f303 	lsr.w	r3, r2, r3
 80021a6:	4a09      	ldr	r2, [pc, #36]	; (80021cc <HAL_RCC_ClockConfig+0x1cc>)
 80021a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <HAL_RCC_ClockConfig+0x1d0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff f9a2 	bl	80014f8 <HAL_InitTick>

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40022000 	.word	0x40022000
 80021c4:	40021000 	.word	0x40021000
 80021c8:	08002b18 	.word	0x08002b18
 80021cc:	20000044 	.word	0x20000044
 80021d0:	20000048 	.word	0x20000048

080021d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d4:	b490      	push	{r4, r7}
 80021d6:	b08a      	sub	sp, #40	; 0x28
 80021d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021da:	4b2a      	ldr	r3, [pc, #168]	; (8002284 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021dc:	1d3c      	adds	r4, r7, #4
 80021de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021e4:	f240 2301 	movw	r3, #513	; 0x201
 80021e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	2300      	movs	r3, #0
 80021f0:	61bb      	str	r3, [r7, #24]
 80021f2:	2300      	movs	r3, #0
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021fe:	4b22      	ldr	r3, [pc, #136]	; (8002288 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f003 030c 	and.w	r3, r3, #12
 800220a:	2b04      	cmp	r3, #4
 800220c:	d002      	beq.n	8002214 <HAL_RCC_GetSysClockFreq+0x40>
 800220e:	2b08      	cmp	r3, #8
 8002210:	d003      	beq.n	800221a <HAL_RCC_GetSysClockFreq+0x46>
 8002212:	e02d      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002214:	4b1d      	ldr	r3, [pc, #116]	; (800228c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002216:	623b      	str	r3, [r7, #32]
      break;
 8002218:	e02d      	b.n	8002276 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	0c9b      	lsrs	r3, r3, #18
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002226:	4413      	add	r3, r2
 8002228:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800222c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d013      	beq.n	8002260 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002238:	4b13      	ldr	r3, [pc, #76]	; (8002288 <HAL_RCC_GetSysClockFreq+0xb4>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	0c5b      	lsrs	r3, r3, #17
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002246:	4413      	add	r3, r2
 8002248:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800224c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	4a0e      	ldr	r2, [pc, #56]	; (800228c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002252:	fb02 f203 	mul.w	r2, r2, r3
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	fbb2 f3f3 	udiv	r3, r2, r3
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
 800225e:	e004      	b.n	800226a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	4a0b      	ldr	r2, [pc, #44]	; (8002290 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002264:	fb02 f303 	mul.w	r3, r2, r3
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	623b      	str	r3, [r7, #32]
      break;
 800226e:	e002      	b.n	8002276 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002272:	623b      	str	r3, [r7, #32]
      break;
 8002274:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002276:	6a3b      	ldr	r3, [r7, #32]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3728      	adds	r7, #40	; 0x28
 800227c:	46bd      	mov	sp, r7
 800227e:	bc90      	pop	{r4, r7}
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	08002b08 	.word	0x08002b08
 8002288:	40021000 	.word	0x40021000
 800228c:	007a1200 	.word	0x007a1200
 8002290:	003d0900 	.word	0x003d0900

08002294 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <RCC_Delay+0x34>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <RCC_Delay+0x38>)
 80022a2:	fba2 2303 	umull	r2, r3, r2, r3
 80022a6:	0a5b      	lsrs	r3, r3, #9
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	fb02 f303 	mul.w	r3, r2, r3
 80022ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022b0:	bf00      	nop
  }
  while (Delay --);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1e5a      	subs	r2, r3, #1
 80022b6:	60fa      	str	r2, [r7, #12]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1f9      	bne.n	80022b0 <RCC_Delay+0x1c>
}
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr
 80022c8:	20000044 	.word	0x20000044
 80022cc:	10624dd3 	.word	0x10624dd3

080022d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e041      	b.n	8002366 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d106      	bne.n	80022fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff f866 	bl	80013c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2202      	movs	r2, #2
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3304      	adds	r3, #4
 800230c:	4619      	mov	r1, r3
 800230e:	4610      	mov	r0, r2
 8002310:	f000 fa6a 	bl	80027e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b01      	cmp	r3, #1
 8002382:	d001      	beq.n	8002388 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e035      	b.n	80023f4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68da      	ldr	r2, [r3, #12]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a16      	ldr	r2, [pc, #88]	; (8002400 <HAL_TIM_Base_Start_IT+0x90>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d009      	beq.n	80023be <HAL_TIM_Base_Start_IT+0x4e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b2:	d004      	beq.n	80023be <HAL_TIM_Base_Start_IT+0x4e>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a12      	ldr	r2, [pc, #72]	; (8002404 <HAL_TIM_Base_Start_IT+0x94>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d111      	bne.n	80023e2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2b06      	cmp	r3, #6
 80023ce:	d010      	beq.n	80023f2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023e0:	e007      	b.n	80023f2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f042 0201 	orr.w	r2, r2, #1
 80023f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40012c00 	.word	0x40012c00
 8002404:	40000400 	.word	0x40000400

08002408 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b02      	cmp	r3, #2
 800241c:	d122      	bne.n	8002464 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b02      	cmp	r3, #2
 800242a:	d11b      	bne.n	8002464 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f06f 0202 	mvn.w	r2, #2
 8002434:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f9b1 	bl	80027b2 <HAL_TIM_IC_CaptureCallback>
 8002450:	e005      	b.n	800245e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f9a4 	bl	80027a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f9b3 	bl	80027c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	2b04      	cmp	r3, #4
 8002470:	d122      	bne.n	80024b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b04      	cmp	r3, #4
 800247e:	d11b      	bne.n	80024b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0204 	mvn.w	r2, #4
 8002488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2202      	movs	r2, #2
 800248e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f987 	bl	80027b2 <HAL_TIM_IC_CaptureCallback>
 80024a4:	e005      	b.n	80024b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f97a 	bl	80027a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f989 	bl	80027c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d122      	bne.n	800250c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f003 0308 	and.w	r3, r3, #8
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d11b      	bne.n	800250c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f06f 0208 	mvn.w	r2, #8
 80024dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2204      	movs	r2, #4
 80024e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f95d 	bl	80027b2 <HAL_TIM_IC_CaptureCallback>
 80024f8:	e005      	b.n	8002506 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f950 	bl	80027a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f95f 	bl	80027c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f003 0310 	and.w	r3, r3, #16
 8002516:	2b10      	cmp	r3, #16
 8002518:	d122      	bne.n	8002560 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	2b10      	cmp	r3, #16
 8002526:	d11b      	bne.n	8002560 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f06f 0210 	mvn.w	r2, #16
 8002530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2208      	movs	r2, #8
 8002536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f933 	bl	80027b2 <HAL_TIM_IC_CaptureCallback>
 800254c:	e005      	b.n	800255a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f926 	bl	80027a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f935 	bl	80027c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b01      	cmp	r3, #1
 800256c:	d10e      	bne.n	800258c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b01      	cmp	r3, #1
 800257a:	d107      	bne.n	800258c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f06f 0201 	mvn.w	r2, #1
 8002584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7fe fe76 	bl	8001278 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002596:	2b80      	cmp	r3, #128	; 0x80
 8002598:	d10e      	bne.n	80025b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a4:	2b80      	cmp	r3, #128	; 0x80
 80025a6:	d107      	bne.n	80025b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fa67 	bl	8002a86 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c2:	2b40      	cmp	r3, #64	; 0x40
 80025c4:	d10e      	bne.n	80025e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d0:	2b40      	cmp	r3, #64	; 0x40
 80025d2:	d107      	bne.n	80025e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f8f9 	bl	80027d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f003 0320 	and.w	r3, r3, #32
 80025ee:	2b20      	cmp	r3, #32
 80025f0:	d10e      	bne.n	8002610 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f003 0320 	and.w	r3, r3, #32
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	d107      	bne.n	8002610 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f06f 0220 	mvn.w	r2, #32
 8002608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 fa32 	bl	8002a74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002610:	bf00      	nop
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <HAL_TIM_ConfigClockSource+0x18>
 800262c:	2302      	movs	r3, #2
 800262e:	e0b3      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x180>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800264e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002656:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002668:	d03e      	beq.n	80026e8 <HAL_TIM_ConfigClockSource+0xd0>
 800266a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800266e:	f200 8087 	bhi.w	8002780 <HAL_TIM_ConfigClockSource+0x168>
 8002672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002676:	f000 8085 	beq.w	8002784 <HAL_TIM_ConfigClockSource+0x16c>
 800267a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800267e:	d87f      	bhi.n	8002780 <HAL_TIM_ConfigClockSource+0x168>
 8002680:	2b70      	cmp	r3, #112	; 0x70
 8002682:	d01a      	beq.n	80026ba <HAL_TIM_ConfigClockSource+0xa2>
 8002684:	2b70      	cmp	r3, #112	; 0x70
 8002686:	d87b      	bhi.n	8002780 <HAL_TIM_ConfigClockSource+0x168>
 8002688:	2b60      	cmp	r3, #96	; 0x60
 800268a:	d050      	beq.n	800272e <HAL_TIM_ConfigClockSource+0x116>
 800268c:	2b60      	cmp	r3, #96	; 0x60
 800268e:	d877      	bhi.n	8002780 <HAL_TIM_ConfigClockSource+0x168>
 8002690:	2b50      	cmp	r3, #80	; 0x50
 8002692:	d03c      	beq.n	800270e <HAL_TIM_ConfigClockSource+0xf6>
 8002694:	2b50      	cmp	r3, #80	; 0x50
 8002696:	d873      	bhi.n	8002780 <HAL_TIM_ConfigClockSource+0x168>
 8002698:	2b40      	cmp	r3, #64	; 0x40
 800269a:	d058      	beq.n	800274e <HAL_TIM_ConfigClockSource+0x136>
 800269c:	2b40      	cmp	r3, #64	; 0x40
 800269e:	d86f      	bhi.n	8002780 <HAL_TIM_ConfigClockSource+0x168>
 80026a0:	2b30      	cmp	r3, #48	; 0x30
 80026a2:	d064      	beq.n	800276e <HAL_TIM_ConfigClockSource+0x156>
 80026a4:	2b30      	cmp	r3, #48	; 0x30
 80026a6:	d86b      	bhi.n	8002780 <HAL_TIM_ConfigClockSource+0x168>
 80026a8:	2b20      	cmp	r3, #32
 80026aa:	d060      	beq.n	800276e <HAL_TIM_ConfigClockSource+0x156>
 80026ac:	2b20      	cmp	r3, #32
 80026ae:	d867      	bhi.n	8002780 <HAL_TIM_ConfigClockSource+0x168>
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d05c      	beq.n	800276e <HAL_TIM_ConfigClockSource+0x156>
 80026b4:	2b10      	cmp	r3, #16
 80026b6:	d05a      	beq.n	800276e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80026b8:	e062      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6818      	ldr	r0, [r3, #0]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	6899      	ldr	r1, [r3, #8]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f000 f95c 	bl	8002986 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	609a      	str	r2, [r3, #8]
      break;
 80026e6:	e04e      	b.n	8002786 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6818      	ldr	r0, [r3, #0]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	6899      	ldr	r1, [r3, #8]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f000 f945 	bl	8002986 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800270a:	609a      	str	r2, [r3, #8]
      break;
 800270c:	e03b      	b.n	8002786 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6818      	ldr	r0, [r3, #0]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	6859      	ldr	r1, [r3, #4]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	461a      	mov	r2, r3
 800271c:	f000 f8bc 	bl	8002898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2150      	movs	r1, #80	; 0x50
 8002726:	4618      	mov	r0, r3
 8002728:	f000 f913 	bl	8002952 <TIM_ITRx_SetConfig>
      break;
 800272c:	e02b      	b.n	8002786 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6818      	ldr	r0, [r3, #0]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	6859      	ldr	r1, [r3, #4]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	461a      	mov	r2, r3
 800273c:	f000 f8da 	bl	80028f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2160      	movs	r1, #96	; 0x60
 8002746:	4618      	mov	r0, r3
 8002748:	f000 f903 	bl	8002952 <TIM_ITRx_SetConfig>
      break;
 800274c:	e01b      	b.n	8002786 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	6859      	ldr	r1, [r3, #4]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	461a      	mov	r2, r3
 800275c:	f000 f89c 	bl	8002898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2140      	movs	r1, #64	; 0x40
 8002766:	4618      	mov	r0, r3
 8002768:	f000 f8f3 	bl	8002952 <TIM_ITRx_SetConfig>
      break;
 800276c:	e00b      	b.n	8002786 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4619      	mov	r1, r3
 8002778:	4610      	mov	r0, r2
 800277a:	f000 f8ea 	bl	8002952 <TIM_ITRx_SetConfig>
        break;
 800277e:	e002      	b.n	8002786 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002780:	bf00      	nop
 8002782:	e000      	b.n	8002786 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002784:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr

080027d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a25      	ldr	r2, [pc, #148]	; (8002890 <TIM_Base_SetConfig+0xa8>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d007      	beq.n	8002810 <TIM_Base_SetConfig+0x28>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002806:	d003      	beq.n	8002810 <TIM_Base_SetConfig+0x28>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a22      	ldr	r2, [pc, #136]	; (8002894 <TIM_Base_SetConfig+0xac>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d108      	bne.n	8002822 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002816:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	4313      	orrs	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a1a      	ldr	r2, [pc, #104]	; (8002890 <TIM_Base_SetConfig+0xa8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d007      	beq.n	800283a <TIM_Base_SetConfig+0x52>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002830:	d003      	beq.n	800283a <TIM_Base_SetConfig+0x52>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a17      	ldr	r2, [pc, #92]	; (8002894 <TIM_Base_SetConfig+0xac>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d108      	bne.n	800284c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	4313      	orrs	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	4313      	orrs	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a07      	ldr	r2, [pc, #28]	; (8002890 <TIM_Base_SetConfig+0xa8>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d103      	bne.n	8002880 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	615a      	str	r2, [r3, #20]
}
 8002886:	bf00      	nop
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr
 8002890:	40012c00 	.word	0x40012c00
 8002894:	40000400 	.word	0x40000400

08002898 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002898:	b480      	push	{r7}
 800289a:	b087      	sub	sp, #28
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	f023 0201 	bic.w	r2, r3, #1
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f023 030a 	bic.w	r3, r3, #10
 80028d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4313      	orrs	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	621a      	str	r2, [r3, #32]
}
 80028ea:	bf00      	nop
 80028ec:	371c      	adds	r7, #28
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr

080028f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	f023 0210 	bic.w	r2, r3, #16
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800291e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	031b      	lsls	r3, r3, #12
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	4313      	orrs	r3, r2
 8002928:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002930:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	621a      	str	r2, [r3, #32]
}
 8002948:	bf00      	nop
 800294a:	371c      	adds	r7, #28
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr

08002952 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002952:	b480      	push	{r7}
 8002954:	b085      	sub	sp, #20
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002968:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4313      	orrs	r3, r2
 8002970:	f043 0307 	orr.w	r3, r3, #7
 8002974:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	609a      	str	r2, [r3, #8]
}
 800297c:	bf00      	nop
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002986:	b480      	push	{r7}
 8002988:	b087      	sub	sp, #28
 800298a:	af00      	add	r7, sp, #0
 800298c:	60f8      	str	r0, [r7, #12]
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
 8002992:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	021a      	lsls	r2, r3, #8
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	431a      	orrs	r2, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	609a      	str	r2, [r3, #8]
}
 80029ba:	bf00      	nop
 80029bc:	371c      	adds	r7, #28
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029d8:	2302      	movs	r3, #2
 80029da:	e041      	b.n	8002a60 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a14      	ldr	r2, [pc, #80]	; (8002a6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d009      	beq.n	8002a34 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a28:	d004      	beq.n	8002a34 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a10      	ldr	r2, [pc, #64]	; (8002a70 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d10c      	bne.n	8002a4e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40012c00 	.word	0x40012c00
 8002a70:	40000400 	.word	0x40000400

08002a74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr

08002a86 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr

08002a98 <__libc_init_array>:
 8002a98:	b570      	push	{r4, r5, r6, lr}
 8002a9a:	2600      	movs	r6, #0
 8002a9c:	4d0c      	ldr	r5, [pc, #48]	; (8002ad0 <__libc_init_array+0x38>)
 8002a9e:	4c0d      	ldr	r4, [pc, #52]	; (8002ad4 <__libc_init_array+0x3c>)
 8002aa0:	1b64      	subs	r4, r4, r5
 8002aa2:	10a4      	asrs	r4, r4, #2
 8002aa4:	42a6      	cmp	r6, r4
 8002aa6:	d109      	bne.n	8002abc <__libc_init_array+0x24>
 8002aa8:	f000 f822 	bl	8002af0 <_init>
 8002aac:	2600      	movs	r6, #0
 8002aae:	4d0a      	ldr	r5, [pc, #40]	; (8002ad8 <__libc_init_array+0x40>)
 8002ab0:	4c0a      	ldr	r4, [pc, #40]	; (8002adc <__libc_init_array+0x44>)
 8002ab2:	1b64      	subs	r4, r4, r5
 8002ab4:	10a4      	asrs	r4, r4, #2
 8002ab6:	42a6      	cmp	r6, r4
 8002ab8:	d105      	bne.n	8002ac6 <__libc_init_array+0x2e>
 8002aba:	bd70      	pop	{r4, r5, r6, pc}
 8002abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ac0:	4798      	blx	r3
 8002ac2:	3601      	adds	r6, #1
 8002ac4:	e7ee      	b.n	8002aa4 <__libc_init_array+0xc>
 8002ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aca:	4798      	blx	r3
 8002acc:	3601      	adds	r6, #1
 8002ace:	e7f2      	b.n	8002ab6 <__libc_init_array+0x1e>
 8002ad0:	08002b28 	.word	0x08002b28
 8002ad4:	08002b28 	.word	0x08002b28
 8002ad8:	08002b28 	.word	0x08002b28
 8002adc:	08002b2c 	.word	0x08002b2c

08002ae0 <memset>:
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	4402      	add	r2, r0
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d100      	bne.n	8002aea <memset+0xa>
 8002ae8:	4770      	bx	lr
 8002aea:	f803 1b01 	strb.w	r1, [r3], #1
 8002aee:	e7f9      	b.n	8002ae4 <memset+0x4>

08002af0 <_init>:
 8002af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af2:	bf00      	nop
 8002af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002af6:	bc08      	pop	{r3}
 8002af8:	469e      	mov	lr, r3
 8002afa:	4770      	bx	lr

08002afc <_fini>:
 8002afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002afe:	bf00      	nop
 8002b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b02:	bc08      	pop	{r3}
 8002b04:	469e      	mov	lr, r3
 8002b06:	4770      	bx	lr
