
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002990  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002a9c  08002a9c  00012a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002abc  08002abc  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08002abc  08002abc  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002abc  08002abc  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002abc  08002abc  00012abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ac0  08002ac0  00012ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08002ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000058  08002b1c  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08002b1c  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009070  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019f3  00000000  00000000  000290f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  0002aae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002b500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a87  00000000  00000000  0002be18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b133  00000000  00000000  0004289f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082155  00000000  00000000  0004d9d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cfb27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027ec  00000000  00000000  000cfb7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000058 	.word	0x20000058
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a84 	.word	0x08002a84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000005c 	.word	0x2000005c
 8000148:	08002a84 	.word	0x08002a84

0800014c <isButton1Pressed>:

int KeyReg3[3] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int TimerForKeyPress[3] = {300, 300, 300};

//button1 = MODE, button2 = INC, button3 = SET
int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000074 	.word	0x20000074

08000170 <isButton2Pressed>:

int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000078 	.word	0x20000078

08000194 <isButton3Pressed>:

int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	2000007c 	.word	0x2000007c

080001b8 <subKeyProcess>:

void subKeyProcess(int i){
 80001b8:	b480      	push	{r7}
 80001ba:	b083      	sub	sp, #12
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
	switch(i){
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	2b02      	cmp	r3, #2
 80001c4:	d011      	beq.n	80001ea <subKeyProcess+0x32>
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2b02      	cmp	r3, #2
 80001ca:	dc12      	bgt.n	80001f2 <subKeyProcess+0x3a>
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d003      	beq.n	80001da <subKeyProcess+0x22>
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	2b01      	cmp	r3, #1
 80001d6:	d004      	beq.n	80001e2 <subKeyProcess+0x2a>
		break;
	case 2:
		button3_flag = 1;
		break;
	default:
		break;
 80001d8:	e00b      	b.n	80001f2 <subKeyProcess+0x3a>
		button1_flag = 1;
 80001da:	4b09      	ldr	r3, [pc, #36]	; (8000200 <subKeyProcess+0x48>)
 80001dc:	2201      	movs	r2, #1
 80001de:	601a      	str	r2, [r3, #0]
		break;
 80001e0:	e008      	b.n	80001f4 <subKeyProcess+0x3c>
		button2_flag = 1;
 80001e2:	4b08      	ldr	r3, [pc, #32]	; (8000204 <subKeyProcess+0x4c>)
 80001e4:	2201      	movs	r2, #1
 80001e6:	601a      	str	r2, [r3, #0]
		break;
 80001e8:	e004      	b.n	80001f4 <subKeyProcess+0x3c>
		button3_flag = 1;
 80001ea:	4b07      	ldr	r3, [pc, #28]	; (8000208 <subKeyProcess+0x50>)
 80001ec:	2201      	movs	r2, #1
 80001ee:	601a      	str	r2, [r3, #0]
		break;
 80001f0:	e000      	b.n	80001f4 <subKeyProcess+0x3c>
		break;
 80001f2:	bf00      	nop
	}
}
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	20000074 	.word	0x20000074
 8000204:	20000078 	.word	0x20000078
 8000208:	2000007c 	.word	0x2000007c

0800020c <getKeyInput>:


void getKeyInput(){
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
	for(int i = 0; i < 3; i++){
 8000212:	2300      	movs	r3, #0
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	e088      	b.n	800032a <getKeyInput+0x11e>
		KeyReg0[i] = KeyReg1[i];
 8000218:	4a48      	ldr	r2, [pc, #288]	; (800033c <getKeyInput+0x130>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	4947      	ldr	r1, [pc, #284]	; (8000340 <getKeyInput+0x134>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000228:	4a46      	ldr	r2, [pc, #280]	; (8000344 <getKeyInput+0x138>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000230:	4942      	ldr	r1, [pc, #264]	; (800033c <getKeyInput+0x130>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(i == 0){
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d10b      	bne.n	8000256 <getKeyInput+0x4a>
			KeyReg2[i] = HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin);
 800023e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000242:	4841      	ldr	r0, [pc, #260]	; (8000348 <getKeyInput+0x13c>)
 8000244:	f001 fbde 	bl	8001a04 <HAL_GPIO_ReadPin>
 8000248:	4603      	mov	r3, r0
 800024a:	4619      	mov	r1, r3
 800024c:	4a3d      	ldr	r2, [pc, #244]	; (8000344 <getKeyInput+0x138>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000254:	e01c      	b.n	8000290 <getKeyInput+0x84>
		}
		else if(i == 1){
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2b01      	cmp	r3, #1
 800025a:	d10b      	bne.n	8000274 <getKeyInput+0x68>
			KeyReg2[i] = HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin);
 800025c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000260:	4839      	ldr	r0, [pc, #228]	; (8000348 <getKeyInput+0x13c>)
 8000262:	f001 fbcf 	bl	8001a04 <HAL_GPIO_ReadPin>
 8000266:	4603      	mov	r3, r0
 8000268:	4619      	mov	r1, r3
 800026a:	4a36      	ldr	r2, [pc, #216]	; (8000344 <getKeyInput+0x138>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000272:	e00d      	b.n	8000290 <getKeyInput+0x84>
		}
		else if(i == 2){
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2b02      	cmp	r3, #2
 8000278:	d10a      	bne.n	8000290 <getKeyInput+0x84>
			KeyReg2[i] = HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin);
 800027a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800027e:	4832      	ldr	r0, [pc, #200]	; (8000348 <getKeyInput+0x13c>)
 8000280:	f001 fbc0 	bl	8001a04 <HAL_GPIO_ReadPin>
 8000284:	4603      	mov	r3, r0
 8000286:	4619      	mov	r1, r3
 8000288:	4a2e      	ldr	r2, [pc, #184]	; (8000344 <getKeyInput+0x138>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		if((KeyReg0[i] == KeyReg1[i]) && ( KeyReg1[i] == KeyReg2[i])){
 8000290:	4a2b      	ldr	r2, [pc, #172]	; (8000340 <getKeyInput+0x134>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000298:	4928      	ldr	r1, [pc, #160]	; (800033c <getKeyInput+0x130>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002a0:	429a      	cmp	r2, r3
 80002a2:	d13f      	bne.n	8000324 <getKeyInput+0x118>
 80002a4:	4a25      	ldr	r2, [pc, #148]	; (800033c <getKeyInput+0x130>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ac:	4925      	ldr	r1, [pc, #148]	; (8000344 <getKeyInput+0x138>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002b4:	429a      	cmp	r2, r3
 80002b6:	d135      	bne.n	8000324 <getKeyInput+0x118>
			if(KeyReg3[i] != KeyReg2[i]){
 80002b8:	4a24      	ldr	r2, [pc, #144]	; (800034c <getKeyInput+0x140>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002c0:	4920      	ldr	r1, [pc, #128]	; (8000344 <getKeyInput+0x138>)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	d017      	beq.n	80002fc <getKeyInput+0xf0>
				//button debouncing
				KeyReg3[i] = KeyReg2[i];
 80002cc:	4a1d      	ldr	r2, [pc, #116]	; (8000344 <getKeyInput+0x138>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002d4:	491d      	ldr	r1, [pc, #116]	; (800034c <getKeyInput+0x140>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(KeyReg2[i] == PRESSED_STATE){
 80002dc:	4a19      	ldr	r2, [pc, #100]	; (8000344 <getKeyInput+0x138>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d11d      	bne.n	8000324 <getKeyInput+0x118>
					subKeyProcess(i);
 80002e8:	6878      	ldr	r0, [r7, #4]
 80002ea:	f7ff ff65 	bl	80001b8 <subKeyProcess>
					TimerForKeyPress[i] = 300;
 80002ee:	4a18      	ldr	r2, [pc, #96]	; (8000350 <getKeyInput+0x144>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80002f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002fa:	e013      	b.n	8000324 <getKeyInput+0x118>
				}
			}
			else{
				//handle the long press behavior
				TimerForKeyPress[i]--;
 80002fc:	4a14      	ldr	r2, [pc, #80]	; (8000350 <getKeyInput+0x144>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000304:	1e5a      	subs	r2, r3, #1
 8000306:	4912      	ldr	r1, [pc, #72]	; (8000350 <getKeyInput+0x144>)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimerForKeyPress[i] == 0){
 800030e:	4a10      	ldr	r2, [pc, #64]	; (8000350 <getKeyInput+0x144>)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d104      	bne.n	8000324 <getKeyInput+0x118>
					KeyReg3[i] = NORMAL_STATE;
 800031a:	4a0c      	ldr	r2, [pc, #48]	; (800034c <getKeyInput+0x140>)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2101      	movs	r1, #1
 8000320:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < 3; i++){
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	3301      	adds	r3, #1
 8000328:	607b      	str	r3, [r7, #4]
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	2b02      	cmp	r3, #2
 800032e:	f77f af73 	ble.w	8000218 <getKeyInput+0xc>
				}
			}
		}
	}

}
 8000332:	bf00      	nop
 8000334:	bf00      	nop
 8000336:	3708      	adds	r7, #8
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	2000000c 	.word	0x2000000c
 8000340:	20000000 	.word	0x20000000
 8000344:	20000018 	.word	0x20000018
 8000348:	40010c00 	.word	0x40010c00
 800034c:	20000024 	.word	0x20000024
 8000350:	20000030 	.word	0x20000030

08000354 <updateClockBuffer>:

const int MAX_LED = 7;
int index_led = 0;
int led_buffer[7] = {0,0,0,0,0,0,0};
//ex5
void updateClockBuffer(){
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
    led_buffer[0] = Horizontal_TrafficLight%10;
 8000358:	4b29      	ldr	r3, [pc, #164]	; (8000400 <updateClockBuffer+0xac>)
 800035a:	6819      	ldr	r1, [r3, #0]
 800035c:	4b29      	ldr	r3, [pc, #164]	; (8000404 <updateClockBuffer+0xb0>)
 800035e:	fb83 2301 	smull	r2, r3, r3, r1
 8000362:	109a      	asrs	r2, r3, #2
 8000364:	17cb      	asrs	r3, r1, #31
 8000366:	1ad2      	subs	r2, r2, r3
 8000368:	4613      	mov	r3, r2
 800036a:	009b      	lsls	r3, r3, #2
 800036c:	4413      	add	r3, r2
 800036e:	005b      	lsls	r3, r3, #1
 8000370:	1aca      	subs	r2, r1, r3
 8000372:	4b25      	ldr	r3, [pc, #148]	; (8000408 <updateClockBuffer+0xb4>)
 8000374:	601a      	str	r2, [r3, #0]
    led_buffer[1] = Horizontal_TrafficLight/10;
 8000376:	4b22      	ldr	r3, [pc, #136]	; (8000400 <updateClockBuffer+0xac>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a22      	ldr	r2, [pc, #136]	; (8000404 <updateClockBuffer+0xb0>)
 800037c:	fb82 1203 	smull	r1, r2, r2, r3
 8000380:	1092      	asrs	r2, r2, #2
 8000382:	17db      	asrs	r3, r3, #31
 8000384:	1ad3      	subs	r3, r2, r3
 8000386:	4a20      	ldr	r2, [pc, #128]	; (8000408 <updateClockBuffer+0xb4>)
 8000388:	6053      	str	r3, [r2, #4]
    led_buffer[2] = Vertical_TrafficLight%10;
 800038a:	4b20      	ldr	r3, [pc, #128]	; (800040c <updateClockBuffer+0xb8>)
 800038c:	6819      	ldr	r1, [r3, #0]
 800038e:	4b1d      	ldr	r3, [pc, #116]	; (8000404 <updateClockBuffer+0xb0>)
 8000390:	fb83 2301 	smull	r2, r3, r3, r1
 8000394:	109a      	asrs	r2, r3, #2
 8000396:	17cb      	asrs	r3, r1, #31
 8000398:	1ad2      	subs	r2, r2, r3
 800039a:	4613      	mov	r3, r2
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	4413      	add	r3, r2
 80003a0:	005b      	lsls	r3, r3, #1
 80003a2:	1aca      	subs	r2, r1, r3
 80003a4:	4b18      	ldr	r3, [pc, #96]	; (8000408 <updateClockBuffer+0xb4>)
 80003a6:	609a      	str	r2, [r3, #8]
    led_buffer[3] = Vertical_TrafficLight/10;
 80003a8:	4b18      	ldr	r3, [pc, #96]	; (800040c <updateClockBuffer+0xb8>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a15      	ldr	r2, [pc, #84]	; (8000404 <updateClockBuffer+0xb0>)
 80003ae:	fb82 1203 	smull	r1, r2, r2, r3
 80003b2:	1092      	asrs	r2, r2, #2
 80003b4:	17db      	asrs	r3, r3, #31
 80003b6:	1ad3      	subs	r3, r2, r3
 80003b8:	4a13      	ldr	r2, [pc, #76]	; (8000408 <updateClockBuffer+0xb4>)
 80003ba:	60d3      	str	r3, [r2, #12]
    led_buffer[4] = ModeValue;
 80003bc:	4b14      	ldr	r3, [pc, #80]	; (8000410 <updateClockBuffer+0xbc>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a11      	ldr	r2, [pc, #68]	; (8000408 <updateClockBuffer+0xb4>)
 80003c2:	6113      	str	r3, [r2, #16]
    led_buffer[5] = Set_time/10;
 80003c4:	4b13      	ldr	r3, [pc, #76]	; (8000414 <updateClockBuffer+0xc0>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a0e      	ldr	r2, [pc, #56]	; (8000404 <updateClockBuffer+0xb0>)
 80003ca:	fb82 1203 	smull	r1, r2, r2, r3
 80003ce:	1092      	asrs	r2, r2, #2
 80003d0:	17db      	asrs	r3, r3, #31
 80003d2:	1ad3      	subs	r3, r2, r3
 80003d4:	4a0c      	ldr	r2, [pc, #48]	; (8000408 <updateClockBuffer+0xb4>)
 80003d6:	6153      	str	r3, [r2, #20]
    led_buffer[6] = Set_time%10;
 80003d8:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <updateClockBuffer+0xc0>)
 80003da:	6819      	ldr	r1, [r3, #0]
 80003dc:	4b09      	ldr	r3, [pc, #36]	; (8000404 <updateClockBuffer+0xb0>)
 80003de:	fb83 2301 	smull	r2, r3, r3, r1
 80003e2:	109a      	asrs	r2, r3, #2
 80003e4:	17cb      	asrs	r3, r1, #31
 80003e6:	1ad2      	subs	r2, r2, r3
 80003e8:	4613      	mov	r3, r2
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	4413      	add	r3, r2
 80003ee:	005b      	lsls	r3, r3, #1
 80003f0:	1aca      	subs	r2, r1, r3
 80003f2:	4b05      	ldr	r3, [pc, #20]	; (8000408 <updateClockBuffer+0xb4>)
 80003f4:	619a      	str	r2, [r3, #24]
    case 4:
    	led_buffer[5] = GREEN_Time_value/10;
        led_buffer[6] = GREEN_Time_value%10;
       	break;
    }**/
}
 80003f6:	bf00      	nop
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	200000ac 	.word	0x200000ac
 8000404:	66666667 	.word	0x66666667
 8000408:	20000080 	.word	0x20000080
 800040c:	200000b0 	.word	0x200000b0
 8000410:	200000b4 	.word	0x200000b4
 8000414:	200000b8 	.word	0x200000b8

08000418 <update7SEG>:

void update7SEG(int index){
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	2b06      	cmp	r3, #6
 8000424:	f200 814d 	bhi.w	80006c2 <update7SEG+0x2aa>
 8000428:	a201      	add	r2, pc, #4	; (adr r2, 8000430 <update7SEG+0x18>)
 800042a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800042e:	bf00      	nop
 8000430:	0800044d 	.word	0x0800044d
 8000434:	080004a7 	.word	0x080004a7
 8000438:	08000501 	.word	0x08000501
 800043c:	0800055b 	.word	0x0800055b
 8000440:	080005b5 	.word	0x080005b5
 8000444:	0800060f 	.word	0x0800060f
 8000448:	08000669 	.word	0x08000669
	switch(index){
	case 0:
		HAL_GPIO_WritePin ( EN1_GPIO_Port , EN1_Pin , GPIO_PIN_RESET ) ;
 800044c:	2200      	movs	r2, #0
 800044e:	2120      	movs	r1, #32
 8000450:	489e      	ldr	r0, [pc, #632]	; (80006cc <update7SEG+0x2b4>)
 8000452:	f001 faee 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN2_GPIO_Port , EN2_Pin , GPIO_PIN_SET ) ;
 8000456:	2201      	movs	r2, #1
 8000458:	2140      	movs	r1, #64	; 0x40
 800045a:	489c      	ldr	r0, [pc, #624]	; (80006cc <update7SEG+0x2b4>)
 800045c:	f001 fae9 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN3_GPIO_Port , EN3_Pin , GPIO_PIN_SET ) ;
 8000460:	2201      	movs	r2, #1
 8000462:	2180      	movs	r1, #128	; 0x80
 8000464:	4899      	ldr	r0, [pc, #612]	; (80006cc <update7SEG+0x2b4>)
 8000466:	f001 fae4 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN4_GPIO_Port , EN4_Pin , GPIO_PIN_SET ) ;
 800046a:	2201      	movs	r2, #1
 800046c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000470:	4896      	ldr	r0, [pc, #600]	; (80006cc <update7SEG+0x2b4>)
 8000472:	f001 fade 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN5_GPIO_Port , EN5_Pin , GPIO_PIN_SET ) ;
 8000476:	2201      	movs	r2, #1
 8000478:	f44f 7100 	mov.w	r1, #512	; 0x200
 800047c:	4893      	ldr	r0, [pc, #588]	; (80006cc <update7SEG+0x2b4>)
 800047e:	f001 fad8 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN6_GPIO_Port , EN6_Pin , GPIO_PIN_SET ) ;
 8000482:	2201      	movs	r2, #1
 8000484:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000488:	4891      	ldr	r0, [pc, #580]	; (80006d0 <update7SEG+0x2b8>)
 800048a:	f001 fad2 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN7_GPIO_Port , EN7_Pin , GPIO_PIN_SET ) ;
 800048e:	2201      	movs	r2, #1
 8000490:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000494:	488e      	ldr	r0, [pc, #568]	; (80006d0 <update7SEG+0x2b8>)
 8000496:	f001 facc 	bl	8001a32 <HAL_GPIO_WritePin>
		display7Seg(led_buffer[0]);
 800049a:	4b8e      	ldr	r3, [pc, #568]	; (80006d4 <update7SEG+0x2bc>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4618      	mov	r0, r3
 80004a0:	f000 f91a 	bl	80006d8 <display7Seg>
		break;
 80004a4:	e10e      	b.n	80006c4 <update7SEG+0x2ac>
	case 1:
		HAL_GPIO_WritePin ( EN1_GPIO_Port , EN1_Pin , GPIO_PIN_SET ) ;
 80004a6:	2201      	movs	r2, #1
 80004a8:	2120      	movs	r1, #32
 80004aa:	4888      	ldr	r0, [pc, #544]	; (80006cc <update7SEG+0x2b4>)
 80004ac:	f001 fac1 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN2_GPIO_Port , EN2_Pin , GPIO_PIN_RESET ) ;
 80004b0:	2200      	movs	r2, #0
 80004b2:	2140      	movs	r1, #64	; 0x40
 80004b4:	4885      	ldr	r0, [pc, #532]	; (80006cc <update7SEG+0x2b4>)
 80004b6:	f001 fabc 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN3_GPIO_Port , EN3_Pin , GPIO_PIN_SET ) ;
 80004ba:	2201      	movs	r2, #1
 80004bc:	2180      	movs	r1, #128	; 0x80
 80004be:	4883      	ldr	r0, [pc, #524]	; (80006cc <update7SEG+0x2b4>)
 80004c0:	f001 fab7 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN4_GPIO_Port , EN4_Pin , GPIO_PIN_SET ) ;
 80004c4:	2201      	movs	r2, #1
 80004c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ca:	4880      	ldr	r0, [pc, #512]	; (80006cc <update7SEG+0x2b4>)
 80004cc:	f001 fab1 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN5_GPIO_Port , EN5_Pin , GPIO_PIN_SET ) ;
 80004d0:	2201      	movs	r2, #1
 80004d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004d6:	487d      	ldr	r0, [pc, #500]	; (80006cc <update7SEG+0x2b4>)
 80004d8:	f001 faab 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN6_GPIO_Port , EN6_Pin , GPIO_PIN_SET ) ;
 80004dc:	2201      	movs	r2, #1
 80004de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004e2:	487b      	ldr	r0, [pc, #492]	; (80006d0 <update7SEG+0x2b8>)
 80004e4:	f001 faa5 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN7_GPIO_Port , EN7_Pin , GPIO_PIN_SET ) ;
 80004e8:	2201      	movs	r2, #1
 80004ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004ee:	4878      	ldr	r0, [pc, #480]	; (80006d0 <update7SEG+0x2b8>)
 80004f0:	f001 fa9f 	bl	8001a32 <HAL_GPIO_WritePin>
		display7Seg(led_buffer[1]);
 80004f4:	4b77      	ldr	r3, [pc, #476]	; (80006d4 <update7SEG+0x2bc>)
 80004f6:	685b      	ldr	r3, [r3, #4]
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 f8ed 	bl	80006d8 <display7Seg>
		break;
 80004fe:	e0e1      	b.n	80006c4 <update7SEG+0x2ac>
	case 2:
		HAL_GPIO_WritePin ( EN1_GPIO_Port , EN1_Pin , GPIO_PIN_SET ) ;
 8000500:	2201      	movs	r2, #1
 8000502:	2120      	movs	r1, #32
 8000504:	4871      	ldr	r0, [pc, #452]	; (80006cc <update7SEG+0x2b4>)
 8000506:	f001 fa94 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN2_GPIO_Port , EN2_Pin , GPIO_PIN_SET ) ;
 800050a:	2201      	movs	r2, #1
 800050c:	2140      	movs	r1, #64	; 0x40
 800050e:	486f      	ldr	r0, [pc, #444]	; (80006cc <update7SEG+0x2b4>)
 8000510:	f001 fa8f 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN3_GPIO_Port , EN3_Pin , GPIO_PIN_RESET ) ;
 8000514:	2200      	movs	r2, #0
 8000516:	2180      	movs	r1, #128	; 0x80
 8000518:	486c      	ldr	r0, [pc, #432]	; (80006cc <update7SEG+0x2b4>)
 800051a:	f001 fa8a 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN4_GPIO_Port , EN4_Pin , GPIO_PIN_SET ) ;
 800051e:	2201      	movs	r2, #1
 8000520:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000524:	4869      	ldr	r0, [pc, #420]	; (80006cc <update7SEG+0x2b4>)
 8000526:	f001 fa84 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN5_GPIO_Port , EN5_Pin , GPIO_PIN_SET ) ;
 800052a:	2201      	movs	r2, #1
 800052c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000530:	4866      	ldr	r0, [pc, #408]	; (80006cc <update7SEG+0x2b4>)
 8000532:	f001 fa7e 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN6_GPIO_Port , EN6_Pin , GPIO_PIN_SET ) ;
 8000536:	2201      	movs	r2, #1
 8000538:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800053c:	4864      	ldr	r0, [pc, #400]	; (80006d0 <update7SEG+0x2b8>)
 800053e:	f001 fa78 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN7_GPIO_Port , EN7_Pin , GPIO_PIN_SET ) ;
 8000542:	2201      	movs	r2, #1
 8000544:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000548:	4861      	ldr	r0, [pc, #388]	; (80006d0 <update7SEG+0x2b8>)
 800054a:	f001 fa72 	bl	8001a32 <HAL_GPIO_WritePin>
		display7Seg(led_buffer[2]);
 800054e:	4b61      	ldr	r3, [pc, #388]	; (80006d4 <update7SEG+0x2bc>)
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f8c0 	bl	80006d8 <display7Seg>
		break;
 8000558:	e0b4      	b.n	80006c4 <update7SEG+0x2ac>
	case 3:
		HAL_GPIO_WritePin ( EN1_GPIO_Port , EN1_Pin , GPIO_PIN_SET ) ;
 800055a:	2201      	movs	r2, #1
 800055c:	2120      	movs	r1, #32
 800055e:	485b      	ldr	r0, [pc, #364]	; (80006cc <update7SEG+0x2b4>)
 8000560:	f001 fa67 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN2_GPIO_Port , EN2_Pin , GPIO_PIN_SET ) ;
 8000564:	2201      	movs	r2, #1
 8000566:	2140      	movs	r1, #64	; 0x40
 8000568:	4858      	ldr	r0, [pc, #352]	; (80006cc <update7SEG+0x2b4>)
 800056a:	f001 fa62 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN3_GPIO_Port , EN3_Pin , GPIO_PIN_SET ) ;
 800056e:	2201      	movs	r2, #1
 8000570:	2180      	movs	r1, #128	; 0x80
 8000572:	4856      	ldr	r0, [pc, #344]	; (80006cc <update7SEG+0x2b4>)
 8000574:	f001 fa5d 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN4_GPIO_Port , EN4_Pin , GPIO_PIN_RESET ) ;
 8000578:	2200      	movs	r2, #0
 800057a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800057e:	4853      	ldr	r0, [pc, #332]	; (80006cc <update7SEG+0x2b4>)
 8000580:	f001 fa57 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN5_GPIO_Port , EN5_Pin , GPIO_PIN_SET ) ;
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 7100 	mov.w	r1, #512	; 0x200
 800058a:	4850      	ldr	r0, [pc, #320]	; (80006cc <update7SEG+0x2b4>)
 800058c:	f001 fa51 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN6_GPIO_Port , EN6_Pin , GPIO_PIN_SET ) ;
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000596:	484e      	ldr	r0, [pc, #312]	; (80006d0 <update7SEG+0x2b8>)
 8000598:	f001 fa4b 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN7_GPIO_Port , EN7_Pin , GPIO_PIN_SET ) ;
 800059c:	2201      	movs	r2, #1
 800059e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a2:	484b      	ldr	r0, [pc, #300]	; (80006d0 <update7SEG+0x2b8>)
 80005a4:	f001 fa45 	bl	8001a32 <HAL_GPIO_WritePin>
		display7Seg(led_buffer[3]);
 80005a8:	4b4a      	ldr	r3, [pc, #296]	; (80006d4 <update7SEG+0x2bc>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 f893 	bl	80006d8 <display7Seg>
		break;
 80005b2:	e087      	b.n	80006c4 <update7SEG+0x2ac>
	case 4:
		HAL_GPIO_WritePin ( EN1_GPIO_Port , EN1_Pin , GPIO_PIN_SET ) ;
 80005b4:	2201      	movs	r2, #1
 80005b6:	2120      	movs	r1, #32
 80005b8:	4844      	ldr	r0, [pc, #272]	; (80006cc <update7SEG+0x2b4>)
 80005ba:	f001 fa3a 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN2_GPIO_Port , EN2_Pin , GPIO_PIN_SET ) ;
 80005be:	2201      	movs	r2, #1
 80005c0:	2140      	movs	r1, #64	; 0x40
 80005c2:	4842      	ldr	r0, [pc, #264]	; (80006cc <update7SEG+0x2b4>)
 80005c4:	f001 fa35 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN3_GPIO_Port , EN3_Pin , GPIO_PIN_SET ) ;
 80005c8:	2201      	movs	r2, #1
 80005ca:	2180      	movs	r1, #128	; 0x80
 80005cc:	483f      	ldr	r0, [pc, #252]	; (80006cc <update7SEG+0x2b4>)
 80005ce:	f001 fa30 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN4_GPIO_Port , EN4_Pin , GPIO_PIN_SET ) ;
 80005d2:	2201      	movs	r2, #1
 80005d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d8:	483c      	ldr	r0, [pc, #240]	; (80006cc <update7SEG+0x2b4>)
 80005da:	f001 fa2a 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN5_GPIO_Port , EN5_Pin , GPIO_PIN_RESET ) ;
 80005de:	2200      	movs	r2, #0
 80005e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e4:	4839      	ldr	r0, [pc, #228]	; (80006cc <update7SEG+0x2b4>)
 80005e6:	f001 fa24 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN6_GPIO_Port , EN6_Pin , GPIO_PIN_SET ) ;
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f0:	4837      	ldr	r0, [pc, #220]	; (80006d0 <update7SEG+0x2b8>)
 80005f2:	f001 fa1e 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN7_GPIO_Port , EN7_Pin , GPIO_PIN_SET ) ;
 80005f6:	2201      	movs	r2, #1
 80005f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005fc:	4834      	ldr	r0, [pc, #208]	; (80006d0 <update7SEG+0x2b8>)
 80005fe:	f001 fa18 	bl	8001a32 <HAL_GPIO_WritePin>
		display7Seg(led_buffer[4]);
 8000602:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <update7SEG+0x2bc>)
 8000604:	691b      	ldr	r3, [r3, #16]
 8000606:	4618      	mov	r0, r3
 8000608:	f000 f866 	bl	80006d8 <display7Seg>
		break;
 800060c:	e05a      	b.n	80006c4 <update7SEG+0x2ac>
	case 5:
		HAL_GPIO_WritePin ( EN1_GPIO_Port , EN1_Pin , GPIO_PIN_SET ) ;
 800060e:	2201      	movs	r2, #1
 8000610:	2120      	movs	r1, #32
 8000612:	482e      	ldr	r0, [pc, #184]	; (80006cc <update7SEG+0x2b4>)
 8000614:	f001 fa0d 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN2_GPIO_Port , EN2_Pin , GPIO_PIN_SET ) ;
 8000618:	2201      	movs	r2, #1
 800061a:	2140      	movs	r1, #64	; 0x40
 800061c:	482b      	ldr	r0, [pc, #172]	; (80006cc <update7SEG+0x2b4>)
 800061e:	f001 fa08 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN3_GPIO_Port , EN3_Pin , GPIO_PIN_SET ) ;
 8000622:	2201      	movs	r2, #1
 8000624:	2180      	movs	r1, #128	; 0x80
 8000626:	4829      	ldr	r0, [pc, #164]	; (80006cc <update7SEG+0x2b4>)
 8000628:	f001 fa03 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN4_GPIO_Port , EN4_Pin , GPIO_PIN_SET ) ;
 800062c:	2201      	movs	r2, #1
 800062e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000632:	4826      	ldr	r0, [pc, #152]	; (80006cc <update7SEG+0x2b4>)
 8000634:	f001 f9fd 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN5_GPIO_Port , EN5_Pin , GPIO_PIN_SET ) ;
 8000638:	2201      	movs	r2, #1
 800063a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800063e:	4823      	ldr	r0, [pc, #140]	; (80006cc <update7SEG+0x2b4>)
 8000640:	f001 f9f7 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN6_GPIO_Port , EN6_Pin , GPIO_PIN_RESET ) ;
 8000644:	2200      	movs	r2, #0
 8000646:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800064a:	4821      	ldr	r0, [pc, #132]	; (80006d0 <update7SEG+0x2b8>)
 800064c:	f001 f9f1 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN7_GPIO_Port , EN7_Pin , GPIO_PIN_SET ) ;
 8000650:	2201      	movs	r2, #1
 8000652:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000656:	481e      	ldr	r0, [pc, #120]	; (80006d0 <update7SEG+0x2b8>)
 8000658:	f001 f9eb 	bl	8001a32 <HAL_GPIO_WritePin>
		display7Seg(led_buffer[5]);
 800065c:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <update7SEG+0x2bc>)
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	4618      	mov	r0, r3
 8000662:	f000 f839 	bl	80006d8 <display7Seg>
		break;
 8000666:	e02d      	b.n	80006c4 <update7SEG+0x2ac>
	case 6:
		HAL_GPIO_WritePin ( EN1_GPIO_Port , EN1_Pin , GPIO_PIN_SET ) ;
 8000668:	2201      	movs	r2, #1
 800066a:	2120      	movs	r1, #32
 800066c:	4817      	ldr	r0, [pc, #92]	; (80006cc <update7SEG+0x2b4>)
 800066e:	f001 f9e0 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN2_GPIO_Port , EN2_Pin , GPIO_PIN_SET ) ;
 8000672:	2201      	movs	r2, #1
 8000674:	2140      	movs	r1, #64	; 0x40
 8000676:	4815      	ldr	r0, [pc, #84]	; (80006cc <update7SEG+0x2b4>)
 8000678:	f001 f9db 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN3_GPIO_Port , EN3_Pin , GPIO_PIN_SET ) ;
 800067c:	2201      	movs	r2, #1
 800067e:	2180      	movs	r1, #128	; 0x80
 8000680:	4812      	ldr	r0, [pc, #72]	; (80006cc <update7SEG+0x2b4>)
 8000682:	f001 f9d6 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN4_GPIO_Port , EN4_Pin , GPIO_PIN_SET ) ;
 8000686:	2201      	movs	r2, #1
 8000688:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068c:	480f      	ldr	r0, [pc, #60]	; (80006cc <update7SEG+0x2b4>)
 800068e:	f001 f9d0 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN5_GPIO_Port , EN5_Pin , GPIO_PIN_SET ) ;
 8000692:	2201      	movs	r2, #1
 8000694:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000698:	480c      	ldr	r0, [pc, #48]	; (80006cc <update7SEG+0x2b4>)
 800069a:	f001 f9ca 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN6_GPIO_Port , EN6_Pin , GPIO_PIN_SET ) ;
 800069e:	2201      	movs	r2, #1
 80006a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a4:	480a      	ldr	r0, [pc, #40]	; (80006d0 <update7SEG+0x2b8>)
 80006a6:	f001 f9c4 	bl	8001a32 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( EN7_GPIO_Port , EN7_Pin , GPIO_PIN_RESET ) ;
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006b0:	4807      	ldr	r0, [pc, #28]	; (80006d0 <update7SEG+0x2b8>)
 80006b2:	f001 f9be 	bl	8001a32 <HAL_GPIO_WritePin>
		display7Seg(led_buffer[6]);
 80006b6:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <update7SEG+0x2bc>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 f80c 	bl	80006d8 <display7Seg>
		break;
 80006c0:	e000      	b.n	80006c4 <update7SEG+0x2ac>
	default:
		break;
 80006c2:	bf00      	nop
	}
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40010800 	.word	0x40010800
 80006d0:	40010c00 	.word	0x40010c00
 80006d4:	20000080 	.word	0x20000080

080006d8 <display7Seg>:


void display7Seg(int num){
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2b09      	cmp	r3, #9
 80006e4:	f200 8180 	bhi.w	80009e8 <display7Seg+0x310>
 80006e8:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <display7Seg+0x18>)
 80006ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ee:	bf00      	nop
 80006f0:	08000719 	.word	0x08000719
 80006f4:	08000761 	.word	0x08000761
 80006f8:	080007a9 	.word	0x080007a9
 80006fc:	080007f1 	.word	0x080007f1
 8000700:	08000839 	.word	0x08000839
 8000704:	08000881 	.word	0x08000881
 8000708:	080008c9 	.word	0x080008c9
 800070c:	08000911 	.word	0x08000911
 8000710:	08000959 	.word	0x08000959
 8000714:	080009a1 	.word	0x080009a1
	switch(num){
	case 0:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000718:	2200      	movs	r2, #0
 800071a:	2101      	movs	r1, #1
 800071c:	48c6      	ldr	r0, [pc, #792]	; (8000a38 <display7Seg+0x360>)
 800071e:	f001 f988 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000722:	2200      	movs	r2, #0
 8000724:	2102      	movs	r1, #2
 8000726:	48c4      	ldr	r0, [pc, #784]	; (8000a38 <display7Seg+0x360>)
 8000728:	f001 f983 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 800072c:	2200      	movs	r2, #0
 800072e:	2104      	movs	r1, #4
 8000730:	48c1      	ldr	r0, [pc, #772]	; (8000a38 <display7Seg+0x360>)
 8000732:	f001 f97e 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000736:	2200      	movs	r2, #0
 8000738:	2108      	movs	r1, #8
 800073a:	48bf      	ldr	r0, [pc, #764]	; (8000a38 <display7Seg+0x360>)
 800073c:	f001 f979 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8000740:	2200      	movs	r2, #0
 8000742:	2110      	movs	r1, #16
 8000744:	48bc      	ldr	r0, [pc, #752]	; (8000a38 <display7Seg+0x360>)
 8000746:	f001 f974 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 800074a:	2200      	movs	r2, #0
 800074c:	2120      	movs	r1, #32
 800074e:	48ba      	ldr	r0, [pc, #744]	; (8000a38 <display7Seg+0x360>)
 8000750:	f001 f96f 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_SET ) ;
 8000754:	2201      	movs	r2, #1
 8000756:	2140      	movs	r1, #64	; 0x40
 8000758:	48b7      	ldr	r0, [pc, #732]	; (8000a38 <display7Seg+0x360>)
 800075a:	f001 f96a 	bl	8001a32 <HAL_GPIO_WritePin>
		break;
 800075e:	e167      	b.n	8000a30 <display7Seg+0x358>
	case 1:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_SET ) ;
 8000760:	2201      	movs	r2, #1
 8000762:	2101      	movs	r1, #1
 8000764:	48b4      	ldr	r0, [pc, #720]	; (8000a38 <display7Seg+0x360>)
 8000766:	f001 f964 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 800076a:	2200      	movs	r2, #0
 800076c:	2102      	movs	r1, #2
 800076e:	48b2      	ldr	r0, [pc, #712]	; (8000a38 <display7Seg+0x360>)
 8000770:	f001 f95f 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000774:	2200      	movs	r2, #0
 8000776:	2104      	movs	r1, #4
 8000778:	48af      	ldr	r0, [pc, #700]	; (8000a38 <display7Seg+0x360>)
 800077a:	f001 f95a 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_SET ) ;
 800077e:	2201      	movs	r2, #1
 8000780:	2108      	movs	r1, #8
 8000782:	48ad      	ldr	r0, [pc, #692]	; (8000a38 <display7Seg+0x360>)
 8000784:	f001 f955 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000788:	2201      	movs	r2, #1
 800078a:	2110      	movs	r1, #16
 800078c:	48aa      	ldr	r0, [pc, #680]	; (8000a38 <display7Seg+0x360>)
 800078e:	f001 f950 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 8000792:	2201      	movs	r2, #1
 8000794:	2120      	movs	r1, #32
 8000796:	48a8      	ldr	r0, [pc, #672]	; (8000a38 <display7Seg+0x360>)
 8000798:	f001 f94b 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_SET ) ;
 800079c:	2201      	movs	r2, #1
 800079e:	2140      	movs	r1, #64	; 0x40
 80007a0:	48a5      	ldr	r0, [pc, #660]	; (8000a38 <display7Seg+0x360>)
 80007a2:	f001 f946 	bl	8001a32 <HAL_GPIO_WritePin>
		break;
 80007a6:	e143      	b.n	8000a30 <display7Seg+0x358>
	case 2:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 80007a8:	2200      	movs	r2, #0
 80007aa:	2101      	movs	r1, #1
 80007ac:	48a2      	ldr	r0, [pc, #648]	; (8000a38 <display7Seg+0x360>)
 80007ae:	f001 f940 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 80007b2:	2200      	movs	r2, #0
 80007b4:	2102      	movs	r1, #2
 80007b6:	48a0      	ldr	r0, [pc, #640]	; (8000a38 <display7Seg+0x360>)
 80007b8:	f001 f93b 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_SET ) ;
 80007bc:	2201      	movs	r2, #1
 80007be:	2104      	movs	r1, #4
 80007c0:	489d      	ldr	r0, [pc, #628]	; (8000a38 <display7Seg+0x360>)
 80007c2:	f001 f936 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 80007c6:	2200      	movs	r2, #0
 80007c8:	2108      	movs	r1, #8
 80007ca:	489b      	ldr	r0, [pc, #620]	; (8000a38 <display7Seg+0x360>)
 80007cc:	f001 f931 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 80007d0:	2200      	movs	r2, #0
 80007d2:	2110      	movs	r1, #16
 80007d4:	4898      	ldr	r0, [pc, #608]	; (8000a38 <display7Seg+0x360>)
 80007d6:	f001 f92c 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 80007da:	2201      	movs	r2, #1
 80007dc:	2120      	movs	r1, #32
 80007de:	4896      	ldr	r0, [pc, #600]	; (8000a38 <display7Seg+0x360>)
 80007e0:	f001 f927 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 80007e4:	2200      	movs	r2, #0
 80007e6:	2140      	movs	r1, #64	; 0x40
 80007e8:	4893      	ldr	r0, [pc, #588]	; (8000a38 <display7Seg+0x360>)
 80007ea:	f001 f922 	bl	8001a32 <HAL_GPIO_WritePin>
		break;
 80007ee:	e11f      	b.n	8000a30 <display7Seg+0x358>
	case 3:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 80007f0:	2200      	movs	r2, #0
 80007f2:	2101      	movs	r1, #1
 80007f4:	4890      	ldr	r0, [pc, #576]	; (8000a38 <display7Seg+0x360>)
 80007f6:	f001 f91c 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 80007fa:	2200      	movs	r2, #0
 80007fc:	2102      	movs	r1, #2
 80007fe:	488e      	ldr	r0, [pc, #568]	; (8000a38 <display7Seg+0x360>)
 8000800:	f001 f917 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000804:	2200      	movs	r2, #0
 8000806:	2104      	movs	r1, #4
 8000808:	488b      	ldr	r0, [pc, #556]	; (8000a38 <display7Seg+0x360>)
 800080a:	f001 f912 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 800080e:	2200      	movs	r2, #0
 8000810:	2108      	movs	r1, #8
 8000812:	4889      	ldr	r0, [pc, #548]	; (8000a38 <display7Seg+0x360>)
 8000814:	f001 f90d 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000818:	2201      	movs	r2, #1
 800081a:	2110      	movs	r1, #16
 800081c:	4886      	ldr	r0, [pc, #536]	; (8000a38 <display7Seg+0x360>)
 800081e:	f001 f908 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 8000822:	2201      	movs	r2, #1
 8000824:	2120      	movs	r1, #32
 8000826:	4884      	ldr	r0, [pc, #528]	; (8000a38 <display7Seg+0x360>)
 8000828:	f001 f903 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 800082c:	2200      	movs	r2, #0
 800082e:	2140      	movs	r1, #64	; 0x40
 8000830:	4881      	ldr	r0, [pc, #516]	; (8000a38 <display7Seg+0x360>)
 8000832:	f001 f8fe 	bl	8001a32 <HAL_GPIO_WritePin>
		break;
 8000836:	e0fb      	b.n	8000a30 <display7Seg+0x358>
	case 4:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_SET ) ;
 8000838:	2201      	movs	r2, #1
 800083a:	2101      	movs	r1, #1
 800083c:	487e      	ldr	r0, [pc, #504]	; (8000a38 <display7Seg+0x360>)
 800083e:	f001 f8f8 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000842:	2200      	movs	r2, #0
 8000844:	2102      	movs	r1, #2
 8000846:	487c      	ldr	r0, [pc, #496]	; (8000a38 <display7Seg+0x360>)
 8000848:	f001 f8f3 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 800084c:	2200      	movs	r2, #0
 800084e:	2104      	movs	r1, #4
 8000850:	4879      	ldr	r0, [pc, #484]	; (8000a38 <display7Seg+0x360>)
 8000852:	f001 f8ee 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_SET ) ;
 8000856:	2201      	movs	r2, #1
 8000858:	2108      	movs	r1, #8
 800085a:	4877      	ldr	r0, [pc, #476]	; (8000a38 <display7Seg+0x360>)
 800085c:	f001 f8e9 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000860:	2201      	movs	r2, #1
 8000862:	2110      	movs	r1, #16
 8000864:	4874      	ldr	r0, [pc, #464]	; (8000a38 <display7Seg+0x360>)
 8000866:	f001 f8e4 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 800086a:	2200      	movs	r2, #0
 800086c:	2120      	movs	r1, #32
 800086e:	4872      	ldr	r0, [pc, #456]	; (8000a38 <display7Seg+0x360>)
 8000870:	f001 f8df 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000874:	2200      	movs	r2, #0
 8000876:	2140      	movs	r1, #64	; 0x40
 8000878:	486f      	ldr	r0, [pc, #444]	; (8000a38 <display7Seg+0x360>)
 800087a:	f001 f8da 	bl	8001a32 <HAL_GPIO_WritePin>
		break;
 800087e:	e0d7      	b.n	8000a30 <display7Seg+0x358>
	case 5:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000880:	2200      	movs	r2, #0
 8000882:	2101      	movs	r1, #1
 8000884:	486c      	ldr	r0, [pc, #432]	; (8000a38 <display7Seg+0x360>)
 8000886:	f001 f8d4 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_SET ) ;
 800088a:	2201      	movs	r2, #1
 800088c:	2102      	movs	r1, #2
 800088e:	486a      	ldr	r0, [pc, #424]	; (8000a38 <display7Seg+0x360>)
 8000890:	f001 f8cf 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000894:	2200      	movs	r2, #0
 8000896:	2104      	movs	r1, #4
 8000898:	4867      	ldr	r0, [pc, #412]	; (8000a38 <display7Seg+0x360>)
 800089a:	f001 f8ca 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 800089e:	2200      	movs	r2, #0
 80008a0:	2108      	movs	r1, #8
 80008a2:	4865      	ldr	r0, [pc, #404]	; (8000a38 <display7Seg+0x360>)
 80008a4:	f001 f8c5 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 80008a8:	2201      	movs	r2, #1
 80008aa:	2110      	movs	r1, #16
 80008ac:	4862      	ldr	r0, [pc, #392]	; (8000a38 <display7Seg+0x360>)
 80008ae:	f001 f8c0 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 80008b2:	2200      	movs	r2, #0
 80008b4:	2120      	movs	r1, #32
 80008b6:	4860      	ldr	r0, [pc, #384]	; (8000a38 <display7Seg+0x360>)
 80008b8:	f001 f8bb 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 80008bc:	2200      	movs	r2, #0
 80008be:	2140      	movs	r1, #64	; 0x40
 80008c0:	485d      	ldr	r0, [pc, #372]	; (8000a38 <display7Seg+0x360>)
 80008c2:	f001 f8b6 	bl	8001a32 <HAL_GPIO_WritePin>
		break;
 80008c6:	e0b3      	b.n	8000a30 <display7Seg+0x358>
	case 6:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 80008c8:	2200      	movs	r2, #0
 80008ca:	2101      	movs	r1, #1
 80008cc:	485a      	ldr	r0, [pc, #360]	; (8000a38 <display7Seg+0x360>)
 80008ce:	f001 f8b0 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_SET ) ;
 80008d2:	2201      	movs	r2, #1
 80008d4:	2102      	movs	r1, #2
 80008d6:	4858      	ldr	r0, [pc, #352]	; (8000a38 <display7Seg+0x360>)
 80008d8:	f001 f8ab 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 80008dc:	2200      	movs	r2, #0
 80008de:	2104      	movs	r1, #4
 80008e0:	4855      	ldr	r0, [pc, #340]	; (8000a38 <display7Seg+0x360>)
 80008e2:	f001 f8a6 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 80008e6:	2200      	movs	r2, #0
 80008e8:	2108      	movs	r1, #8
 80008ea:	4853      	ldr	r0, [pc, #332]	; (8000a38 <display7Seg+0x360>)
 80008ec:	f001 f8a1 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 80008f0:	2200      	movs	r2, #0
 80008f2:	2110      	movs	r1, #16
 80008f4:	4850      	ldr	r0, [pc, #320]	; (8000a38 <display7Seg+0x360>)
 80008f6:	f001 f89c 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 80008fa:	2200      	movs	r2, #0
 80008fc:	2120      	movs	r1, #32
 80008fe:	484e      	ldr	r0, [pc, #312]	; (8000a38 <display7Seg+0x360>)
 8000900:	f001 f897 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000904:	2200      	movs	r2, #0
 8000906:	2140      	movs	r1, #64	; 0x40
 8000908:	484b      	ldr	r0, [pc, #300]	; (8000a38 <display7Seg+0x360>)
 800090a:	f001 f892 	bl	8001a32 <HAL_GPIO_WritePin>
		break;
 800090e:	e08f      	b.n	8000a30 <display7Seg+0x358>
	case 7:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000910:	2200      	movs	r2, #0
 8000912:	2101      	movs	r1, #1
 8000914:	4848      	ldr	r0, [pc, #288]	; (8000a38 <display7Seg+0x360>)
 8000916:	f001 f88c 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 800091a:	2200      	movs	r2, #0
 800091c:	2102      	movs	r1, #2
 800091e:	4846      	ldr	r0, [pc, #280]	; (8000a38 <display7Seg+0x360>)
 8000920:	f001 f887 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000924:	2200      	movs	r2, #0
 8000926:	2104      	movs	r1, #4
 8000928:	4843      	ldr	r0, [pc, #268]	; (8000a38 <display7Seg+0x360>)
 800092a:	f001 f882 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_SET ) ;
 800092e:	2201      	movs	r2, #1
 8000930:	2108      	movs	r1, #8
 8000932:	4841      	ldr	r0, [pc, #260]	; (8000a38 <display7Seg+0x360>)
 8000934:	f001 f87d 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000938:	2201      	movs	r2, #1
 800093a:	2110      	movs	r1, #16
 800093c:	483e      	ldr	r0, [pc, #248]	; (8000a38 <display7Seg+0x360>)
 800093e:	f001 f878 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 8000942:	2201      	movs	r2, #1
 8000944:	2120      	movs	r1, #32
 8000946:	483c      	ldr	r0, [pc, #240]	; (8000a38 <display7Seg+0x360>)
 8000948:	f001 f873 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_SET ) ;
 800094c:	2201      	movs	r2, #1
 800094e:	2140      	movs	r1, #64	; 0x40
 8000950:	4839      	ldr	r0, [pc, #228]	; (8000a38 <display7Seg+0x360>)
 8000952:	f001 f86e 	bl	8001a32 <HAL_GPIO_WritePin>
		break;
 8000956:	e06b      	b.n	8000a30 <display7Seg+0x358>
	case 8:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000958:	2200      	movs	r2, #0
 800095a:	2101      	movs	r1, #1
 800095c:	4836      	ldr	r0, [pc, #216]	; (8000a38 <display7Seg+0x360>)
 800095e:	f001 f868 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000962:	2200      	movs	r2, #0
 8000964:	2102      	movs	r1, #2
 8000966:	4834      	ldr	r0, [pc, #208]	; (8000a38 <display7Seg+0x360>)
 8000968:	f001 f863 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 800096c:	2200      	movs	r2, #0
 800096e:	2104      	movs	r1, #4
 8000970:	4831      	ldr	r0, [pc, #196]	; (8000a38 <display7Seg+0x360>)
 8000972:	f001 f85e 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000976:	2200      	movs	r2, #0
 8000978:	2108      	movs	r1, #8
 800097a:	482f      	ldr	r0, [pc, #188]	; (8000a38 <display7Seg+0x360>)
 800097c:	f001 f859 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8000980:	2200      	movs	r2, #0
 8000982:	2110      	movs	r1, #16
 8000984:	482c      	ldr	r0, [pc, #176]	; (8000a38 <display7Seg+0x360>)
 8000986:	f001 f854 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 800098a:	2200      	movs	r2, #0
 800098c:	2120      	movs	r1, #32
 800098e:	482a      	ldr	r0, [pc, #168]	; (8000a38 <display7Seg+0x360>)
 8000990:	f001 f84f 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000994:	2200      	movs	r2, #0
 8000996:	2140      	movs	r1, #64	; 0x40
 8000998:	4827      	ldr	r0, [pc, #156]	; (8000a38 <display7Seg+0x360>)
 800099a:	f001 f84a 	bl	8001a32 <HAL_GPIO_WritePin>
		break;
 800099e:	e047      	b.n	8000a30 <display7Seg+0x358>
	case 9:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 80009a0:	2200      	movs	r2, #0
 80009a2:	2101      	movs	r1, #1
 80009a4:	4824      	ldr	r0, [pc, #144]	; (8000a38 <display7Seg+0x360>)
 80009a6:	f001 f844 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 80009aa:	2200      	movs	r2, #0
 80009ac:	2102      	movs	r1, #2
 80009ae:	4822      	ldr	r0, [pc, #136]	; (8000a38 <display7Seg+0x360>)
 80009b0:	f001 f83f 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 80009b4:	2200      	movs	r2, #0
 80009b6:	2104      	movs	r1, #4
 80009b8:	481f      	ldr	r0, [pc, #124]	; (8000a38 <display7Seg+0x360>)
 80009ba:	f001 f83a 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 80009be:	2200      	movs	r2, #0
 80009c0:	2108      	movs	r1, #8
 80009c2:	481d      	ldr	r0, [pc, #116]	; (8000a38 <display7Seg+0x360>)
 80009c4:	f001 f835 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 80009c8:	2201      	movs	r2, #1
 80009ca:	2110      	movs	r1, #16
 80009cc:	481a      	ldr	r0, [pc, #104]	; (8000a38 <display7Seg+0x360>)
 80009ce:	f001 f830 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 80009d2:	2200      	movs	r2, #0
 80009d4:	2120      	movs	r1, #32
 80009d6:	4818      	ldr	r0, [pc, #96]	; (8000a38 <display7Seg+0x360>)
 80009d8:	f001 f82b 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 80009dc:	2200      	movs	r2, #0
 80009de:	2140      	movs	r1, #64	; 0x40
 80009e0:	4815      	ldr	r0, [pc, #84]	; (8000a38 <display7Seg+0x360>)
 80009e2:	f001 f826 	bl	8001a32 <HAL_GPIO_WritePin>
		break;
 80009e6:	e023      	b.n	8000a30 <display7Seg+0x358>
	default:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 80009e8:	2200      	movs	r2, #0
 80009ea:	2101      	movs	r1, #1
 80009ec:	4812      	ldr	r0, [pc, #72]	; (8000a38 <display7Seg+0x360>)
 80009ee:	f001 f820 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 80009f2:	2200      	movs	r2, #0
 80009f4:	2102      	movs	r1, #2
 80009f6:	4810      	ldr	r0, [pc, #64]	; (8000a38 <display7Seg+0x360>)
 80009f8:	f001 f81b 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 80009fc:	2200      	movs	r2, #0
 80009fe:	2104      	movs	r1, #4
 8000a00:	480d      	ldr	r0, [pc, #52]	; (8000a38 <display7Seg+0x360>)
 8000a02:	f001 f816 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000a06:	2200      	movs	r2, #0
 8000a08:	2108      	movs	r1, #8
 8000a0a:	480b      	ldr	r0, [pc, #44]	; (8000a38 <display7Seg+0x360>)
 8000a0c:	f001 f811 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8000a10:	2200      	movs	r2, #0
 8000a12:	2110      	movs	r1, #16
 8000a14:	4808      	ldr	r0, [pc, #32]	; (8000a38 <display7Seg+0x360>)
 8000a16:	f001 f80c 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2120      	movs	r1, #32
 8000a1e:	4806      	ldr	r0, [pc, #24]	; (8000a38 <display7Seg+0x360>)
 8000a20:	f001 f807 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000a24:	2200      	movs	r2, #0
 8000a26:	2140      	movs	r1, #64	; 0x40
 8000a28:	4803      	ldr	r0, [pc, #12]	; (8000a38 <display7Seg+0x360>)
 8000a2a:	f001 f802 	bl	8001a32 <HAL_GPIO_WritePin>

	}
}
 8000a2e:	bf00      	nop
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40010c00 	.word	0x40010c00

08000a3c <Seg7Scan>:


#include "fsm.h"

int numOfLed = 0;
void Seg7Scan(){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	if(timer1_flag == 1){
 8000a40:	4b31      	ldr	r3, [pc, #196]	; (8000b08 <Seg7Scan+0xcc>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d15c      	bne.n	8000b02 <Seg7Scan+0xc6>
			  if(numOfLed == 0){
 8000a48:	4b30      	ldr	r3, [pc, #192]	; (8000b0c <Seg7Scan+0xd0>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d109      	bne.n	8000a64 <Seg7Scan+0x28>
					setTimer1 (140);
 8000a50:	208c      	movs	r0, #140	; 0x8c
 8000a52:	f000 fbf1 	bl	8001238 <setTimer1>
					update7SEG(1);
 8000a56:	2001      	movs	r0, #1
 8000a58:	f7ff fcde 	bl	8000418 <update7SEG>
					numOfLed = 1;
 8000a5c:	4b2b      	ldr	r3, [pc, #172]	; (8000b0c <Seg7Scan+0xd0>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	601a      	str	r2, [r3, #0]
					setTimer1 (140);
					update7SEG(0);
					numOfLed = 0;
			  }
	}
}
 8000a62:	e04e      	b.n	8000b02 <Seg7Scan+0xc6>
			  else if(numOfLed == 1){
 8000a64:	4b29      	ldr	r3, [pc, #164]	; (8000b0c <Seg7Scan+0xd0>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d109      	bne.n	8000a80 <Seg7Scan+0x44>
					setTimer1 (140);
 8000a6c:	208c      	movs	r0, #140	; 0x8c
 8000a6e:	f000 fbe3 	bl	8001238 <setTimer1>
					update7SEG(2);
 8000a72:	2002      	movs	r0, #2
 8000a74:	f7ff fcd0 	bl	8000418 <update7SEG>
					numOfLed = 2;
 8000a78:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <Seg7Scan+0xd0>)
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	601a      	str	r2, [r3, #0]
}
 8000a7e:	e040      	b.n	8000b02 <Seg7Scan+0xc6>
			  else if(numOfLed == 2){
 8000a80:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <Seg7Scan+0xd0>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d109      	bne.n	8000a9c <Seg7Scan+0x60>
					setTimer1 (140);
 8000a88:	208c      	movs	r0, #140	; 0x8c
 8000a8a:	f000 fbd5 	bl	8001238 <setTimer1>
					update7SEG(3);
 8000a8e:	2003      	movs	r0, #3
 8000a90:	f7ff fcc2 	bl	8000418 <update7SEG>
					numOfLed = 3;
 8000a94:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <Seg7Scan+0xd0>)
 8000a96:	2203      	movs	r2, #3
 8000a98:	601a      	str	r2, [r3, #0]
}
 8000a9a:	e032      	b.n	8000b02 <Seg7Scan+0xc6>
			  else if(numOfLed == 3){
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <Seg7Scan+0xd0>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b03      	cmp	r3, #3
 8000aa2:	d109      	bne.n	8000ab8 <Seg7Scan+0x7c>
					setTimer1 (140);
 8000aa4:	208c      	movs	r0, #140	; 0x8c
 8000aa6:	f000 fbc7 	bl	8001238 <setTimer1>
					update7SEG(4);
 8000aaa:	2004      	movs	r0, #4
 8000aac:	f7ff fcb4 	bl	8000418 <update7SEG>
					numOfLed = 4;
 8000ab0:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <Seg7Scan+0xd0>)
 8000ab2:	2204      	movs	r2, #4
 8000ab4:	601a      	str	r2, [r3, #0]
}
 8000ab6:	e024      	b.n	8000b02 <Seg7Scan+0xc6>
			  else if(numOfLed == 4){
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <Seg7Scan+0xd0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b04      	cmp	r3, #4
 8000abe:	d109      	bne.n	8000ad4 <Seg7Scan+0x98>
					setTimer1 (140);
 8000ac0:	208c      	movs	r0, #140	; 0x8c
 8000ac2:	f000 fbb9 	bl	8001238 <setTimer1>
					update7SEG(5);
 8000ac6:	2005      	movs	r0, #5
 8000ac8:	f7ff fca6 	bl	8000418 <update7SEG>
					numOfLed = 5;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <Seg7Scan+0xd0>)
 8000ace:	2205      	movs	r2, #5
 8000ad0:	601a      	str	r2, [r3, #0]
}
 8000ad2:	e016      	b.n	8000b02 <Seg7Scan+0xc6>
			  else if(numOfLed == 5){
 8000ad4:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <Seg7Scan+0xd0>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b05      	cmp	r3, #5
 8000ada:	d109      	bne.n	8000af0 <Seg7Scan+0xb4>
					setTimer1 (140);
 8000adc:	208c      	movs	r0, #140	; 0x8c
 8000ade:	f000 fbab 	bl	8001238 <setTimer1>
					update7SEG(6);
 8000ae2:	2006      	movs	r0, #6
 8000ae4:	f7ff fc98 	bl	8000418 <update7SEG>
					numOfLed = 6;
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <Seg7Scan+0xd0>)
 8000aea:	2206      	movs	r2, #6
 8000aec:	601a      	str	r2, [r3, #0]
}
 8000aee:	e008      	b.n	8000b02 <Seg7Scan+0xc6>
					setTimer1 (140);
 8000af0:	208c      	movs	r0, #140	; 0x8c
 8000af2:	f000 fba1 	bl	8001238 <setTimer1>
					update7SEG(0);
 8000af6:	2000      	movs	r0, #0
 8000af8:	f7ff fc8e 	bl	8000418 <update7SEG>
					numOfLed = 0;
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <Seg7Scan+0xd0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	200000c8 	.word	0x200000c8
 8000b0c:	2000009c 	.word	0x2000009c

08000b10 <fsm_automatic_run>:



//automatic mode
void fsm_automatic_run(){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	switch(state){
 8000b14:	4b9c      	ldr	r3, [pc, #624]	; (8000d88 <fsm_automatic_run+0x278>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	f040 812f 	bne.w	8000d7c <fsm_automatic_run+0x26c>
	case NOR:
		ModeValue = 1;
 8000b1e:	4b9b      	ldr	r3, [pc, #620]	; (8000d8c <fsm_automatic_run+0x27c>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	601a      	str	r2, [r3, #0]
		updateClockBuffer();
 8000b24:	f7ff fc16 	bl	8000354 <updateClockBuffer>
		if(timer0_flag == 1){
 8000b28:	4b99      	ldr	r3, [pc, #612]	; (8000d90 <fsm_automatic_run+0x280>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	f040 810e 	bne.w	8000d4e <fsm_automatic_run+0x23e>
			counter++;
 8000b32:	4b98      	ldr	r3, [pc, #608]	; (8000d94 <fsm_automatic_run+0x284>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	3301      	adds	r3, #1
 8000b38:	4a96      	ldr	r2, [pc, #600]	; (8000d94 <fsm_automatic_run+0x284>)
 8000b3a:	6013      	str	r3, [r2, #0]
			counter_1++;
 8000b3c:	4b96      	ldr	r3, [pc, #600]	; (8000d98 <fsm_automatic_run+0x288>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	3301      	adds	r3, #1
 8000b42:	4a95      	ldr	r2, [pc, #596]	; (8000d98 <fsm_automatic_run+0x288>)
 8000b44:	6013      	str	r3, [r2, #0]
			//horizontal traffic light
		    if(counter <= RED_Time_value){
 8000b46:	4b93      	ldr	r3, [pc, #588]	; (8000d94 <fsm_automatic_run+0x284>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4b94      	ldr	r3, [pc, #592]	; (8000d9c <fsm_automatic_run+0x28c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	dc19      	bgt.n	8000b86 <fsm_automatic_run+0x76>
		    	Horizontal_TrafficLight = RED_Time_value - counter;
 8000b52:	4b92      	ldr	r3, [pc, #584]	; (8000d9c <fsm_automatic_run+0x28c>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	4b8f      	ldr	r3, [pc, #572]	; (8000d94 <fsm_automatic_run+0x284>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	1ad3      	subs	r3, r2, r3
 8000b5c:	4a90      	ldr	r2, [pc, #576]	; (8000da0 <fsm_automatic_run+0x290>)
 8000b5e:	6013      	str	r3, [r2, #0]
			    HAL_GPIO_WritePin ( RED_GPIO_Port , RED_Pin , GPIO_PIN_SET ) ;
 8000b60:	2201      	movs	r2, #1
 8000b62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b66:	488f      	ldr	r0, [pc, #572]	; (8000da4 <fsm_automatic_run+0x294>)
 8000b68:	f000 ff63 	bl	8001a32 <HAL_GPIO_WritePin>
	    	    HAL_GPIO_WritePin ( YELLOW_GPIO_Port , YELLOW_Pin , GPIO_PIN_RESET ) ;
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b72:	488c      	ldr	r0, [pc, #560]	; (8000da4 <fsm_automatic_run+0x294>)
 8000b74:	f000 ff5d 	bl	8001a32 <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin ( GREEN_GPIO_Port , GREEN_Pin , GPIO_PIN_RESET ) ;
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b7e:	4889      	ldr	r0, [pc, #548]	; (8000da4 <fsm_automatic_run+0x294>)
 8000b80:	f000 ff57 	bl	8001a32 <HAL_GPIO_WritePin>
 8000b84:	e050      	b.n	8000c28 <fsm_automatic_run+0x118>
		    }
		    else if(counter <= RED_Time_value + YELLOW_Time_value){
 8000b86:	4b85      	ldr	r3, [pc, #532]	; (8000d9c <fsm_automatic_run+0x28c>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	4b87      	ldr	r3, [pc, #540]	; (8000da8 <fsm_automatic_run+0x298>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	441a      	add	r2, r3
 8000b90:	4b80      	ldr	r3, [pc, #512]	; (8000d94 <fsm_automatic_run+0x284>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	db1c      	blt.n	8000bd2 <fsm_automatic_run+0xc2>
				Horizontal_TrafficLight = RED_Time_value + YELLOW_Time_value - counter;
 8000b98:	4b80      	ldr	r3, [pc, #512]	; (8000d9c <fsm_automatic_run+0x28c>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b82      	ldr	r3, [pc, #520]	; (8000da8 <fsm_automatic_run+0x298>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	441a      	add	r2, r3
 8000ba2:	4b7c      	ldr	r3, [pc, #496]	; (8000d94 <fsm_automatic_run+0x284>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	4a7d      	ldr	r2, [pc, #500]	; (8000da0 <fsm_automatic_run+0x290>)
 8000baa:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin ( RED_GPIO_Port , RED_Pin , GPIO_PIN_RESET ) ;
 8000bac:	2200      	movs	r2, #0
 8000bae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bb2:	487c      	ldr	r0, [pc, #496]	; (8000da4 <fsm_automatic_run+0x294>)
 8000bb4:	f000 ff3d 	bl	8001a32 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( YELLOW_GPIO_Port , YELLOW_Pin , GPIO_PIN_SET ) ;
 8000bb8:	2201      	movs	r2, #1
 8000bba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bbe:	4879      	ldr	r0, [pc, #484]	; (8000da4 <fsm_automatic_run+0x294>)
 8000bc0:	f000 ff37 	bl	8001a32 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( GREEN_GPIO_Port , GREEN_Pin , GPIO_PIN_RESET ) ;
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bca:	4876      	ldr	r0, [pc, #472]	; (8000da4 <fsm_automatic_run+0x294>)
 8000bcc:	f000 ff31 	bl	8001a32 <HAL_GPIO_WritePin>
 8000bd0:	e02a      	b.n	8000c28 <fsm_automatic_run+0x118>
		    }
		    else if(counter <= RED_Time_value + YELLOW_Time_value + GREEN_Time_value){
 8000bd2:	4b72      	ldr	r3, [pc, #456]	; (8000d9c <fsm_automatic_run+0x28c>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	4b74      	ldr	r3, [pc, #464]	; (8000da8 <fsm_automatic_run+0x298>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	441a      	add	r2, r3
 8000bdc:	4b73      	ldr	r3, [pc, #460]	; (8000dac <fsm_automatic_run+0x29c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	441a      	add	r2, r3
 8000be2:	4b6c      	ldr	r3, [pc, #432]	; (8000d94 <fsm_automatic_run+0x284>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	db1e      	blt.n	8000c28 <fsm_automatic_run+0x118>
				Horizontal_TrafficLight = RED_Time_value + YELLOW_Time_value + GREEN_Time_value - counter;
 8000bea:	4b6c      	ldr	r3, [pc, #432]	; (8000d9c <fsm_automatic_run+0x28c>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	4b6e      	ldr	r3, [pc, #440]	; (8000da8 <fsm_automatic_run+0x298>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	441a      	add	r2, r3
 8000bf4:	4b6d      	ldr	r3, [pc, #436]	; (8000dac <fsm_automatic_run+0x29c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	441a      	add	r2, r3
 8000bfa:	4b66      	ldr	r3, [pc, #408]	; (8000d94 <fsm_automatic_run+0x284>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	4a67      	ldr	r2, [pc, #412]	; (8000da0 <fsm_automatic_run+0x290>)
 8000c02:	6013      	str	r3, [r2, #0]
			    HAL_GPIO_WritePin ( RED_GPIO_Port , RED_Pin , GPIO_PIN_RESET ) ;
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c0a:	4866      	ldr	r0, [pc, #408]	; (8000da4 <fsm_automatic_run+0x294>)
 8000c0c:	f000 ff11 	bl	8001a32 <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin ( YELLOW_GPIO_Port , YELLOW_Pin , GPIO_PIN_RESET ) ;
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c16:	4863      	ldr	r0, [pc, #396]	; (8000da4 <fsm_automatic_run+0x294>)
 8000c18:	f000 ff0b 	bl	8001a32 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( GREEN_GPIO_Port , GREEN_Pin , GPIO_PIN_SET ) ;
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c22:	4860      	ldr	r0, [pc, #384]	; (8000da4 <fsm_automatic_run+0x294>)
 8000c24:	f000 ff05 	bl	8001a32 <HAL_GPIO_WritePin>
			}
			if(counter >= RED_Time_value + YELLOW_Time_value + GREEN_Time_value) counter = 0;
 8000c28:	4b5c      	ldr	r3, [pc, #368]	; (8000d9c <fsm_automatic_run+0x28c>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b5e      	ldr	r3, [pc, #376]	; (8000da8 <fsm_automatic_run+0x298>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	441a      	add	r2, r3
 8000c32:	4b5e      	ldr	r3, [pc, #376]	; (8000dac <fsm_automatic_run+0x29c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	441a      	add	r2, r3
 8000c38:	4b56      	ldr	r3, [pc, #344]	; (8000d94 <fsm_automatic_run+0x284>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	dc02      	bgt.n	8000c46 <fsm_automatic_run+0x136>
 8000c40:	4b54      	ldr	r3, [pc, #336]	; (8000d94 <fsm_automatic_run+0x284>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
			//vertical traffic light
		    if(counter_1 <= YELLOW_Time_value){
 8000c46:	4b54      	ldr	r3, [pc, #336]	; (8000d98 <fsm_automatic_run+0x288>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	4b57      	ldr	r3, [pc, #348]	; (8000da8 <fsm_automatic_run+0x298>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	dc19      	bgt.n	8000c86 <fsm_automatic_run+0x176>
		    	Vertical_TrafficLight = YELLOW_Time_value - counter_1;
 8000c52:	4b55      	ldr	r3, [pc, #340]	; (8000da8 <fsm_automatic_run+0x298>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	4b50      	ldr	r3, [pc, #320]	; (8000d98 <fsm_automatic_run+0x288>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	4a54      	ldr	r2, [pc, #336]	; (8000db0 <fsm_automatic_run+0x2a0>)
 8000c5e:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin ( RED_1_GPIO_Port , RED_1_Pin , GPIO_PIN_RESET ) ;
 8000c60:	2200      	movs	r2, #0
 8000c62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c66:	484f      	ldr	r0, [pc, #316]	; (8000da4 <fsm_automatic_run+0x294>)
 8000c68:	f000 fee3 	bl	8001a32 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( YELLOW_1_GPIO_Port , YELLOW_1_Pin , GPIO_PIN_SET ) ;
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c72:	484c      	ldr	r0, [pc, #304]	; (8000da4 <fsm_automatic_run+0x294>)
 8000c74:	f000 fedd 	bl	8001a32 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( GREEN_1_GPIO_Port , GREEN_1_Pin , GPIO_PIN_RESET ) ;
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c7e:	4849      	ldr	r0, [pc, #292]	; (8000da4 <fsm_automatic_run+0x294>)
 8000c80:	f000 fed7 	bl	8001a32 <HAL_GPIO_WritePin>
 8000c84:	e050      	b.n	8000d28 <fsm_automatic_run+0x218>
		    }
		    else if(counter_1 <= GREEN_Time_value + YELLOW_Time_value){
 8000c86:	4b49      	ldr	r3, [pc, #292]	; (8000dac <fsm_automatic_run+0x29c>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	4b47      	ldr	r3, [pc, #284]	; (8000da8 <fsm_automatic_run+0x298>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	441a      	add	r2, r3
 8000c90:	4b41      	ldr	r3, [pc, #260]	; (8000d98 <fsm_automatic_run+0x288>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	db1c      	blt.n	8000cd2 <fsm_automatic_run+0x1c2>
				Vertical_TrafficLight = GREEN_Time_value + YELLOW_Time_value - counter_1;
 8000c98:	4b44      	ldr	r3, [pc, #272]	; (8000dac <fsm_automatic_run+0x29c>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b42      	ldr	r3, [pc, #264]	; (8000da8 <fsm_automatic_run+0x298>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	441a      	add	r2, r3
 8000ca2:	4b3d      	ldr	r3, [pc, #244]	; (8000d98 <fsm_automatic_run+0x288>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	4a41      	ldr	r2, [pc, #260]	; (8000db0 <fsm_automatic_run+0x2a0>)
 8000caa:	6013      	str	r3, [r2, #0]
			    HAL_GPIO_WritePin ( RED_1_GPIO_Port , RED_1_Pin , GPIO_PIN_RESET ) ;
 8000cac:	2200      	movs	r2, #0
 8000cae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb2:	483c      	ldr	r0, [pc, #240]	; (8000da4 <fsm_automatic_run+0x294>)
 8000cb4:	f000 febd 	bl	8001a32 <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin ( YELLOW_1_GPIO_Port , YELLOW_1_Pin , GPIO_PIN_RESET ) ;
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cbe:	4839      	ldr	r0, [pc, #228]	; (8000da4 <fsm_automatic_run+0x294>)
 8000cc0:	f000 feb7 	bl	8001a32 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( GREEN_1_GPIO_Port , GREEN_1_Pin , GPIO_PIN_SET ) ;
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cca:	4836      	ldr	r0, [pc, #216]	; (8000da4 <fsm_automatic_run+0x294>)
 8000ccc:	f000 feb1 	bl	8001a32 <HAL_GPIO_WritePin>
 8000cd0:	e02a      	b.n	8000d28 <fsm_automatic_run+0x218>
		    }
		    else if(counter_1 <= RED_Time_value + YELLOW_Time_value + GREEN_Time_value){
 8000cd2:	4b32      	ldr	r3, [pc, #200]	; (8000d9c <fsm_automatic_run+0x28c>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	4b34      	ldr	r3, [pc, #208]	; (8000da8 <fsm_automatic_run+0x298>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	441a      	add	r2, r3
 8000cdc:	4b33      	ldr	r3, [pc, #204]	; (8000dac <fsm_automatic_run+0x29c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	441a      	add	r2, r3
 8000ce2:	4b2d      	ldr	r3, [pc, #180]	; (8000d98 <fsm_automatic_run+0x288>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	db1e      	blt.n	8000d28 <fsm_automatic_run+0x218>
				Vertical_TrafficLight = RED_Time_value + YELLOW_Time_value + GREEN_Time_value - counter_1;
 8000cea:	4b2c      	ldr	r3, [pc, #176]	; (8000d9c <fsm_automatic_run+0x28c>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	4b2e      	ldr	r3, [pc, #184]	; (8000da8 <fsm_automatic_run+0x298>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	441a      	add	r2, r3
 8000cf4:	4b2d      	ldr	r3, [pc, #180]	; (8000dac <fsm_automatic_run+0x29c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	441a      	add	r2, r3
 8000cfa:	4b27      	ldr	r3, [pc, #156]	; (8000d98 <fsm_automatic_run+0x288>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	4a2b      	ldr	r2, [pc, #172]	; (8000db0 <fsm_automatic_run+0x2a0>)
 8000d02:	6013      	str	r3, [r2, #0]
			    HAL_GPIO_WritePin ( RED_1_GPIO_Port , RED_1_Pin , GPIO_PIN_SET ) ;
 8000d04:	2201      	movs	r2, #1
 8000d06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d0a:	4826      	ldr	r0, [pc, #152]	; (8000da4 <fsm_automatic_run+0x294>)
 8000d0c:	f000 fe91 	bl	8001a32 <HAL_GPIO_WritePin>
	    	    HAL_GPIO_WritePin ( YELLOW_1_GPIO_Port , YELLOW_1_Pin , GPIO_PIN_RESET ) ;
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d16:	4823      	ldr	r0, [pc, #140]	; (8000da4 <fsm_automatic_run+0x294>)
 8000d18:	f000 fe8b 	bl	8001a32 <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin ( GREEN_1_GPIO_Port , GREEN_1_Pin , GPIO_PIN_RESET ) ;
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d22:	4820      	ldr	r0, [pc, #128]	; (8000da4 <fsm_automatic_run+0x294>)
 8000d24:	f000 fe85 	bl	8001a32 <HAL_GPIO_WritePin>
			}
			if(counter_1 >= RED_Time_value + YELLOW_Time_value + GREEN_Time_value) counter_1 = 0;
 8000d28:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <fsm_automatic_run+0x28c>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4b1e      	ldr	r3, [pc, #120]	; (8000da8 <fsm_automatic_run+0x298>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	441a      	add	r2, r3
 8000d32:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <fsm_automatic_run+0x29c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	441a      	add	r2, r3
 8000d38:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <fsm_automatic_run+0x288>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	dc02      	bgt.n	8000d46 <fsm_automatic_run+0x236>
 8000d40:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <fsm_automatic_run+0x288>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
			setTimer0(1000);
 8000d46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d4a:	f000 fa5b 	bl	8001204 <setTimer0>
		}
		if(isButton1Pressed() == 1){
 8000d4e:	f7ff f9fd 	bl	800014c <isButton1Pressed>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d113      	bne.n	8000d80 <fsm_automatic_run+0x270>
			setTimer0(1000);
 8000d58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d5c:	f000 fa52 	bl	8001204 <setTimer0>
			counter = 0;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <fsm_automatic_run+0x284>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
			counter_1 = 0;
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <fsm_automatic_run+0x288>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
			Set_time = RED_Time_value;
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <fsm_automatic_run+0x28c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a10      	ldr	r2, [pc, #64]	; (8000db4 <fsm_automatic_run+0x2a4>)
 8000d72:	6013      	str	r3, [r2, #0]
		    state = RED_M;
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <fsm_automatic_run+0x278>)
 8000d76:	2202      	movs	r2, #2
 8000d78:	601a      	str	r2, [r3, #0]
		}
		break;
 8000d7a:	e001      	b.n	8000d80 <fsm_automatic_run+0x270>
	default:
		break;
 8000d7c:	bf00      	nop
 8000d7e:	e000      	b.n	8000d82 <fsm_automatic_run+0x272>
		break;
 8000d80:	bf00      	nop
	}
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200000a8 	.word	0x200000a8
 8000d8c:	200000b4 	.word	0x200000b4
 8000d90:	200000c0 	.word	0x200000c0
 8000d94:	200000a0 	.word	0x200000a0
 8000d98:	200000a4 	.word	0x200000a4
 8000d9c:	2000003c 	.word	0x2000003c
 8000da0:	200000ac 	.word	0x200000ac
 8000da4:	40010800 	.word	0x40010800
 8000da8:	20000044 	.word	0x20000044
 8000dac:	20000040 	.word	0x20000040
 8000db0:	200000b0 	.word	0x200000b0
 8000db4:	200000b8 	.word	0x200000b8

08000db8 <fsm_simple_buttons_run>:
// manual mode

void fsm_simple_buttons_run(){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	switch(state){
 8000dbc:	4b7a      	ldr	r3, [pc, #488]	; (8000fa8 <fsm_simple_buttons_run+0x1f0>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b04      	cmp	r3, #4
 8000dc2:	f200 80e8 	bhi.w	8000f96 <fsm_simple_buttons_run+0x1de>
 8000dc6:	a201      	add	r2, pc, #4	; (adr r2, 8000dcc <fsm_simple_buttons_run+0x14>)
 8000dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dcc:	08000de1 	.word	0x08000de1
 8000dd0:	08000f97 	.word	0x08000f97
 8000dd4:	08000def 	.word	0x08000def
 8000dd8:	08000ea1 	.word	0x08000ea1
 8000ddc:	08000f1d 	.word	0x08000f1d
	case INIT:
		counter = 0;
 8000de0:	4b72      	ldr	r3, [pc, #456]	; (8000fac <fsm_simple_buttons_run+0x1f4>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
		state = NOR;
 8000de6:	4b70      	ldr	r3, [pc, #448]	; (8000fa8 <fsm_simple_buttons_run+0x1f0>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	601a      	str	r2, [r3, #0]
		break;
 8000dec:	e0da      	b.n	8000fa4 <fsm_simple_buttons_run+0x1ec>
	case RED_M:
		ModeValue = 2;
 8000dee:	4b70      	ldr	r3, [pc, #448]	; (8000fb0 <fsm_simple_buttons_run+0x1f8>)
 8000df0:	2202      	movs	r2, #2
 8000df2:	601a      	str	r2, [r3, #0]
		updateClockBuffer();
 8000df4:	f7ff faae 	bl	8000354 <updateClockBuffer>
		HAL_GPIO_WritePin ( YELLOW_1_GPIO_Port , YELLOW_1_Pin , GPIO_PIN_RESET ) ;
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dfe:	486d      	ldr	r0, [pc, #436]	; (8000fb4 <fsm_simple_buttons_run+0x1fc>)
 8000e00:	f000 fe17 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( GREEN_1_GPIO_Port , GREEN_1_Pin , GPIO_PIN_RESET ) ;
 8000e04:	2200      	movs	r2, #0
 8000e06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e0a:	486a      	ldr	r0, [pc, #424]	; (8000fb4 <fsm_simple_buttons_run+0x1fc>)
 8000e0c:	f000 fe11 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( YELLOW_GPIO_Port , YELLOW_Pin , GPIO_PIN_RESET ) ;
 8000e10:	2200      	movs	r2, #0
 8000e12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e16:	4867      	ldr	r0, [pc, #412]	; (8000fb4 <fsm_simple_buttons_run+0x1fc>)
 8000e18:	f000 fe0b 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( GREEN_GPIO_Port , GREEN_Pin , GPIO_PIN_RESET ) ;
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e22:	4864      	ldr	r0, [pc, #400]	; (8000fb4 <fsm_simple_buttons_run+0x1fc>)
 8000e24:	f000 fe05 	bl	8001a32 <HAL_GPIO_WritePin>
		if(isButton2Pressed() == 1){
 8000e28:	f7ff f9a2 	bl	8000170 <isButton2Pressed>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d10b      	bne.n	8000e4a <fsm_simple_buttons_run+0x92>
			Set_time++;
 8000e32:	4b61      	ldr	r3, [pc, #388]	; (8000fb8 <fsm_simple_buttons_run+0x200>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	3301      	adds	r3, #1
 8000e38:	4a5f      	ldr	r2, [pc, #380]	; (8000fb8 <fsm_simple_buttons_run+0x200>)
 8000e3a:	6013      	str	r3, [r2, #0]
			if(Set_time>= 100) Set_time = 0;
 8000e3c:	4b5e      	ldr	r3, [pc, #376]	; (8000fb8 <fsm_simple_buttons_run+0x200>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b63      	cmp	r3, #99	; 0x63
 8000e42:	dd02      	ble.n	8000e4a <fsm_simple_buttons_run+0x92>
 8000e44:	4b5c      	ldr	r3, [pc, #368]	; (8000fb8 <fsm_simple_buttons_run+0x200>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
		}
		if(isButton3Pressed() == 1){
 8000e4a:	f7ff f9a3 	bl	8000194 <isButton3Pressed>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d103      	bne.n	8000e5c <fsm_simple_buttons_run+0xa4>
			RED_Time_value = Set_time;
 8000e54:	4b58      	ldr	r3, [pc, #352]	; (8000fb8 <fsm_simple_buttons_run+0x200>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a58      	ldr	r2, [pc, #352]	; (8000fbc <fsm_simple_buttons_run+0x204>)
 8000e5a:	6013      	str	r3, [r2, #0]
		}
		if(timer0_flag == 1){
 8000e5c:	4b58      	ldr	r3, [pc, #352]	; (8000fc0 <fsm_simple_buttons_run+0x208>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d10c      	bne.n	8000e7e <fsm_simple_buttons_run+0xc6>
			HAL_GPIO_TogglePin(RED_GPIO_Port, RED_Pin);
 8000e64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e68:	4852      	ldr	r0, [pc, #328]	; (8000fb4 <fsm_simple_buttons_run+0x1fc>)
 8000e6a:	f000 fdfa 	bl	8001a62 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(RED_1_GPIO_Port, RED_1_Pin);
 8000e6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e72:	4850      	ldr	r0, [pc, #320]	; (8000fb4 <fsm_simple_buttons_run+0x1fc>)
 8000e74:	f000 fdf5 	bl	8001a62 <HAL_GPIO_TogglePin>
			setTimer0(250);
 8000e78:	20fa      	movs	r0, #250	; 0xfa
 8000e7a:	f000 f9c3 	bl	8001204 <setTimer0>
		}
		if(isButton1Pressed() == 1){
 8000e7e:	f7ff f965 	bl	800014c <isButton1Pressed>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	f040 8088 	bne.w	8000f9a <fsm_simple_buttons_run+0x1e2>
			setTimer0(250);
 8000e8a:	20fa      	movs	r0, #250	; 0xfa
 8000e8c:	f000 f9ba 	bl	8001204 <setTimer0>
			Set_time = YELLOW_Time_value;
 8000e90:	4b4c      	ldr	r3, [pc, #304]	; (8000fc4 <fsm_simple_buttons_run+0x20c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a48      	ldr	r2, [pc, #288]	; (8000fb8 <fsm_simple_buttons_run+0x200>)
 8000e96:	6013      	str	r3, [r2, #0]
			state = YELLOW_M;
 8000e98:	4b43      	ldr	r3, [pc, #268]	; (8000fa8 <fsm_simple_buttons_run+0x1f0>)
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	601a      	str	r2, [r3, #0]
		}
		break;
 8000e9e:	e07c      	b.n	8000f9a <fsm_simple_buttons_run+0x1e2>
	case YELLOW_M:
		ModeValue = 3;
 8000ea0:	4b43      	ldr	r3, [pc, #268]	; (8000fb0 <fsm_simple_buttons_run+0x1f8>)
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	601a      	str	r2, [r3, #0]
		updateClockBuffer();
 8000ea6:	f7ff fa55 	bl	8000354 <updateClockBuffer>
		HAL_GPIO_WritePin ( RED_1_GPIO_Port , RED_1_Pin , GPIO_PIN_RESET ) ;
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eb0:	4840      	ldr	r0, [pc, #256]	; (8000fb4 <fsm_simple_buttons_run+0x1fc>)
 8000eb2:	f000 fdbe 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( GREEN_1_GPIO_Port , GREEN_1_Pin , GPIO_PIN_RESET ) ;
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ebc:	483d      	ldr	r0, [pc, #244]	; (8000fb4 <fsm_simple_buttons_run+0x1fc>)
 8000ebe:	f000 fdb8 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RED_GPIO_Port , RED_Pin , GPIO_PIN_RESET ) ;
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec8:	483a      	ldr	r0, [pc, #232]	; (8000fb4 <fsm_simple_buttons_run+0x1fc>)
 8000eca:	f000 fdb2 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( GREEN_GPIO_Port , GREEN_Pin , GPIO_PIN_RESET ) ;
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ed4:	4837      	ldr	r0, [pc, #220]	; (8000fb4 <fsm_simple_buttons_run+0x1fc>)
 8000ed6:	f000 fdac 	bl	8001a32 <HAL_GPIO_WritePin>
		if(timer0_flag == 1){
 8000eda:	4b39      	ldr	r3, [pc, #228]	; (8000fc0 <fsm_simple_buttons_run+0x208>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d10c      	bne.n	8000efc <fsm_simple_buttons_run+0x144>
			HAL_GPIO_TogglePin(YELLOW_GPIO_Port, YELLOW_Pin);
 8000ee2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ee6:	4833      	ldr	r0, [pc, #204]	; (8000fb4 <fsm_simple_buttons_run+0x1fc>)
 8000ee8:	f000 fdbb 	bl	8001a62 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin);
 8000eec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ef0:	4830      	ldr	r0, [pc, #192]	; (8000fb4 <fsm_simple_buttons_run+0x1fc>)
 8000ef2:	f000 fdb6 	bl	8001a62 <HAL_GPIO_TogglePin>
			setTimer0(250);
 8000ef6:	20fa      	movs	r0, #250	; 0xfa
 8000ef8:	f000 f984 	bl	8001204 <setTimer0>
		}
		if(isButton1Pressed() == 1){
 8000efc:	f7ff f926 	bl	800014c <isButton1Pressed>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d14b      	bne.n	8000f9e <fsm_simple_buttons_run+0x1e6>
			setTimer0(250);
 8000f06:	20fa      	movs	r0, #250	; 0xfa
 8000f08:	f000 f97c 	bl	8001204 <setTimer0>
			Set_time = GREEN_Time_value;
 8000f0c:	4b2e      	ldr	r3, [pc, #184]	; (8000fc8 <fsm_simple_buttons_run+0x210>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a29      	ldr	r2, [pc, #164]	; (8000fb8 <fsm_simple_buttons_run+0x200>)
 8000f12:	6013      	str	r3, [r2, #0]
			state = GREEN_M;
 8000f14:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <fsm_simple_buttons_run+0x1f0>)
 8000f16:	2204      	movs	r2, #4
 8000f18:	601a      	str	r2, [r3, #0]
		}
		break;
 8000f1a:	e040      	b.n	8000f9e <fsm_simple_buttons_run+0x1e6>
	case GREEN_M:
		ModeValue = 4;
 8000f1c:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <fsm_simple_buttons_run+0x1f8>)
 8000f1e:	2204      	movs	r2, #4
 8000f20:	601a      	str	r2, [r3, #0]
		updateClockBuffer();
 8000f22:	f7ff fa17 	bl	8000354 <updateClockBuffer>
		HAL_GPIO_WritePin ( RED_1_GPIO_Port , RED_1_Pin , GPIO_PIN_RESET ) ;
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f2c:	4821      	ldr	r0, [pc, #132]	; (8000fb4 <fsm_simple_buttons_run+0x1fc>)
 8000f2e:	f000 fd80 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( YELLOW_1_GPIO_Port , YELLOW_1_Pin , GPIO_PIN_RESET ) ;
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f38:	481e      	ldr	r0, [pc, #120]	; (8000fb4 <fsm_simple_buttons_run+0x1fc>)
 8000f3a:	f000 fd7a 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RED_GPIO_Port , RED_Pin , GPIO_PIN_RESET ) ;
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f44:	481b      	ldr	r0, [pc, #108]	; (8000fb4 <fsm_simple_buttons_run+0x1fc>)
 8000f46:	f000 fd74 	bl	8001a32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( YELLOW_GPIO_Port , YELLOW_Pin , GPIO_PIN_RESET ) ;
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f50:	4818      	ldr	r0, [pc, #96]	; (8000fb4 <fsm_simple_buttons_run+0x1fc>)
 8000f52:	f000 fd6e 	bl	8001a32 <HAL_GPIO_WritePin>
		if(timer0_flag == 1){
 8000f56:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <fsm_simple_buttons_run+0x208>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d10c      	bne.n	8000f78 <fsm_simple_buttons_run+0x1c0>
			HAL_GPIO_TogglePin(GREEN_GPIO_Port, GREEN_Pin);
 8000f5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f62:	4814      	ldr	r0, [pc, #80]	; (8000fb4 <fsm_simple_buttons_run+0x1fc>)
 8000f64:	f000 fd7d 	bl	8001a62 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GREEN_1_GPIO_Port, GREEN_1_Pin);
 8000f68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f6c:	4811      	ldr	r0, [pc, #68]	; (8000fb4 <fsm_simple_buttons_run+0x1fc>)
 8000f6e:	f000 fd78 	bl	8001a62 <HAL_GPIO_TogglePin>
			setTimer0(250);
 8000f72:	20fa      	movs	r0, #250	; 0xfa
 8000f74:	f000 f946 	bl	8001204 <setTimer0>
		}
		if(isButton1Pressed() == 1){
 8000f78:	f7ff f8e8 	bl	800014c <isButton1Pressed>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d10f      	bne.n	8000fa2 <fsm_simple_buttons_run+0x1ea>
			setTimer0(250);
 8000f82:	20fa      	movs	r0, #250	; 0xfa
 8000f84:	f000 f93e 	bl	8001204 <setTimer0>
			Set_time = 0;
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <fsm_simple_buttons_run+0x200>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
			state = NOR;
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <fsm_simple_buttons_run+0x1f0>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	601a      	str	r2, [r3, #0]
		}
		break;
 8000f94:	e005      	b.n	8000fa2 <fsm_simple_buttons_run+0x1ea>
	default:
		break;
 8000f96:	bf00      	nop
 8000f98:	e004      	b.n	8000fa4 <fsm_simple_buttons_run+0x1ec>
		break;
 8000f9a:	bf00      	nop
 8000f9c:	e002      	b.n	8000fa4 <fsm_simple_buttons_run+0x1ec>
		break;
 8000f9e:	bf00      	nop
 8000fa0:	e000      	b.n	8000fa4 <fsm_simple_buttons_run+0x1ec>
		break;
 8000fa2:	bf00      	nop
	}
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200000a8 	.word	0x200000a8
 8000fac:	200000a0 	.word	0x200000a0
 8000fb0:	200000b4 	.word	0x200000b4
 8000fb4:	40010800 	.word	0x40010800
 8000fb8:	200000b8 	.word	0x200000b8
 8000fbc:	2000003c 	.word	0x2000003c
 8000fc0:	200000c0 	.word	0x200000c0
 8000fc4:	20000044 	.word	0x20000044
 8000fc8:	20000040 	.word	0x20000040

08000fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd0:	f000 fa2e 	bl	8001430 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd4:	f000 f816 	bl	8001004 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd8:	f000 f89c 	bl	8001114 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000fdc:	f000 f84e 	bl	800107c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8000fe0:	4807      	ldr	r0, [pc, #28]	; (8001000 <main+0x34>)
 8000fe2:	f001 f98f 	bl	8002304 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(250);
 8000fe6:	20fa      	movs	r0, #250	; 0xfa
 8000fe8:	f000 f926 	bl	8001238 <setTimer1>
  setTimer0(1000);
 8000fec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ff0:	f000 f908 	bl	8001204 <setTimer0>
  while (1)
  {
	  fsm_automatic_run();
 8000ff4:	f7ff fd8c 	bl	8000b10 <fsm_automatic_run>

	  fsm_simple_buttons_run();
 8000ff8:	f7ff fede 	bl	8000db8 <fsm_simple_buttons_run>
	  fsm_automatic_run();
 8000ffc:	e7fa      	b.n	8000ff4 <main+0x28>
 8000ffe:	bf00      	nop
 8001000:	200000cc 	.word	0x200000cc

08001004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b090      	sub	sp, #64	; 0x40
 8001008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100a:	f107 0318 	add.w	r3, r7, #24
 800100e:	2228      	movs	r2, #40	; 0x28
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f001 fd2e 	bl	8002a74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001026:	2302      	movs	r3, #2
 8001028:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800102a:	2301      	movs	r3, #1
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800102e:	2310      	movs	r3, #16
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001032:	2300      	movs	r3, #0
 8001034:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001036:	f107 0318 	add.w	r3, r7, #24
 800103a:	4618      	mov	r0, r3
 800103c:	f000 fd2a 	bl	8001a94 <HAL_RCC_OscConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001046:	f000 f8d7 	bl	80011f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104a:	230f      	movs	r3, #15
 800104c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f000 ff96 	bl	8001f94 <HAL_RCC_ClockConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800106e:	f000 f8c3 	bl	80011f8 <Error_Handler>
  }
}
 8001072:	bf00      	nop
 8001074:	3740      	adds	r7, #64	; 0x40
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001082:	f107 0308 	add.w	r3, r7, #8
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001090:	463b      	mov	r3, r7
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001098:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <MX_TIM2_Init+0x94>)
 800109a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800109e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80010a0:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <MX_TIM2_Init+0x94>)
 80010a2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80010a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a8:	4b19      	ldr	r3, [pc, #100]	; (8001110 <MX_TIM2_Init+0x94>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80010ae:	4b18      	ldr	r3, [pc, #96]	; (8001110 <MX_TIM2_Init+0x94>)
 80010b0:	2209      	movs	r2, #9
 80010b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b4:	4b16      	ldr	r3, [pc, #88]	; (8001110 <MX_TIM2_Init+0x94>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <MX_TIM2_Init+0x94>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010c0:	4813      	ldr	r0, [pc, #76]	; (8001110 <MX_TIM2_Init+0x94>)
 80010c2:	f001 f8cf 	bl	8002264 <HAL_TIM_Base_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010cc:	f000 f894 	bl	80011f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010d6:	f107 0308 	add.w	r3, r7, #8
 80010da:	4619      	mov	r1, r3
 80010dc:	480c      	ldr	r0, [pc, #48]	; (8001110 <MX_TIM2_Init+0x94>)
 80010de:	f001 fa65 	bl	80025ac <HAL_TIM_ConfigClockSource>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010e8:	f000 f886 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ec:	2300      	movs	r3, #0
 80010ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010f4:	463b      	mov	r3, r7
 80010f6:	4619      	mov	r1, r3
 80010f8:	4805      	ldr	r0, [pc, #20]	; (8001110 <MX_TIM2_Init+0x94>)
 80010fa:	f001 fc2d 	bl	8002958 <HAL_TIMEx_MasterConfigSynchronization>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001104:	f000 f878 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001108:	bf00      	nop
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200000cc 	.word	0x200000cc

08001114 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111a:	f107 0308 	add.w	r3, r7, #8
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001128:	4b29      	ldr	r3, [pc, #164]	; (80011d0 <MX_GPIO_Init+0xbc>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a28      	ldr	r2, [pc, #160]	; (80011d0 <MX_GPIO_Init+0xbc>)
 800112e:	f043 0304 	orr.w	r3, r3, #4
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b26      	ldr	r3, [pc, #152]	; (80011d0 <MX_GPIO_Init+0xbc>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001140:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <MX_GPIO_Init+0xbc>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a22      	ldr	r2, [pc, #136]	; (80011d0 <MX_GPIO_Init+0xbc>)
 8001146:	f043 0308 	orr.w	r3, r3, #8
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <MX_GPIO_Init+0xbc>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	603b      	str	r3, [r7, #0]
 8001156:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8001158:	2200      	movs	r2, #0
 800115a:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800115e:	481d      	ldr	r0, [pc, #116]	; (80011d4 <MX_GPIO_Init+0xc0>)
 8001160:	f000 fc67 	bl	8001a32 <HAL_GPIO_WritePin>
                          |EN4_Pin|EN5_Pin|RED_Pin|YELLOW_Pin
                          |GREEN_Pin|RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_Pin|B_Pin|C_Pin|EN6_Pin
 8001164:	2200      	movs	r2, #0
 8001166:	f24c 017f 	movw	r1, #49279	; 0xc07f
 800116a:	481b      	ldr	r0, [pc, #108]	; (80011d8 <MX_GPIO_Init+0xc4>)
 800116c:	f000 fc61 	bl	8001a32 <HAL_GPIO_WritePin>
                          |G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED_Pin EN1_Pin EN2_Pin EN3_Pin
                           EN4_Pin EN5_Pin RED_Pin YELLOW_Pin
                           GREEN_Pin RED_1_Pin YELLOW_1_Pin GREEN_1_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8001170:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001174:	60bb      	str	r3, [r7, #8]
                          |EN4_Pin|EN5_Pin|RED_Pin|YELLOW_Pin
                          |GREEN_Pin|RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001176:	2301      	movs	r3, #1
 8001178:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2302      	movs	r3, #2
 8001180:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 0308 	add.w	r3, r7, #8
 8001186:	4619      	mov	r1, r3
 8001188:	4812      	ldr	r0, [pc, #72]	; (80011d4 <MX_GPIO_Init+0xc0>)
 800118a:	f000 fac1 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin EN6_Pin
                           EN7_Pin D_Pin E_Pin F_Pin
                           G_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|EN6_Pin
 800118e:	f24c 037f 	movw	r3, #49279	; 0xc07f
 8001192:	60bb      	str	r3, [r7, #8]
                          |EN7_Pin|D_Pin|E_Pin|F_Pin
                          |G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001194:	2301      	movs	r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2302      	movs	r3, #2
 800119e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a0:	f107 0308 	add.w	r3, r7, #8
 80011a4:	4619      	mov	r1, r3
 80011a6:	480c      	ldr	r0, [pc, #48]	; (80011d8 <MX_GPIO_Init+0xc4>)
 80011a8:	f000 fab2 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pins : INC_Pin SET_Pin MODE_Pin */
  GPIO_InitStruct.Pin = INC_Pin|SET_Pin|MODE_Pin;
 80011ac:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 80011b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b6:	2301      	movs	r3, #1
 80011b8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ba:	f107 0308 	add.w	r3, r7, #8
 80011be:	4619      	mov	r1, r3
 80011c0:	4805      	ldr	r0, [pc, #20]	; (80011d8 <MX_GPIO_Init+0xc4>)
 80011c2:	f000 faa5 	bl	8001710 <HAL_GPIO_Init>

}
 80011c6:	bf00      	nop
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40010800 	.word	0x40010800
 80011d8:	40010c00 	.word	0x40010c00

080011dc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	timer_run();
 80011e4:	f000 f842 	bl	800126c <timer_run>
	getKeyInput();
 80011e8:	f7ff f810 	bl	800020c <getKeyInput>
	Seg7Scan();
 80011ec:	f7ff fc26 	bl	8000a3c <Seg7Scan>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011fc:	b672      	cpsid	i
}
 80011fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001200:	e7fe      	b.n	8001200 <Error_Handler+0x8>
	...

08001204 <setTimer0>:
int timer0_counter = 0;
int timer0_flag = 0;
int timer1_counter = 0;
int timer1_flag = 0;
int TIMER_CYCLE = 10;
void setTimer0(int duration){
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	timer0_counter = duration/ TIMER_CYCLE;
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <setTimer0+0x28>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	fb92 f3f3 	sdiv	r3, r2, r3
 8001216:	4a06      	ldr	r2, [pc, #24]	; (8001230 <setTimer0+0x2c>)
 8001218:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <setTimer0+0x30>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000048 	.word	0x20000048
 8001230:	200000bc 	.word	0x200000bc
 8001234:	200000c0 	.word	0x200000c0

08001238 <setTimer1>:
void setTimer1(int duration){
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/ TIMER_CYCLE;
 8001240:	4b07      	ldr	r3, [pc, #28]	; (8001260 <setTimer1+0x28>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	fb92 f3f3 	sdiv	r3, r2, r3
 800124a:	4a06      	ldr	r2, [pc, #24]	; (8001264 <setTimer1+0x2c>)
 800124c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <setTimer1+0x30>)
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000048 	.word	0x20000048
 8001264:	200000c4 	.word	0x200000c4
 8001268:	200000c8 	.word	0x200000c8

0800126c <timer_run>:

void timer_run(){
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
	if(timer0_counter > 0){
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <timer_run+0x4c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	dd0b      	ble.n	8001290 <timer_run+0x24>
		timer0_counter--;
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <timer_run+0x4c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	3b01      	subs	r3, #1
 800127e:	4a0e      	ldr	r2, [pc, #56]	; (80012b8 <timer_run+0x4c>)
 8001280:	6013      	str	r3, [r2, #0]
		if(timer0_counter == 0) timer0_flag = 1;
 8001282:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <timer_run+0x4c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d102      	bne.n	8001290 <timer_run+0x24>
 800128a:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <timer_run+0x50>)
 800128c:	2201      	movs	r2, #1
 800128e:	601a      	str	r2, [r3, #0]
	}
	if(timer1_counter > 0){
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <timer_run+0x54>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	dd0b      	ble.n	80012b0 <timer_run+0x44>
		timer1_counter--;
 8001298:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <timer_run+0x54>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	3b01      	subs	r3, #1
 800129e:	4a08      	ldr	r2, [pc, #32]	; (80012c0 <timer_run+0x54>)
 80012a0:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) timer1_flag = 1;
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <timer_run+0x54>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d102      	bne.n	80012b0 <timer_run+0x44>
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <timer_run+0x58>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	601a      	str	r2, [r3, #0]
	}
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	200000bc 	.word	0x200000bc
 80012bc:	200000c0 	.word	0x200000c0
 80012c0:	200000c4 	.word	0x200000c4
 80012c4:	200000c8 	.word	0x200000c8

080012c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012ce:	4b15      	ldr	r3, [pc, #84]	; (8001324 <HAL_MspInit+0x5c>)
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	4a14      	ldr	r2, [pc, #80]	; (8001324 <HAL_MspInit+0x5c>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6193      	str	r3, [r2, #24]
 80012da:	4b12      	ldr	r3, [pc, #72]	; (8001324 <HAL_MspInit+0x5c>)
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <HAL_MspInit+0x5c>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	4a0e      	ldr	r2, [pc, #56]	; (8001324 <HAL_MspInit+0x5c>)
 80012ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f0:	61d3      	str	r3, [r2, #28]
 80012f2:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <HAL_MspInit+0x5c>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <HAL_MspInit+0x60>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	4a04      	ldr	r2, [pc, #16]	; (8001328 <HAL_MspInit+0x60>)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131a:	bf00      	nop
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	40021000 	.word	0x40021000
 8001328:	40010000 	.word	0x40010000

0800132c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800133c:	d113      	bne.n	8001366 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <HAL_TIM_Base_MspInit+0x44>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	4a0b      	ldr	r2, [pc, #44]	; (8001370 <HAL_TIM_Base_MspInit+0x44>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	61d3      	str	r3, [r2, #28]
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <HAL_TIM_Base_MspInit+0x44>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	2100      	movs	r1, #0
 800135a:	201c      	movs	r0, #28
 800135c:	f000 f9a1 	bl	80016a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001360:	201c      	movs	r0, #28
 8001362:	f000 f9ba 	bl	80016da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40021000 	.word	0x40021000

08001374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <NMI_Handler+0x4>

0800137a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137e:	e7fe      	b.n	800137e <HardFault_Handler+0x4>

08001380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <MemManage_Handler+0x4>

08001386 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138a:	e7fe      	b.n	800138a <BusFault_Handler+0x4>

0800138c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <UsageFault_Handler+0x4>

08001392 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr

0800139e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr

080013aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr

080013b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ba:	f000 f87f 	bl	80014bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <TIM2_IRQHandler+0x10>)
 80013ca:	f000 ffe7 	bl	800239c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200000cc 	.word	0x200000cc

080013d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e4:	480c      	ldr	r0, [pc, #48]	; (8001418 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013e6:	490d      	ldr	r1, [pc, #52]	; (800141c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013e8:	4a0d      	ldr	r2, [pc, #52]	; (8001420 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ec:	e002      	b.n	80013f4 <LoopCopyDataInit>

080013ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f2:	3304      	adds	r3, #4

080013f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f8:	d3f9      	bcc.n	80013ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fa:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013fc:	4c0a      	ldr	r4, [pc, #40]	; (8001428 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001400:	e001      	b.n	8001406 <LoopFillZerobss>

08001402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001404:	3204      	adds	r2, #4

08001406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001408:	d3fb      	bcc.n	8001402 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800140a:	f7ff ffe5 	bl	80013d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800140e:	f001 fb0d 	bl	8002a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001412:	f7ff fddb 	bl	8000fcc <main>
  bx lr
 8001416:	4770      	bx	lr
  ldr r0, =_sdata
 8001418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800141c:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001420:	08002ac4 	.word	0x08002ac4
  ldr r2, =_sbss
 8001424:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001428:	20000118 	.word	0x20000118

0800142c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800142c:	e7fe      	b.n	800142c <ADC1_2_IRQHandler>
	...

08001430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <HAL_Init+0x28>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a07      	ldr	r2, [pc, #28]	; (8001458 <HAL_Init+0x28>)
 800143a:	f043 0310 	orr.w	r3, r3, #16
 800143e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001440:	2003      	movs	r0, #3
 8001442:	f000 f923 	bl	800168c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001446:	200f      	movs	r0, #15
 8001448:	f000 f808 	bl	800145c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800144c:	f7ff ff3c 	bl	80012c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40022000 	.word	0x40022000

0800145c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <HAL_InitTick+0x54>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <HAL_InitTick+0x58>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4619      	mov	r1, r3
 800146e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001472:	fbb3 f3f1 	udiv	r3, r3, r1
 8001476:	fbb2 f3f3 	udiv	r3, r2, r3
 800147a:	4618      	mov	r0, r3
 800147c:	f000 f93b 	bl	80016f6 <HAL_SYSTICK_Config>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e00e      	b.n	80014a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b0f      	cmp	r3, #15
 800148e:	d80a      	bhi.n	80014a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001490:	2200      	movs	r2, #0
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	f000 f903 	bl	80016a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800149c:	4a06      	ldr	r2, [pc, #24]	; (80014b8 <HAL_InitTick+0x5c>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e000      	b.n	80014a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	2000004c 	.word	0x2000004c
 80014b4:	20000054 	.word	0x20000054
 80014b8:	20000050 	.word	0x20000050

080014bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <HAL_IncTick+0x1c>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <HAL_IncTick+0x20>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	4a03      	ldr	r2, [pc, #12]	; (80014dc <HAL_IncTick+0x20>)
 80014ce:	6013      	str	r3, [r2, #0]
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	20000054 	.word	0x20000054
 80014dc:	20000114 	.word	0x20000114

080014e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return uwTick;
 80014e4:	4b02      	ldr	r3, [pc, #8]	; (80014f0 <HAL_GetTick+0x10>)
 80014e6:	681b      	ldr	r3, [r3, #0]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	20000114 	.word	0x20000114

080014f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001510:	4013      	ands	r3, r2
 8001512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800151c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001526:	4a04      	ldr	r2, [pc, #16]	; (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	60d3      	str	r3, [r2, #12]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <__NVIC_GetPriorityGrouping+0x18>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	f003 0307 	and.w	r3, r3, #7
}
 800154a:	4618      	mov	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	2b00      	cmp	r3, #0
 8001568:	db0b      	blt.n	8001582 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	f003 021f 	and.w	r2, r3, #31
 8001570:	4906      	ldr	r1, [pc, #24]	; (800158c <__NVIC_EnableIRQ+0x34>)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	095b      	lsrs	r3, r3, #5
 8001578:	2001      	movs	r0, #1
 800157a:	fa00 f202 	lsl.w	r2, r0, r2
 800157e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	e000e100 	.word	0xe000e100

08001590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	6039      	str	r1, [r7, #0]
 800159a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	db0a      	blt.n	80015ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	490c      	ldr	r1, [pc, #48]	; (80015dc <__NVIC_SetPriority+0x4c>)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	0112      	lsls	r2, r2, #4
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	440b      	add	r3, r1
 80015b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b8:	e00a      	b.n	80015d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4908      	ldr	r1, [pc, #32]	; (80015e0 <__NVIC_SetPriority+0x50>)
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	3b04      	subs	r3, #4
 80015c8:	0112      	lsls	r2, r2, #4
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	440b      	add	r3, r1
 80015ce:	761a      	strb	r2, [r3, #24]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000e100 	.word	0xe000e100
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b089      	sub	sp, #36	; 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f1c3 0307 	rsb	r3, r3, #7
 80015fe:	2b04      	cmp	r3, #4
 8001600:	bf28      	it	cs
 8001602:	2304      	movcs	r3, #4
 8001604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3304      	adds	r3, #4
 800160a:	2b06      	cmp	r3, #6
 800160c:	d902      	bls.n	8001614 <NVIC_EncodePriority+0x30>
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3b03      	subs	r3, #3
 8001612:	e000      	b.n	8001616 <NVIC_EncodePriority+0x32>
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	f04f 32ff 	mov.w	r2, #4294967295
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43da      	mvns	r2, r3
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	401a      	ands	r2, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800162c:	f04f 31ff 	mov.w	r1, #4294967295
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	43d9      	mvns	r1, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	4313      	orrs	r3, r2
         );
}
 800163e:	4618      	mov	r0, r3
 8001640:	3724      	adds	r7, #36	; 0x24
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001658:	d301      	bcc.n	800165e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165a:	2301      	movs	r3, #1
 800165c:	e00f      	b.n	800167e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165e:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <SysTick_Config+0x40>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001666:	210f      	movs	r1, #15
 8001668:	f04f 30ff 	mov.w	r0, #4294967295
 800166c:	f7ff ff90 	bl	8001590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <SysTick_Config+0x40>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001676:	4b04      	ldr	r3, [pc, #16]	; (8001688 <SysTick_Config+0x40>)
 8001678:	2207      	movs	r2, #7
 800167a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	e000e010 	.word	0xe000e010

0800168c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ff2d 	bl	80014f4 <__NVIC_SetPriorityGrouping>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b4:	f7ff ff42 	bl	800153c <__NVIC_GetPriorityGrouping>
 80016b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	6978      	ldr	r0, [r7, #20]
 80016c0:	f7ff ff90 	bl	80015e4 <NVIC_EncodePriority>
 80016c4:	4602      	mov	r2, r0
 80016c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff5f 	bl	8001590 <__NVIC_SetPriority>
}
 80016d2:	bf00      	nop
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff35 	bl	8001558 <__NVIC_EnableIRQ>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff ffa2 	bl	8001648 <SysTick_Config>
 8001704:	4603      	mov	r3, r0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001710:	b480      	push	{r7}
 8001712:	b08b      	sub	sp, #44	; 0x2c
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800171a:	2300      	movs	r3, #0
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800171e:	2300      	movs	r3, #0
 8001720:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001722:	e148      	b.n	80019b6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001724:	2201      	movs	r2, #1
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	69fa      	ldr	r2, [r7, #28]
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	429a      	cmp	r2, r3
 800173e:	f040 8137 	bne.w	80019b0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	4aa3      	ldr	r2, [pc, #652]	; (80019d4 <HAL_GPIO_Init+0x2c4>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d05e      	beq.n	800180a <HAL_GPIO_Init+0xfa>
 800174c:	4aa1      	ldr	r2, [pc, #644]	; (80019d4 <HAL_GPIO_Init+0x2c4>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d875      	bhi.n	800183e <HAL_GPIO_Init+0x12e>
 8001752:	4aa1      	ldr	r2, [pc, #644]	; (80019d8 <HAL_GPIO_Init+0x2c8>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d058      	beq.n	800180a <HAL_GPIO_Init+0xfa>
 8001758:	4a9f      	ldr	r2, [pc, #636]	; (80019d8 <HAL_GPIO_Init+0x2c8>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d86f      	bhi.n	800183e <HAL_GPIO_Init+0x12e>
 800175e:	4a9f      	ldr	r2, [pc, #636]	; (80019dc <HAL_GPIO_Init+0x2cc>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d052      	beq.n	800180a <HAL_GPIO_Init+0xfa>
 8001764:	4a9d      	ldr	r2, [pc, #628]	; (80019dc <HAL_GPIO_Init+0x2cc>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d869      	bhi.n	800183e <HAL_GPIO_Init+0x12e>
 800176a:	4a9d      	ldr	r2, [pc, #628]	; (80019e0 <HAL_GPIO_Init+0x2d0>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d04c      	beq.n	800180a <HAL_GPIO_Init+0xfa>
 8001770:	4a9b      	ldr	r2, [pc, #620]	; (80019e0 <HAL_GPIO_Init+0x2d0>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d863      	bhi.n	800183e <HAL_GPIO_Init+0x12e>
 8001776:	4a9b      	ldr	r2, [pc, #620]	; (80019e4 <HAL_GPIO_Init+0x2d4>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d046      	beq.n	800180a <HAL_GPIO_Init+0xfa>
 800177c:	4a99      	ldr	r2, [pc, #612]	; (80019e4 <HAL_GPIO_Init+0x2d4>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d85d      	bhi.n	800183e <HAL_GPIO_Init+0x12e>
 8001782:	2b12      	cmp	r3, #18
 8001784:	d82a      	bhi.n	80017dc <HAL_GPIO_Init+0xcc>
 8001786:	2b12      	cmp	r3, #18
 8001788:	d859      	bhi.n	800183e <HAL_GPIO_Init+0x12e>
 800178a:	a201      	add	r2, pc, #4	; (adr r2, 8001790 <HAL_GPIO_Init+0x80>)
 800178c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001790:	0800180b 	.word	0x0800180b
 8001794:	080017e5 	.word	0x080017e5
 8001798:	080017f7 	.word	0x080017f7
 800179c:	08001839 	.word	0x08001839
 80017a0:	0800183f 	.word	0x0800183f
 80017a4:	0800183f 	.word	0x0800183f
 80017a8:	0800183f 	.word	0x0800183f
 80017ac:	0800183f 	.word	0x0800183f
 80017b0:	0800183f 	.word	0x0800183f
 80017b4:	0800183f 	.word	0x0800183f
 80017b8:	0800183f 	.word	0x0800183f
 80017bc:	0800183f 	.word	0x0800183f
 80017c0:	0800183f 	.word	0x0800183f
 80017c4:	0800183f 	.word	0x0800183f
 80017c8:	0800183f 	.word	0x0800183f
 80017cc:	0800183f 	.word	0x0800183f
 80017d0:	0800183f 	.word	0x0800183f
 80017d4:	080017ed 	.word	0x080017ed
 80017d8:	08001801 	.word	0x08001801
 80017dc:	4a82      	ldr	r2, [pc, #520]	; (80019e8 <HAL_GPIO_Init+0x2d8>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d013      	beq.n	800180a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017e2:	e02c      	b.n	800183e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	623b      	str	r3, [r7, #32]
          break;
 80017ea:	e029      	b.n	8001840 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	3304      	adds	r3, #4
 80017f2:	623b      	str	r3, [r7, #32]
          break;
 80017f4:	e024      	b.n	8001840 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	3308      	adds	r3, #8
 80017fc:	623b      	str	r3, [r7, #32]
          break;
 80017fe:	e01f      	b.n	8001840 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	330c      	adds	r3, #12
 8001806:	623b      	str	r3, [r7, #32]
          break;
 8001808:	e01a      	b.n	8001840 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d102      	bne.n	8001818 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001812:	2304      	movs	r3, #4
 8001814:	623b      	str	r3, [r7, #32]
          break;
 8001816:	e013      	b.n	8001840 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d105      	bne.n	800182c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001820:	2308      	movs	r3, #8
 8001822:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69fa      	ldr	r2, [r7, #28]
 8001828:	611a      	str	r2, [r3, #16]
          break;
 800182a:	e009      	b.n	8001840 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800182c:	2308      	movs	r3, #8
 800182e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69fa      	ldr	r2, [r7, #28]
 8001834:	615a      	str	r2, [r3, #20]
          break;
 8001836:	e003      	b.n	8001840 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001838:	2300      	movs	r3, #0
 800183a:	623b      	str	r3, [r7, #32]
          break;
 800183c:	e000      	b.n	8001840 <HAL_GPIO_Init+0x130>
          break;
 800183e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	2bff      	cmp	r3, #255	; 0xff
 8001844:	d801      	bhi.n	800184a <HAL_GPIO_Init+0x13a>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	e001      	b.n	800184e <HAL_GPIO_Init+0x13e>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	3304      	adds	r3, #4
 800184e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	2bff      	cmp	r3, #255	; 0xff
 8001854:	d802      	bhi.n	800185c <HAL_GPIO_Init+0x14c>
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	e002      	b.n	8001862 <HAL_GPIO_Init+0x152>
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	3b08      	subs	r3, #8
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	210f      	movs	r1, #15
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	fa01 f303 	lsl.w	r3, r1, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	401a      	ands	r2, r3
 8001874:	6a39      	ldr	r1, [r7, #32]
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	fa01 f303 	lsl.w	r3, r1, r3
 800187c:	431a      	orrs	r2, r3
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 8090 	beq.w	80019b0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001890:	4b56      	ldr	r3, [pc, #344]	; (80019ec <HAL_GPIO_Init+0x2dc>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	4a55      	ldr	r2, [pc, #340]	; (80019ec <HAL_GPIO_Init+0x2dc>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	6193      	str	r3, [r2, #24]
 800189c:	4b53      	ldr	r3, [pc, #332]	; (80019ec <HAL_GPIO_Init+0x2dc>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018a8:	4a51      	ldr	r2, [pc, #324]	; (80019f0 <HAL_GPIO_Init+0x2e0>)
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	089b      	lsrs	r3, r3, #2
 80018ae:	3302      	adds	r3, #2
 80018b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	220f      	movs	r2, #15
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	4013      	ands	r3, r2
 80018ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a49      	ldr	r2, [pc, #292]	; (80019f4 <HAL_GPIO_Init+0x2e4>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d00d      	beq.n	80018f0 <HAL_GPIO_Init+0x1e0>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a48      	ldr	r2, [pc, #288]	; (80019f8 <HAL_GPIO_Init+0x2e8>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d007      	beq.n	80018ec <HAL_GPIO_Init+0x1dc>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a47      	ldr	r2, [pc, #284]	; (80019fc <HAL_GPIO_Init+0x2ec>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d101      	bne.n	80018e8 <HAL_GPIO_Init+0x1d8>
 80018e4:	2302      	movs	r3, #2
 80018e6:	e004      	b.n	80018f2 <HAL_GPIO_Init+0x1e2>
 80018e8:	2303      	movs	r3, #3
 80018ea:	e002      	b.n	80018f2 <HAL_GPIO_Init+0x1e2>
 80018ec:	2301      	movs	r3, #1
 80018ee:	e000      	b.n	80018f2 <HAL_GPIO_Init+0x1e2>
 80018f0:	2300      	movs	r3, #0
 80018f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f4:	f002 0203 	and.w	r2, r2, #3
 80018f8:	0092      	lsls	r2, r2, #2
 80018fa:	4093      	lsls	r3, r2
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	4313      	orrs	r3, r2
 8001900:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001902:	493b      	ldr	r1, [pc, #236]	; (80019f0 <HAL_GPIO_Init+0x2e0>)
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	3302      	adds	r3, #2
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d006      	beq.n	800192a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800191c:	4b38      	ldr	r3, [pc, #224]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4937      	ldr	r1, [pc, #220]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	4313      	orrs	r3, r2
 8001926:	600b      	str	r3, [r1, #0]
 8001928:	e006      	b.n	8001938 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800192a:	4b35      	ldr	r3, [pc, #212]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	43db      	mvns	r3, r3
 8001932:	4933      	ldr	r1, [pc, #204]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 8001934:	4013      	ands	r3, r2
 8001936:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d006      	beq.n	8001952 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001944:	4b2e      	ldr	r3, [pc, #184]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	492d      	ldr	r1, [pc, #180]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	604b      	str	r3, [r1, #4]
 8001950:	e006      	b.n	8001960 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001952:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	43db      	mvns	r3, r3
 800195a:	4929      	ldr	r1, [pc, #164]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 800195c:	4013      	ands	r3, r2
 800195e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d006      	beq.n	800197a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800196c:	4b24      	ldr	r3, [pc, #144]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	4923      	ldr	r1, [pc, #140]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	4313      	orrs	r3, r2
 8001976:	608b      	str	r3, [r1, #8]
 8001978:	e006      	b.n	8001988 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800197a:	4b21      	ldr	r3, [pc, #132]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	43db      	mvns	r3, r3
 8001982:	491f      	ldr	r1, [pc, #124]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 8001984:	4013      	ands	r3, r2
 8001986:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d006      	beq.n	80019a2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001994:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	4919      	ldr	r1, [pc, #100]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	4313      	orrs	r3, r2
 800199e:	60cb      	str	r3, [r1, #12]
 80019a0:	e006      	b.n	80019b0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019a2:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	4915      	ldr	r1, [pc, #84]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	3301      	adds	r3, #1
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	fa22 f303 	lsr.w	r3, r2, r3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f47f aeaf 	bne.w	8001724 <HAL_GPIO_Init+0x14>
  }
}
 80019c6:	bf00      	nop
 80019c8:	bf00      	nop
 80019ca:	372c      	adds	r7, #44	; 0x2c
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	10320000 	.word	0x10320000
 80019d8:	10310000 	.word	0x10310000
 80019dc:	10220000 	.word	0x10220000
 80019e0:	10210000 	.word	0x10210000
 80019e4:	10120000 	.word	0x10120000
 80019e8:	10110000 	.word	0x10110000
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40010000 	.word	0x40010000
 80019f4:	40010800 	.word	0x40010800
 80019f8:	40010c00 	.word	0x40010c00
 80019fc:	40011000 	.word	0x40011000
 8001a00:	40010400 	.word	0x40010400

08001a04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	887b      	ldrh	r3, [r7, #2]
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
 8001a20:	e001      	b.n	8001a26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a22:	2300      	movs	r3, #0
 8001a24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr

08001a32 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	807b      	strh	r3, [r7, #2]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a42:	787b      	ldrb	r3, [r7, #1]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a48:	887a      	ldrh	r2, [r7, #2]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a4e:	e003      	b.n	8001a58 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a50:	887b      	ldrh	r3, [r7, #2]
 8001a52:	041a      	lsls	r2, r3, #16
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	611a      	str	r2, [r3, #16]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr

08001a62 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b085      	sub	sp, #20
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a74:	887a      	ldrh	r2, [r7, #2]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	041a      	lsls	r2, r3, #16
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	43d9      	mvns	r1, r3
 8001a80:	887b      	ldrh	r3, [r7, #2]
 8001a82:	400b      	ands	r3, r1
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	611a      	str	r2, [r3, #16]
}
 8001a8a:	bf00      	nop
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr

08001a94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e26c      	b.n	8001f80 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 8087 	beq.w	8001bc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ab4:	4b92      	ldr	r3, [pc, #584]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	2b04      	cmp	r3, #4
 8001abe:	d00c      	beq.n	8001ada <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ac0:	4b8f      	ldr	r3, [pc, #572]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 030c 	and.w	r3, r3, #12
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d112      	bne.n	8001af2 <HAL_RCC_OscConfig+0x5e>
 8001acc:	4b8c      	ldr	r3, [pc, #560]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad8:	d10b      	bne.n	8001af2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ada:	4b89      	ldr	r3, [pc, #548]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d06c      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x12c>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d168      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e246      	b.n	8001f80 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001afa:	d106      	bne.n	8001b0a <HAL_RCC_OscConfig+0x76>
 8001afc:	4b80      	ldr	r3, [pc, #512]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a7f      	ldr	r2, [pc, #508]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	e02e      	b.n	8001b68 <HAL_RCC_OscConfig+0xd4>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10c      	bne.n	8001b2c <HAL_RCC_OscConfig+0x98>
 8001b12:	4b7b      	ldr	r3, [pc, #492]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a7a      	ldr	r2, [pc, #488]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	4b78      	ldr	r3, [pc, #480]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a77      	ldr	r2, [pc, #476]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	e01d      	b.n	8001b68 <HAL_RCC_OscConfig+0xd4>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b34:	d10c      	bne.n	8001b50 <HAL_RCC_OscConfig+0xbc>
 8001b36:	4b72      	ldr	r3, [pc, #456]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a71      	ldr	r2, [pc, #452]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	4b6f      	ldr	r3, [pc, #444]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a6e      	ldr	r2, [pc, #440]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	e00b      	b.n	8001b68 <HAL_RCC_OscConfig+0xd4>
 8001b50:	4b6b      	ldr	r3, [pc, #428]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a6a      	ldr	r2, [pc, #424]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	4b68      	ldr	r3, [pc, #416]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a67      	ldr	r2, [pc, #412]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d013      	beq.n	8001b98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b70:	f7ff fcb6 	bl	80014e0 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b78:	f7ff fcb2 	bl	80014e0 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b64      	cmp	r3, #100	; 0x64
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e1fa      	b.n	8001f80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8a:	4b5d      	ldr	r3, [pc, #372]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0f0      	beq.n	8001b78 <HAL_RCC_OscConfig+0xe4>
 8001b96:	e014      	b.n	8001bc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7ff fca2 	bl	80014e0 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba0:	f7ff fc9e 	bl	80014e0 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b64      	cmp	r3, #100	; 0x64
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e1e6      	b.n	8001f80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb2:	4b53      	ldr	r3, [pc, #332]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x10c>
 8001bbe:	e000      	b.n	8001bc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d063      	beq.n	8001c96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bce:	4b4c      	ldr	r3, [pc, #304]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00b      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bda:	4b49      	ldr	r3, [pc, #292]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 030c 	and.w	r3, r3, #12
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d11c      	bne.n	8001c20 <HAL_RCC_OscConfig+0x18c>
 8001be6:	4b46      	ldr	r3, [pc, #280]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d116      	bne.n	8001c20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf2:	4b43      	ldr	r3, [pc, #268]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d005      	beq.n	8001c0a <HAL_RCC_OscConfig+0x176>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d001      	beq.n	8001c0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e1ba      	b.n	8001f80 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0a:	4b3d      	ldr	r3, [pc, #244]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	4939      	ldr	r1, [pc, #228]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1e:	e03a      	b.n	8001c96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d020      	beq.n	8001c6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c28:	4b36      	ldr	r3, [pc, #216]	; (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2e:	f7ff fc57 	bl	80014e0 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c36:	f7ff fc53 	bl	80014e0 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e19b      	b.n	8001f80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c48:	4b2d      	ldr	r3, [pc, #180]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0f0      	beq.n	8001c36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c54:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4927      	ldr	r1, [pc, #156]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	600b      	str	r3, [r1, #0]
 8001c68:	e015      	b.n	8001c96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c6a:	4b26      	ldr	r3, [pc, #152]	; (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c70:	f7ff fc36 	bl	80014e0 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c78:	f7ff fc32 	bl	80014e0 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e17a      	b.n	8001f80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8a:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d03a      	beq.n	8001d18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d019      	beq.n	8001cde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001caa:	4b17      	ldr	r3, [pc, #92]	; (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb0:	f7ff fc16 	bl	80014e0 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb8:	f7ff fc12 	bl	80014e0 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e15a      	b.n	8001f80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cca:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0f0      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cd6:	2001      	movs	r0, #1
 8001cd8:	f000 faa6 	bl	8002228 <RCC_Delay>
 8001cdc:	e01c      	b.n	8001d18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cde:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce4:	f7ff fbfc 	bl	80014e0 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cea:	e00f      	b.n	8001d0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cec:	f7ff fbf8 	bl	80014e0 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d908      	bls.n	8001d0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e140      	b.n	8001f80 <HAL_RCC_OscConfig+0x4ec>
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000
 8001d04:	42420000 	.word	0x42420000
 8001d08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d0c:	4b9e      	ldr	r3, [pc, #632]	; (8001f88 <HAL_RCC_OscConfig+0x4f4>)
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1e9      	bne.n	8001cec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 80a6 	beq.w	8001e72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d26:	2300      	movs	r3, #0
 8001d28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d2a:	4b97      	ldr	r3, [pc, #604]	; (8001f88 <HAL_RCC_OscConfig+0x4f4>)
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10d      	bne.n	8001d52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d36:	4b94      	ldr	r3, [pc, #592]	; (8001f88 <HAL_RCC_OscConfig+0x4f4>)
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	4a93      	ldr	r2, [pc, #588]	; (8001f88 <HAL_RCC_OscConfig+0x4f4>)
 8001d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d40:	61d3      	str	r3, [r2, #28]
 8001d42:	4b91      	ldr	r3, [pc, #580]	; (8001f88 <HAL_RCC_OscConfig+0x4f4>)
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d52:	4b8e      	ldr	r3, [pc, #568]	; (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d118      	bne.n	8001d90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d5e:	4b8b      	ldr	r3, [pc, #556]	; (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a8a      	ldr	r2, [pc, #552]	; (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6a:	f7ff fbb9 	bl	80014e0 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d72:	f7ff fbb5 	bl	80014e0 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b64      	cmp	r3, #100	; 0x64
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e0fd      	b.n	8001f80 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d84:	4b81      	ldr	r3, [pc, #516]	; (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d106      	bne.n	8001da6 <HAL_RCC_OscConfig+0x312>
 8001d98:	4b7b      	ldr	r3, [pc, #492]	; (8001f88 <HAL_RCC_OscConfig+0x4f4>)
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	4a7a      	ldr	r2, [pc, #488]	; (8001f88 <HAL_RCC_OscConfig+0x4f4>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	6213      	str	r3, [r2, #32]
 8001da4:	e02d      	b.n	8001e02 <HAL_RCC_OscConfig+0x36e>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10c      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x334>
 8001dae:	4b76      	ldr	r3, [pc, #472]	; (8001f88 <HAL_RCC_OscConfig+0x4f4>)
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	4a75      	ldr	r2, [pc, #468]	; (8001f88 <HAL_RCC_OscConfig+0x4f4>)
 8001db4:	f023 0301 	bic.w	r3, r3, #1
 8001db8:	6213      	str	r3, [r2, #32]
 8001dba:	4b73      	ldr	r3, [pc, #460]	; (8001f88 <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	4a72      	ldr	r2, [pc, #456]	; (8001f88 <HAL_RCC_OscConfig+0x4f4>)
 8001dc0:	f023 0304 	bic.w	r3, r3, #4
 8001dc4:	6213      	str	r3, [r2, #32]
 8001dc6:	e01c      	b.n	8001e02 <HAL_RCC_OscConfig+0x36e>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	2b05      	cmp	r3, #5
 8001dce:	d10c      	bne.n	8001dea <HAL_RCC_OscConfig+0x356>
 8001dd0:	4b6d      	ldr	r3, [pc, #436]	; (8001f88 <HAL_RCC_OscConfig+0x4f4>)
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	4a6c      	ldr	r2, [pc, #432]	; (8001f88 <HAL_RCC_OscConfig+0x4f4>)
 8001dd6:	f043 0304 	orr.w	r3, r3, #4
 8001dda:	6213      	str	r3, [r2, #32]
 8001ddc:	4b6a      	ldr	r3, [pc, #424]	; (8001f88 <HAL_RCC_OscConfig+0x4f4>)
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	4a69      	ldr	r2, [pc, #420]	; (8001f88 <HAL_RCC_OscConfig+0x4f4>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6213      	str	r3, [r2, #32]
 8001de8:	e00b      	b.n	8001e02 <HAL_RCC_OscConfig+0x36e>
 8001dea:	4b67      	ldr	r3, [pc, #412]	; (8001f88 <HAL_RCC_OscConfig+0x4f4>)
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	4a66      	ldr	r2, [pc, #408]	; (8001f88 <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	f023 0301 	bic.w	r3, r3, #1
 8001df4:	6213      	str	r3, [r2, #32]
 8001df6:	4b64      	ldr	r3, [pc, #400]	; (8001f88 <HAL_RCC_OscConfig+0x4f4>)
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	4a63      	ldr	r2, [pc, #396]	; (8001f88 <HAL_RCC_OscConfig+0x4f4>)
 8001dfc:	f023 0304 	bic.w	r3, r3, #4
 8001e00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d015      	beq.n	8001e36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0a:	f7ff fb69 	bl	80014e0 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e10:	e00a      	b.n	8001e28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e12:	f7ff fb65 	bl	80014e0 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e0ab      	b.n	8001f80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e28:	4b57      	ldr	r3, [pc, #348]	; (8001f88 <HAL_RCC_OscConfig+0x4f4>)
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0ee      	beq.n	8001e12 <HAL_RCC_OscConfig+0x37e>
 8001e34:	e014      	b.n	8001e60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e36:	f7ff fb53 	bl	80014e0 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e3c:	e00a      	b.n	8001e54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3e:	f7ff fb4f 	bl	80014e0 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e095      	b.n	8001f80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e54:	4b4c      	ldr	r3, [pc, #304]	; (8001f88 <HAL_RCC_OscConfig+0x4f4>)
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1ee      	bne.n	8001e3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e60:	7dfb      	ldrb	r3, [r7, #23]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d105      	bne.n	8001e72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e66:	4b48      	ldr	r3, [pc, #288]	; (8001f88 <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	4a47      	ldr	r2, [pc, #284]	; (8001f88 <HAL_RCC_OscConfig+0x4f4>)
 8001e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 8081 	beq.w	8001f7e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e7c:	4b42      	ldr	r3, [pc, #264]	; (8001f88 <HAL_RCC_OscConfig+0x4f4>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 030c 	and.w	r3, r3, #12
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	d061      	beq.n	8001f4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d146      	bne.n	8001f1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e90:	4b3f      	ldr	r3, [pc, #252]	; (8001f90 <HAL_RCC_OscConfig+0x4fc>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e96:	f7ff fb23 	bl	80014e0 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9e:	f7ff fb1f 	bl	80014e0 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e067      	b.n	8001f80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb0:	4b35      	ldr	r3, [pc, #212]	; (8001f88 <HAL_RCC_OscConfig+0x4f4>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1f0      	bne.n	8001e9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec4:	d108      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ec6:	4b30      	ldr	r3, [pc, #192]	; (8001f88 <HAL_RCC_OscConfig+0x4f4>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	492d      	ldr	r1, [pc, #180]	; (8001f88 <HAL_RCC_OscConfig+0x4f4>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ed8:	4b2b      	ldr	r3, [pc, #172]	; (8001f88 <HAL_RCC_OscConfig+0x4f4>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a19      	ldr	r1, [r3, #32]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	430b      	orrs	r3, r1
 8001eea:	4927      	ldr	r1, [pc, #156]	; (8001f88 <HAL_RCC_OscConfig+0x4f4>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef0:	4b27      	ldr	r3, [pc, #156]	; (8001f90 <HAL_RCC_OscConfig+0x4fc>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef6:	f7ff faf3 	bl	80014e0 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efe:	f7ff faef 	bl	80014e0 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e037      	b.n	8001f80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f10:	4b1d      	ldr	r3, [pc, #116]	; (8001f88 <HAL_RCC_OscConfig+0x4f4>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0f0      	beq.n	8001efe <HAL_RCC_OscConfig+0x46a>
 8001f1c:	e02f      	b.n	8001f7e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1e:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <HAL_RCC_OscConfig+0x4fc>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f24:	f7ff fadc 	bl	80014e0 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2c:	f7ff fad8 	bl	80014e0 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e020      	b.n	8001f80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f3e:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <HAL_RCC_OscConfig+0x4f4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x498>
 8001f4a:	e018      	b.n	8001f7e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69db      	ldr	r3, [r3, #28]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d101      	bne.n	8001f58 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e013      	b.n	8001f80 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f58:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_RCC_OscConfig+0x4f4>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d106      	bne.n	8001f7a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d001      	beq.n	8001f7e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40007000 	.word	0x40007000
 8001f90:	42420060 	.word	0x42420060

08001f94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0d0      	b.n	800214a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa8:	4b6a      	ldr	r3, [pc, #424]	; (8002154 <HAL_RCC_ClockConfig+0x1c0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d910      	bls.n	8001fd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb6:	4b67      	ldr	r3, [pc, #412]	; (8002154 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 0207 	bic.w	r2, r3, #7
 8001fbe:	4965      	ldr	r1, [pc, #404]	; (8002154 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b63      	ldr	r3, [pc, #396]	; (8002154 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0b8      	b.n	800214a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d020      	beq.n	8002026 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d005      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ff0:	4b59      	ldr	r3, [pc, #356]	; (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	4a58      	ldr	r2, [pc, #352]	; (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ffa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0308 	and.w	r3, r3, #8
 8002004:	2b00      	cmp	r3, #0
 8002006:	d005      	beq.n	8002014 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002008:	4b53      	ldr	r3, [pc, #332]	; (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	4a52      	ldr	r2, [pc, #328]	; (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002012:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002014:	4b50      	ldr	r3, [pc, #320]	; (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	494d      	ldr	r1, [pc, #308]	; (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 8002022:	4313      	orrs	r3, r2
 8002024:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d040      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d107      	bne.n	800204a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203a:	4b47      	ldr	r3, [pc, #284]	; (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d115      	bne.n	8002072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e07f      	b.n	800214a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b02      	cmp	r3, #2
 8002050:	d107      	bne.n	8002062 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002052:	4b41      	ldr	r3, [pc, #260]	; (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d109      	bne.n	8002072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e073      	b.n	800214a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002062:	4b3d      	ldr	r3, [pc, #244]	; (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e06b      	b.n	800214a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002072:	4b39      	ldr	r3, [pc, #228]	; (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f023 0203 	bic.w	r2, r3, #3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	4936      	ldr	r1, [pc, #216]	; (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 8002080:	4313      	orrs	r3, r2
 8002082:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002084:	f7ff fa2c 	bl	80014e0 <HAL_GetTick>
 8002088:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208a:	e00a      	b.n	80020a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800208c:	f7ff fa28 	bl	80014e0 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	f241 3288 	movw	r2, #5000	; 0x1388
 800209a:	4293      	cmp	r3, r2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e053      	b.n	800214a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a2:	4b2d      	ldr	r3, [pc, #180]	; (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 020c 	and.w	r2, r3, #12
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d1eb      	bne.n	800208c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020b4:	4b27      	ldr	r3, [pc, #156]	; (8002154 <HAL_RCC_ClockConfig+0x1c0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d210      	bcs.n	80020e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c2:	4b24      	ldr	r3, [pc, #144]	; (8002154 <HAL_RCC_ClockConfig+0x1c0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 0207 	bic.w	r2, r3, #7
 80020ca:	4922      	ldr	r1, [pc, #136]	; (8002154 <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d2:	4b20      	ldr	r3, [pc, #128]	; (8002154 <HAL_RCC_ClockConfig+0x1c0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e032      	b.n	800214a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d008      	beq.n	8002102 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020f0:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	4916      	ldr	r1, [pc, #88]	; (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b00      	cmp	r3, #0
 800210c:	d009      	beq.n	8002122 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800210e:	4b12      	ldr	r3, [pc, #72]	; (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	490e      	ldr	r1, [pc, #56]	; (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	4313      	orrs	r3, r2
 8002120:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002122:	f000 f821 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 8002126:	4602      	mov	r2, r0
 8002128:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	091b      	lsrs	r3, r3, #4
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	490a      	ldr	r1, [pc, #40]	; (800215c <HAL_RCC_ClockConfig+0x1c8>)
 8002134:	5ccb      	ldrb	r3, [r1, r3]
 8002136:	fa22 f303 	lsr.w	r3, r2, r3
 800213a:	4a09      	ldr	r2, [pc, #36]	; (8002160 <HAL_RCC_ClockConfig+0x1cc>)
 800213c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800213e:	4b09      	ldr	r3, [pc, #36]	; (8002164 <HAL_RCC_ClockConfig+0x1d0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff f98a 	bl	800145c <HAL_InitTick>

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40022000 	.word	0x40022000
 8002158:	40021000 	.word	0x40021000
 800215c:	08002aac 	.word	0x08002aac
 8002160:	2000004c 	.word	0x2000004c
 8002164:	20000050 	.word	0x20000050

08002168 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002168:	b490      	push	{r4, r7}
 800216a:	b08a      	sub	sp, #40	; 0x28
 800216c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800216e:	4b2a      	ldr	r3, [pc, #168]	; (8002218 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002170:	1d3c      	adds	r4, r7, #4
 8002172:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002174:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002178:	f240 2301 	movw	r3, #513	; 0x201
 800217c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
 8002182:	2300      	movs	r3, #0
 8002184:	61bb      	str	r3, [r7, #24]
 8002186:	2300      	movs	r3, #0
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800218e:	2300      	movs	r3, #0
 8002190:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002192:	4b22      	ldr	r3, [pc, #136]	; (800221c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	2b04      	cmp	r3, #4
 80021a0:	d002      	beq.n	80021a8 <HAL_RCC_GetSysClockFreq+0x40>
 80021a2:	2b08      	cmp	r3, #8
 80021a4:	d003      	beq.n	80021ae <HAL_RCC_GetSysClockFreq+0x46>
 80021a6:	e02d      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021a8:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021aa:	623b      	str	r3, [r7, #32]
      break;
 80021ac:	e02d      	b.n	800220a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	0c9b      	lsrs	r3, r3, #18
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021ba:	4413      	add	r3, r2
 80021bc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021c0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d013      	beq.n	80021f4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021cc:	4b13      	ldr	r3, [pc, #76]	; (800221c <HAL_RCC_GetSysClockFreq+0xb4>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	0c5b      	lsrs	r3, r3, #17
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021da:	4413      	add	r3, r2
 80021dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	4a0e      	ldr	r2, [pc, #56]	; (8002220 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021e6:	fb02 f203 	mul.w	r2, r2, r3
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
 80021f2:	e004      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	4a0b      	ldr	r2, [pc, #44]	; (8002224 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021f8:	fb02 f303 	mul.w	r3, r2, r3
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	623b      	str	r3, [r7, #32]
      break;
 8002202:	e002      	b.n	800220a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002206:	623b      	str	r3, [r7, #32]
      break;
 8002208:	bf00      	nop
    }
  }
  return sysclockfreq;
 800220a:	6a3b      	ldr	r3, [r7, #32]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3728      	adds	r7, #40	; 0x28
 8002210:	46bd      	mov	sp, r7
 8002212:	bc90      	pop	{r4, r7}
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	08002a9c 	.word	0x08002a9c
 800221c:	40021000 	.word	0x40021000
 8002220:	007a1200 	.word	0x007a1200
 8002224:	003d0900 	.word	0x003d0900

08002228 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002230:	4b0a      	ldr	r3, [pc, #40]	; (800225c <RCC_Delay+0x34>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a0a      	ldr	r2, [pc, #40]	; (8002260 <RCC_Delay+0x38>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	0a5b      	lsrs	r3, r3, #9
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	fb02 f303 	mul.w	r3, r2, r3
 8002242:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002244:	bf00      	nop
  }
  while (Delay --);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1e5a      	subs	r2, r3, #1
 800224a:	60fa      	str	r2, [r7, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1f9      	bne.n	8002244 <RCC_Delay+0x1c>
}
 8002250:	bf00      	nop
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	2000004c 	.word	0x2000004c
 8002260:	10624dd3 	.word	0x10624dd3

08002264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e041      	b.n	80022fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff f84e 	bl	800132c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2202      	movs	r2, #2
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3304      	adds	r3, #4
 80022a0:	4619      	mov	r1, r3
 80022a2:	4610      	mov	r0, r2
 80022a4:	f000 fa6a 	bl	800277c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b01      	cmp	r3, #1
 8002316:	d001      	beq.n	800231c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e035      	b.n	8002388 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0201 	orr.w	r2, r2, #1
 8002332:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a16      	ldr	r2, [pc, #88]	; (8002394 <HAL_TIM_Base_Start_IT+0x90>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d009      	beq.n	8002352 <HAL_TIM_Base_Start_IT+0x4e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002346:	d004      	beq.n	8002352 <HAL_TIM_Base_Start_IT+0x4e>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a12      	ldr	r2, [pc, #72]	; (8002398 <HAL_TIM_Base_Start_IT+0x94>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d111      	bne.n	8002376 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2b06      	cmp	r3, #6
 8002362:	d010      	beq.n	8002386 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0201 	orr.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002374:	e007      	b.n	8002386 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f042 0201 	orr.w	r2, r2, #1
 8002384:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40012c00 	.word	0x40012c00
 8002398:	40000400 	.word	0x40000400

0800239c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d122      	bne.n	80023f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d11b      	bne.n	80023f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0202 	mvn.w	r2, #2
 80023c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f9b1 	bl	8002746 <HAL_TIM_IC_CaptureCallback>
 80023e4:	e005      	b.n	80023f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f9a4 	bl	8002734 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f9b3 	bl	8002758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	2b04      	cmp	r3, #4
 8002404:	d122      	bne.n	800244c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b04      	cmp	r3, #4
 8002412:	d11b      	bne.n	800244c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f06f 0204 	mvn.w	r2, #4
 800241c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2202      	movs	r2, #2
 8002422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f987 	bl	8002746 <HAL_TIM_IC_CaptureCallback>
 8002438:	e005      	b.n	8002446 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f97a 	bl	8002734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 f989 	bl	8002758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b08      	cmp	r3, #8
 8002458:	d122      	bne.n	80024a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f003 0308 	and.w	r3, r3, #8
 8002464:	2b08      	cmp	r3, #8
 8002466:	d11b      	bne.n	80024a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f06f 0208 	mvn.w	r2, #8
 8002470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2204      	movs	r2, #4
 8002476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f95d 	bl	8002746 <HAL_TIM_IC_CaptureCallback>
 800248c:	e005      	b.n	800249a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f950 	bl	8002734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f95f 	bl	8002758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	f003 0310 	and.w	r3, r3, #16
 80024aa:	2b10      	cmp	r3, #16
 80024ac:	d122      	bne.n	80024f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f003 0310 	and.w	r3, r3, #16
 80024b8:	2b10      	cmp	r3, #16
 80024ba:	d11b      	bne.n	80024f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f06f 0210 	mvn.w	r2, #16
 80024c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2208      	movs	r2, #8
 80024ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f933 	bl	8002746 <HAL_TIM_IC_CaptureCallback>
 80024e0:	e005      	b.n	80024ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f926 	bl	8002734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 f935 	bl	8002758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d10e      	bne.n	8002520 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b01      	cmp	r3, #1
 800250e:	d107      	bne.n	8002520 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f06f 0201 	mvn.w	r2, #1
 8002518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7fe fe5e 	bl	80011dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252a:	2b80      	cmp	r3, #128	; 0x80
 800252c:	d10e      	bne.n	800254c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002538:	2b80      	cmp	r3, #128	; 0x80
 800253a:	d107      	bne.n	800254c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 fa67 	bl	8002a1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002556:	2b40      	cmp	r3, #64	; 0x40
 8002558:	d10e      	bne.n	8002578 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002564:	2b40      	cmp	r3, #64	; 0x40
 8002566:	d107      	bne.n	8002578 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f8f9 	bl	800276a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	f003 0320 	and.w	r3, r3, #32
 8002582:	2b20      	cmp	r3, #32
 8002584:	d10e      	bne.n	80025a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f003 0320 	and.w	r3, r3, #32
 8002590:	2b20      	cmp	r3, #32
 8002592:	d107      	bne.n	80025a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f06f 0220 	mvn.w	r2, #32
 800259c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 fa32 	bl	8002a08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025a4:	bf00      	nop
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_TIM_ConfigClockSource+0x18>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e0b3      	b.n	800272c <HAL_TIM_ConfigClockSource+0x180>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2202      	movs	r2, #2
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025fc:	d03e      	beq.n	800267c <HAL_TIM_ConfigClockSource+0xd0>
 80025fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002602:	f200 8087 	bhi.w	8002714 <HAL_TIM_ConfigClockSource+0x168>
 8002606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800260a:	f000 8085 	beq.w	8002718 <HAL_TIM_ConfigClockSource+0x16c>
 800260e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002612:	d87f      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x168>
 8002614:	2b70      	cmp	r3, #112	; 0x70
 8002616:	d01a      	beq.n	800264e <HAL_TIM_ConfigClockSource+0xa2>
 8002618:	2b70      	cmp	r3, #112	; 0x70
 800261a:	d87b      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x168>
 800261c:	2b60      	cmp	r3, #96	; 0x60
 800261e:	d050      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0x116>
 8002620:	2b60      	cmp	r3, #96	; 0x60
 8002622:	d877      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x168>
 8002624:	2b50      	cmp	r3, #80	; 0x50
 8002626:	d03c      	beq.n	80026a2 <HAL_TIM_ConfigClockSource+0xf6>
 8002628:	2b50      	cmp	r3, #80	; 0x50
 800262a:	d873      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x168>
 800262c:	2b40      	cmp	r3, #64	; 0x40
 800262e:	d058      	beq.n	80026e2 <HAL_TIM_ConfigClockSource+0x136>
 8002630:	2b40      	cmp	r3, #64	; 0x40
 8002632:	d86f      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x168>
 8002634:	2b30      	cmp	r3, #48	; 0x30
 8002636:	d064      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x156>
 8002638:	2b30      	cmp	r3, #48	; 0x30
 800263a:	d86b      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x168>
 800263c:	2b20      	cmp	r3, #32
 800263e:	d060      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x156>
 8002640:	2b20      	cmp	r3, #32
 8002642:	d867      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x168>
 8002644:	2b00      	cmp	r3, #0
 8002646:	d05c      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x156>
 8002648:	2b10      	cmp	r3, #16
 800264a:	d05a      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800264c:	e062      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	6899      	ldr	r1, [r3, #8]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f000 f95c 	bl	800291a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002670:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	609a      	str	r2, [r3, #8]
      break;
 800267a:	e04e      	b.n	800271a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	6899      	ldr	r1, [r3, #8]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f000 f945 	bl	800291a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800269e:	609a      	str	r2, [r3, #8]
      break;
 80026a0:	e03b      	b.n	800271a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6859      	ldr	r1, [r3, #4]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	461a      	mov	r2, r3
 80026b0:	f000 f8bc 	bl	800282c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2150      	movs	r1, #80	; 0x50
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 f913 	bl	80028e6 <TIM_ITRx_SetConfig>
      break;
 80026c0:	e02b      	b.n	800271a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6818      	ldr	r0, [r3, #0]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	6859      	ldr	r1, [r3, #4]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	461a      	mov	r2, r3
 80026d0:	f000 f8da 	bl	8002888 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2160      	movs	r1, #96	; 0x60
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 f903 	bl	80028e6 <TIM_ITRx_SetConfig>
      break;
 80026e0:	e01b      	b.n	800271a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	6859      	ldr	r1, [r3, #4]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	461a      	mov	r2, r3
 80026f0:	f000 f89c 	bl	800282c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2140      	movs	r1, #64	; 0x40
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 f8f3 	bl	80028e6 <TIM_ITRx_SetConfig>
      break;
 8002700:	e00b      	b.n	800271a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4619      	mov	r1, r3
 800270c:	4610      	mov	r0, r2
 800270e:	f000 f8ea 	bl	80028e6 <TIM_ITRx_SetConfig>
        break;
 8002712:	e002      	b.n	800271a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002714:	bf00      	nop
 8002716:	e000      	b.n	800271a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002718:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr

08002746 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr

08002758 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr

0800276a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a25      	ldr	r2, [pc, #148]	; (8002824 <TIM_Base_SetConfig+0xa8>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d007      	beq.n	80027a4 <TIM_Base_SetConfig+0x28>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800279a:	d003      	beq.n	80027a4 <TIM_Base_SetConfig+0x28>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a22      	ldr	r2, [pc, #136]	; (8002828 <TIM_Base_SetConfig+0xac>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d108      	bne.n	80027b6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a1a      	ldr	r2, [pc, #104]	; (8002824 <TIM_Base_SetConfig+0xa8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d007      	beq.n	80027ce <TIM_Base_SetConfig+0x52>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c4:	d003      	beq.n	80027ce <TIM_Base_SetConfig+0x52>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a17      	ldr	r2, [pc, #92]	; (8002828 <TIM_Base_SetConfig+0xac>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d108      	bne.n	80027e0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4313      	orrs	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a07      	ldr	r2, [pc, #28]	; (8002824 <TIM_Base_SetConfig+0xa8>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d103      	bne.n	8002814 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	691a      	ldr	r2, [r3, #16]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	615a      	str	r2, [r3, #20]
}
 800281a:	bf00      	nop
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr
 8002824:	40012c00 	.word	0x40012c00
 8002828:	40000400 	.word	0x40000400

0800282c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800282c:	b480      	push	{r7}
 800282e:	b087      	sub	sp, #28
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	f023 0201 	bic.w	r2, r3, #1
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002856:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f023 030a 	bic.w	r3, r3, #10
 8002868:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	4313      	orrs	r3, r2
 8002870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	621a      	str	r2, [r3, #32]
}
 800287e:	bf00      	nop
 8002880:	371c      	adds	r7, #28
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002888:	b480      	push	{r7}
 800288a:	b087      	sub	sp, #28
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	f023 0210 	bic.w	r2, r3, #16
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	031b      	lsls	r3, r3, #12
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	621a      	str	r2, [r3, #32]
}
 80028dc:	bf00      	nop
 80028de:	371c      	adds	r7, #28
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr

080028e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b085      	sub	sp, #20
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
 80028ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4313      	orrs	r3, r2
 8002904:	f043 0307 	orr.w	r3, r3, #7
 8002908:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	609a      	str	r2, [r3, #8]
}
 8002910:	bf00      	nop
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr

0800291a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800291a:	b480      	push	{r7}
 800291c:	b087      	sub	sp, #28
 800291e:	af00      	add	r7, sp, #0
 8002920:	60f8      	str	r0, [r7, #12]
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
 8002926:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002934:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	021a      	lsls	r2, r3, #8
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	431a      	orrs	r2, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	4313      	orrs	r3, r2
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4313      	orrs	r3, r2
 8002946:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	609a      	str	r2, [r3, #8]
}
 800294e:	bf00      	nop
 8002950:	371c      	adds	r7, #28
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr

08002958 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800296c:	2302      	movs	r3, #2
 800296e:	e041      	b.n	80029f4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2202      	movs	r2, #2
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002996:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	4313      	orrs	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a14      	ldr	r2, [pc, #80]	; (8002a00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d009      	beq.n	80029c8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029bc:	d004      	beq.n	80029c8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a10      	ldr	r2, [pc, #64]	; (8002a04 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d10c      	bne.n	80029e2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40012c00 	.word	0x40012c00
 8002a04:	40000400 	.word	0x40000400

08002a08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr

08002a1a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <__libc_init_array>:
 8002a2c:	b570      	push	{r4, r5, r6, lr}
 8002a2e:	2600      	movs	r6, #0
 8002a30:	4d0c      	ldr	r5, [pc, #48]	; (8002a64 <__libc_init_array+0x38>)
 8002a32:	4c0d      	ldr	r4, [pc, #52]	; (8002a68 <__libc_init_array+0x3c>)
 8002a34:	1b64      	subs	r4, r4, r5
 8002a36:	10a4      	asrs	r4, r4, #2
 8002a38:	42a6      	cmp	r6, r4
 8002a3a:	d109      	bne.n	8002a50 <__libc_init_array+0x24>
 8002a3c:	f000 f822 	bl	8002a84 <_init>
 8002a40:	2600      	movs	r6, #0
 8002a42:	4d0a      	ldr	r5, [pc, #40]	; (8002a6c <__libc_init_array+0x40>)
 8002a44:	4c0a      	ldr	r4, [pc, #40]	; (8002a70 <__libc_init_array+0x44>)
 8002a46:	1b64      	subs	r4, r4, r5
 8002a48:	10a4      	asrs	r4, r4, #2
 8002a4a:	42a6      	cmp	r6, r4
 8002a4c:	d105      	bne.n	8002a5a <__libc_init_array+0x2e>
 8002a4e:	bd70      	pop	{r4, r5, r6, pc}
 8002a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a54:	4798      	blx	r3
 8002a56:	3601      	adds	r6, #1
 8002a58:	e7ee      	b.n	8002a38 <__libc_init_array+0xc>
 8002a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a5e:	4798      	blx	r3
 8002a60:	3601      	adds	r6, #1
 8002a62:	e7f2      	b.n	8002a4a <__libc_init_array+0x1e>
 8002a64:	08002abc 	.word	0x08002abc
 8002a68:	08002abc 	.word	0x08002abc
 8002a6c:	08002abc 	.word	0x08002abc
 8002a70:	08002ac0 	.word	0x08002ac0

08002a74 <memset>:
 8002a74:	4603      	mov	r3, r0
 8002a76:	4402      	add	r2, r0
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d100      	bne.n	8002a7e <memset+0xa>
 8002a7c:	4770      	bx	lr
 8002a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a82:	e7f9      	b.n	8002a78 <memset+0x4>

08002a84 <_init>:
 8002a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a86:	bf00      	nop
 8002a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a8a:	bc08      	pop	{r3}
 8002a8c:	469e      	mov	lr, r3
 8002a8e:	4770      	bx	lr

08002a90 <_fini>:
 8002a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a92:	bf00      	nop
 8002a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a96:	bc08      	pop	{r3}
 8002a98:	469e      	mov	lr, r3
 8002a9a:	4770      	bx	lr
